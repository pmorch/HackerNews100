<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0">
    <channel>
        <title>HN100 - Readable Contents</title>
        <link>https://hn.algolia.com/api/v1/search_by_date?tags=%28story,poll%29&amp;numericFilters=points%3E100</link>
        <description>Uses Readability to add bodies to the RSS feed</description>
        <lastBuildDate>Wed, 31 Jul 2024 22:30:03 GMT</lastBuildDate>
        <docs>https://validator.w3.org/feed/docs/rss2.html</docs>
        <generator>https://github.com/jpmonette/feed</generator>
        <language>en</language>
        <item>
            <title><![CDATA[Suspicious data pattern in recent Venezuelan election (290 pts)]]></title>
            <link>https://statmodeling.stat.columbia.edu/2024/07/31/suspicious-data-pattern-in-recent-venezuelan-election/</link>
            <guid>41123155</guid>
            <pubDate>Wed, 31 Jul 2024 20:34:31 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://statmodeling.stat.columbia.edu/2024/07/31/suspicious-data-pattern-in-recent-venezuelan-election/">https://statmodeling.stat.columbia.edu/2024/07/31/suspicious-data-pattern-in-recent-venezuelan-election/</a>, See on <a href="https://news.ycombinator.com/item?id=41123155">Hacker News</a></p>
Couldn't get https://statmodeling.stat.columbia.edu/2024/07/31/suspicious-data-pattern-in-recent-venezuelan-election/: Error: Request failed with status code 403]]></description>
        </item>
        <item>
            <title><![CDATA[Foobar2000 (138 pts)]]></title>
            <link>https://www.foobar2000.org/</link>
            <guid>41122920</guid>
            <pubDate>Wed, 31 Jul 2024 20:05:20 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.foobar2000.org/">https://www.foobar2000.org/</a>, See on <a href="https://news.ycombinator.com/item?id=41122920">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>
  <p><a href="https://www.foobar2000.org/screenshots" title="View more screenshots"><img id="pagepic" alt="View more screenshots" src="https://www.foobar2000.org/tinyfoobar.png"></a>


  foobar2000 is an advanced freeware audio player for the Windows platform.
 </p><h2>Latest news</h2>
  <div>
	<h3>2024-05-21</h3>
<p>
    New releases of old versions!
</p>
<p>
    Some of latest bug fixes have been backported to foobar2000 v1.5 and v1.6 series. <br>
    Versions 1.6.18 and 1.5.12 can be downloaded from <a href="https://www.foobar2000.org/old">old versions page</a>. <br>
    Additionally, version 1.5.12 was properly tested on old hardware; unintended SSE CPU requirement present in previous releases has been removed.
</p><h3>2024-05-20</h3>
<p>
    foobar2000 mobile v1.5 has been released. <br>
    This version introduces <a href="https://www.foobar2000.org/mobile/skinformat">new skin file format</a> which can be edited using commonly available tools. <br>
    <a href="https://www.foobar2000.org/apk">Download Android APK...</a>
</p><h3>2023-12-18</h3>
<p>
    foobar2000 v2.1 final has been released. <br>
    <a href="https://www.foobar2000.org/download">Download...</a>
</p>
<p>
    foobar2000 for Mac v2.6 final has also been released. <br>
    <a href="https://www.foobar2000.org/mac">Download foobar2000 for Mac...</a>
</p><h3> <a href="https://www.foobar2000.org/?page=News">View all news</a> </h3>
</div>
      <table>
            <caption>
          advertisement
        </caption>
      <tbody><tr> 
          <td>

          <div onclick="document.location.href='https://www.dbpoweramp.com/dmc.htm?fb=1';">
            <p><span>dBpoweramp mp3 Converter</span>
            <br>
              <span> music conversion perfected<br>&nbsp;</span>
              <br>
                <img alt="dmc" src="https://www.dbpoweramp.com/images/dmc/dmc.png" width="160" height="122"></p><p>&nbsp;
                      <span>Trusted by 30 million people, easy conversion between audio formats</span></p></div>

        </td>

            <td>

              <div onclick="document.location.href='https://www.dbpoweramp.com/perfecttunes.htm?fb=1';">
            <p><span>PerfectTUNES</span>
            <br>
              <span>
                a helping hand for your audio collection<br>&nbsp;</span>
              <br>
                <img alt="" height="122" src="https://www.dbpoweramp.com/images/pt-art-main.png" width="106"></p><p>
                    &nbsp;
                      <span>Add or upgrade Album Art, De-Dup and check for ripping errors</span></p></div>

        </td>

            <td>

              <div onclick="document.location.href='https://www.dbpoweramp.com/cd-ripper.htm?fb=1';">
            <p><span>dBpoweramp CD Ripper</span>
            <br>
              <span>
                CD ripping taken seriously<br>&nbsp;</span>
              <br>
                <img alt="cdripper" height="122" src="https://www.dbpoweramp.com/images/cd-ripper-secure.png" width="80"></p><p>
                    &nbsp;
                      <span>Secure Ripping from the inventors of AccurateRip, fast &amp; bit-perfect CD ripping</span></p></div>

        </td>

      </tr>
  </tbody></table>
  
    <h2>Main features</h2>
  <ul>
    <li>Supported audio formats: MP3, MP4, AAC, CD Audio, WMA, Vorbis, Opus, FLAC, WavPack, WAV, AIFF, Musepack, Speex, AU, SND... and more with additional <a href="https://www.foobar2000.org/?page=Download#components">components</a>.</li>
    <li><a href="https://wiki.hydrogenaudio.org/index.php?title=Gapless" rel="nofollow">Gapless</a> playback.</li>
    <li>Easily <a href="https://wiki.hydrogenaudio.org/index.php?title=Foobar2000:Layout_Editing_Mode" rel="nofollow">customizable user interface layout</a>.</li>
    <li>Advanced <a href="https://wiki.hydrogenaudio.org/index.php?title=Foobar2000redirect:C16D48EE-39BE-4C91-9A35-441BEFA286D2" rel="nofollow">tagging capabilities</a>.</li>
    <li>Support for ripping Audio CDs as well as transcoding all supported audio formats using the <a href="https://www.foobar2000.org/FAQ#converting_audio_files_to_different_file_formats">Converter component</a>.</li>
    <li>Full <a href="https://wiki.hydrogenaudio.org/index.php?title=Replaygain" rel="nofollow">ReplayGain</a> support.</li>
    <li>Customizable keyboard shortcuts.</li>
    <li>Open component architecture allowing third-party developers to extend functionality of the player.</li>
  </ul>
 </div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Stop Destroying Videogames – European Citizens' Initiative (102 pts)]]></title>
            <link>https://citizens-initiative.europa.eu/initiatives/details/2024/000007_en</link>
            <guid>41121570</guid>
            <pubDate>Wed, 31 Jul 2024 18:02:57 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://citizens-initiative.europa.eu/initiatives/details/2024/000007_en">https://citizens-initiative.europa.eu/initiatives/details/2024/000007_en</a>, See on <a href="https://news.ycombinator.com/item?id=41121570">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>
                  <p>European Citizens' Initiative</p>
                      </div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Meta Has Run Hundreds of Ads for Cocaine, Opioids and Other Drugs (149 pts)]]></title>
            <link>https://www.wsj.com/tech/meta-cocaine-opioids-ads-dea8e0fc</link>
            <guid>41121237</guid>
            <pubDate>Wed, 31 Jul 2024 17:30:35 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.wsj.com/tech/meta-cocaine-opioids-ads-dea8e0fc">https://www.wsj.com/tech/meta-cocaine-opioids-ads-dea8e0fc</a>, See on <a href="https://news.ycombinator.com/item?id=41121237">Hacker News</a></p>
Couldn't get https://www.wsj.com/tech/meta-cocaine-opioids-ads-dea8e0fc: Error: Request failed with status code 401]]></description>
        </item>
        <item>
            <title><![CDATA[I prefer rST to Markdown (229 pts)]]></title>
            <link>https://buttondown.email/hillelwayne/archive/why-i-prefer-rst-to-markdown/</link>
            <guid>41120254</guid>
            <pubDate>Wed, 31 Jul 2024 15:49:55 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://buttondown.email/hillelwayne/archive/why-i-prefer-rst-to-markdown/">https://buttondown.email/hillelwayne/archive/why-i-prefer-rst-to-markdown/</a>, See on <a href="https://news.ycombinator.com/item?id=41120254">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>
                
                    <date>
                        
                            July 31, 2024
                        </date>
                
                
                
                    <h2>
                        I will never stop dying on this hill
                    </h2>
                

                

                
                    
                        <p>I just published a new version of <a href="https://leanpub.com/logic/" target="_blank">Logic for Programmers</a>! v0.2 has epub support, content on constraint solving and formal specification, and more! Get it <a href="https://leanpub.com/logic/" target="_blank">here</a>.</p>
<p>This is my second book written with <a href="https://www.sphinx-doc.org/en/master/" target="_blank">Sphinx</a>, after the new <a href="https://www.learntla.com/" target="_blank">Learn TLA+</a>. Sphinx uses a peculiar markup called <a href="https://docutils.sourceforge.io/rst.html" target="_blank">reStructured Text</a> (rST), which has a steeper learning curve than markdown. I only switched to it <em>after</em> writing a couple of books in markdown and deciding I needed something better. So I want to talk about why rst was that something.<sup id="fnref:rst"><a href="#fn:rst">1</a></sup></p>
<h2>Why rst is better</h2>
<p>The most important difference between rst and markdown is that markdown is a lightweight representation of html, while rst is a midweight representation of an abstract documentation tree.</p>
<p>It's easiest to see this with a comparison. Here's how to make an image in markdown:</p>

<p>Technically, you don't even need a parser for this. You just need a regex to transform it into  <code>&lt;img alt="alttext" src="example.jpg"/&gt;</code>. Most modern markdown engines <em>do</em> parse this into an intermediate representation, but the <em>essence</em> of markdown is that it's a lightweight html notation.</p>
<p>Now here's how to make an image in rst:</p>
<div><pre><span></span><code><span>..</span> <span>image</span><span>::</span> example.jpg
  <span>:alt:</span> alttext
</code></pre></div>
<p><code>.. image::</code> defines the image "directive". When Sphinx reads it, it looks up the registered handler for the directive, finds <code>ImageDirective</code>, invokes <code>ImageDirective.run</code>, which returns an <code>image_node</code>, which is an object with an <code>alt</code> field containing "alttext". Once Sphinx's processed all nodes, it passes the whole doctree to the HTML Writer, which looks up the rendering function for <code>image_node</code>, which tells it to output an <code>&lt;image&gt;</code> tag.</p>
<p>Whew that's a mouthful. And for all that implementation complexity, we get…  an interface that has 3x the boilerplate as markdown.</p>
<p>On the other hand, the markdown image is hardcoded as a special case in the parser, while the rst image is not. It was added in the exact same way as every other directive in rst: register a handler for the directive, have the handler output a specific kind of node, and then register a renderer for that node for each builder you want.</p>
<p>This means you can extend Sphinx with new text objects! Say you that instead of an <code>&lt;image&gt;</code>, you want a <code>&lt;figure&gt;</code> with a <code>&lt;figcaption&gt;</code>. In basic markdown you have to manually insert the html, with Sphinx you can just register a new <code>figure</code> directive. You can even make your <code>FigureDirective</code> subclass <code>ImageDirective</code> and have it do most of the heavy lifting.</p>
<p>The second benefit is more subtle: you can transform the doctree before rendering it. This is how Sphinx handles cross-referencing: if I put a <code>foo</code> anchor in one document and <code>:ref:`image &lt;foo&gt;`</code> in another, Sphinx will insert the right URL during postprocessing. The transformation code is also first-class with the rest of the build process: I can configure a transform to only apply when I'm outputting html, have it trigger in a certain stage of building, or even remove a builtin transform I don't want to run.</p>
<p>Now, most people may not need this kind of power! Markdown is ubiquitous because it's lightweight and portable, and rst is anything but. But <em>I</em> need that power.</p>

<h3>One use case</h3>
<p><em>Logic for Programmers</em> is a math-adjacent book, and all good math books need exercises for the reader. It's easier to write an exercise if I can put it and the solution right next to each other in the document. But for readers, I want the solutions to show up in the back of the book. I also want to link the two together, and since I might want to eventually print the book, the pdfs should also include page references. Plus they need to be rendered in different ways for latex (pdf) output and epub output. Overall lots of moving parts.</p>
<p>To handle this I wrote my own exercise extension.</p>
<div><pre><span></span><code><span>.. in chapter.rst</span>
<span>..</span> <span>exercise</span><span>::</span> Fizzbuzz
  <span>:name:</span> ex-fizzbuzz

  An exercise

<span>..</span> <span>solution</span><span>::</span> ex-fizzbuzz

  A solution

<span>.. in answers.rst</span>

<span>..</span> <span>solutionlist</span><span>::</span>
</code></pre></div>
<p>How these nodes are processed depends on my compilation target. I like to debug in HTML, so for HTML it just renders the exercise and solution inline.</p>
<p>When generating epub and latex, though, things works a little differently. After generating the whole doctree, I run a transform that moves every solution node from its original location to under <code>solutionlist</code>. Then it attaches a reference node to every exercise, linking it to the <em>new</em> solution location, and vice versa. So it starts like this (using Sphinx's "pseudoxml" format): </p>
<div><pre><span></span><code>--<span> </span>chapter.rst
<span>&lt;exercise_node</span><span> </span><span>ids=</span><span>"ex-fizzbuzz"</span><span>&gt;</span>
<span>  </span><span>&lt;title&gt;</span>
<span>    </span>Fizzbuzz
<span>  </span><span>&lt;paragraph&gt;</span>
<span>    </span>An<span> </span>exercise
<span>&lt;solution_node</span><span> </span><span>ids=</span><span>"ex-fizzbuzz-sol"</span><span>&gt;</span>
<span>  </span><span>&lt;paragraph&gt;</span>
<span>    </span>A<span> </span>solution

--<span> </span>answers.rst
<span>&lt;solutionlist_node&gt;</span>
</code></pre></div>
<p>And it becomes this:</p>
<div><pre><span></span><code>--<span> </span>chapter.rst
<span>&lt;exercise_node</span><span> </span><span>ids=</span><span>"ex-fizzbuzz"</span><span>&gt;</span>
<span>  </span><span>&lt;title&gt;</span>
<span>    </span>Fizzbuzz
<span>  </span><span>&lt;paragraph&gt;</span>
<span>    </span>An<span> </span>exercise
<span>    </span><span>&lt;exsol_ref_node</span><span> </span><span>refuri=</span><span>"/path/to/answers#ex-fizzbuzz-sol"</span><span>&gt;</span>
<span>      </span>Solution

--<span> </span>answers.rst
<span>&lt;solutionlist_node&gt;</span>
<span>  </span><span>&lt;solution_node</span><span> </span><span>ids=</span><span>"ex-fizzbuzz-sol"</span><span>&gt;</span>
<span>    </span><span>&lt;paragraph&gt;</span>
<span>      </span>A<span> </span>solution
<span>      </span><span>&lt;exsol_ref_node</span><span> </span><span>refuri=</span><span>"/path/to/chapter#ex-fizzbuzz"</span><span>&gt;</span>
<span>        </span>(back)
</code></pre></div>

<p>The Latex builder renders this by wrapping each exercise and solution in an <a href="https://ctan.org/pkg/exercise" target="_blank">answers environment</a>, while the epub builder renders the solution as a <a href="https://help.apple.com/itc/booksassetguide/en.lproj/itccf8ecf5c8.html" target="_blank">popup footnote</a>.<sup id="fnref:exsol_ref"><a href="#fn:exsol_ref">2</a></sup> Making this work:</p>
<p><img alt="An example of solution popups on an epub reader" src="https://assets.buttondown.email/images/8a7d66e3-56bd-4b7a-95ac-d4fdf88047c7.png?w=960&amp;fit=max"> </p>
<p>It's a complex dance of operations, but it works enormously well. It even helps with creating a "free sample" subset of the book: the back of the free sample only includes the solutions from the included subset, not the whole book!</p>
<h3>"But I hate the syntax"</h3>
<p>When I gush about rST to other programmers, this is the objection I hear the most: it's ugly. </p>
<p>To which I say, are you really going to avoid using a good tool just because it makes you puke? Because looking at it makes your stomach churn? Because it offends every fiber of your being?</p>
<p>...Okay yeah that's actually a pretty good reason not to use it. I can't get into lisps for the same reason. I'm not going to begrudge anybody who avoids a tool because it's ugly.</p>
<p>Maybe you'd find <a href="https://github.com/asciidoctor/asciidoctor" target="_blank">asciidoc</a> more aesthetically pleasing? Or <a href="https://mystmd.org/spec" target="_blank">MyST</a>? Or <a href="https://github.com/typst/typst" target="_blank">Typst</a>? Or <a href="https://docs.racket-lang.org/pollen/" target="_blank">Pollen</a>? Or even <a href="https://pandoc.org/MANUAL.html#extension-attributes" target="_blank">pandoc-extended markdown</a>? There are lots of solid document builders out there! My point isn't that sphinx/rst is exceptionally <em>good</em> for largescale documentation, it's that simple markdown is exceptionally <em>bad</em>. It doesn't have a uniform extension syntax or native support for pre-render transforms.</p>
<p>This is why a lot of markdown-based documentation generators kind of hack on their own preprocessing step to support new use-cases, which works for the most part (unless you're trying to do something really crazy). But they have to work around the markdown, not in it, which limits how powerful they can be. It also means that most programmer tooling can't understand it well. There's LSP and treesitter for markdown and rst but not for gitbook-markdown or md-markdown or leanpub-markdown.<sup id="fnref:treesitter"><a href="#fn:treesitter">3</a></sup></p>
<p>But if you find a builder that uses markdown and satisfies your needs, more power to you! I just want to expose people to the idea that doc builders can be a lot more powerful than they might otherwise expect.</p>
<hr>
<h3>No newsletter next week</h3>
<p>I'll be in Hong Kong.</p>
<h2>Update 2024-07-31</h2>
<p>Okay since this is blowing up online I'm going to throw in a quick explanation of <em>Logic for Programmers</em> for all of the non-regulars here. I'm working on a book about how formal logic is useful in day-to-day software engineering. It starts with a basic rundown of the math and then goes into eight different applications, such as property testing, database constraints, and decision tables. It's still in the alpha stages but already 20k words and has a lot of useful content. You can find it <a href="https://leanpub.com/logic" target="_blank">here</a>. Reader feedback highly appreciated!</p>

                    
                

                
                    <p><em>If you're reading this on the web, you can subscribe <a href="https://buttondown.email/hillelwayne" target="_blank">here</a>. Updates are once a week. My main website is <a href="https://www.hillelwayne.com/" target="_blank">here</a>.</em></p>
                

            </div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Jeff Bezos' management rules are slowly unraveling inside Amazon (160 pts)]]></title>
            <link>https://fortune.com/2024/07/31/amazon-leadership-principles-questions-future-jeff-bezos-departure-andy-jassy/</link>
            <guid>41120201</guid>
            <pubDate>Wed, 31 Jul 2024 15:44:10 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://fortune.com/2024/07/31/amazon-leadership-principles-questions-future-jeff-bezos-departure-andy-jassy/">https://fortune.com/2024/07/31/amazon-leadership-principles-questions-future-jeff-bezos-departure-andy-jassy/</a>, See on <a href="https://news.ycombinator.com/item?id=41120201">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>



<p>But Hayter, a program manager, was bothered on a deeper level: Because the policy effectively meant that only people living near an Amazon office would be able to continue working at the company, she believed Amazon was violating one of its sacred tenets to “hire and develop the best.”&nbsp;</p>



<p>What’s more, by announcing the mandate with little warning or buy-in, Hayter believed, Amazon CEO Andy Jassy had betrayed his duty to “earn trust,” another important part of the Amazon code.</p>



<p>At Amazon these tenets, known as Leadership Principles, are much more than suggestions. They are a way of life that employees are judged on before they are even hired, steeped in from the moment they join, and scrupulously followed thereafter with the devotion of religious converts.&nbsp;</p>



<p>Hayter’s next move was a case in point: With the help of some of the 30,000 other employees who joined an internal <a href="https://fortune.com/2023/06/04/amazon-unfazed-remote-workers-protest-return-to-office-mandate/" target="_self" aria-label="Go to https://fortune.com/2023/06/04/amazon-unfazed-remote-workers-protest-return-to-office-mandate/">Slack channel she’d created</a>, she drafted a memo to lay out their concerns about the return-to-work mandate. The memo was exactly six pages long.</p>



<p>Like the Leadership Principles, six-page memos (“6-pagers,” in Amazon lingo) are part of a unique work culture forged within the giant internet company over the years and considered as much of a contributor to Amazon’s world-beating success as any blockbuster product or individual, including <a href="https://fortune.com/preview/2024/07/30/jeff-bezos-leadership-rules-are-revered-and-imitated-by-ceos-everywhere-can-they-survive-the-andy-jassy-era-at-amazon/" target="_self" aria-label="Go to https://fortune.com/preview/2024/07/30/jeff-bezos-leadership-rules-are-revered-and-imitated-by-ceos-everywhere-can-they-survive-the-andy-jassy-era-at-amazon/">Amazon founder Jeff Bezos himself</a>.&nbsp;</p>



<p>In reality, these principles and the processes they produce are among Amazon’s grandest innovations.</p>



<p>The customs and practices are widely imitated: More than a dozen books promise to teach managers the secrets to the principles and processes; consultants do brisk business helping firms import Amazon’s methods into their organizations; CEOs load their emails with Amazonian axioms.</p>



<p>And yet, as the Hayter episode shows, the Amazon Way is a fragile concept even within Amazon itself. Jassy defended the return-to-work decision as <a href="https://www.businessinsider.com/amazon-andy-jassy-no-data-return-to-office-rto-aws-2023-8" target="_blank" aria-label="Go to https://www.businessinsider.com/amazon-andy-jassy-no-data-return-to-office-rto-aws-2023-8" rel="noopener">a judgment call</a>; after all, another company leadership principle notes that “leaders are right a lot. They have strong judgment and good instincts.” But the clash between employees and the CEO over who was being more faithful to the code reveals a growing tension that some fear could erode the pillars of the $2 trillion company.&nbsp;</p>


<div><p><img alt="" loading="lazy" width="1024" height="683" decoding="async" data-nimg="1" sizes="100vw" srcset="https://fortune.com/img-assets/wp-content/uploads/2024/07/GettyImages-1169387139-e1722363657869.jpg?w=320&amp;q=75 320w, https://fortune.com/img-assets/wp-content/uploads/2024/07/GettyImages-1169387139-e1722363657869.jpg?w=384&amp;q=75 384w, https://fortune.com/img-assets/wp-content/uploads/2024/07/GettyImages-1169387139-e1722363657869.jpg?w=480&amp;q=75 480w, https://fortune.com/img-assets/wp-content/uploads/2024/07/GettyImages-1169387139-e1722363657869.jpg?w=576&amp;q=75 576w, https://fortune.com/img-assets/wp-content/uploads/2024/07/GettyImages-1169387139-e1722363657869.jpg?w=768&amp;q=75 768w, https://fortune.com/img-assets/wp-content/uploads/2024/07/GettyImages-1169387139-e1722363657869.jpg?w=1024&amp;q=75 1024w, https://fortune.com/img-assets/wp-content/uploads/2024/07/GettyImages-1169387139-e1722363657869.jpg?w=1280&amp;q=75 1280w, https://fortune.com/img-assets/wp-content/uploads/2024/07/GettyImages-1169387139-e1722363657869.jpg?w=1440&amp;q=75 1440w" src="https://fortune.com/img-assets/wp-content/uploads/2024/07/GettyImages-1169387139-e1722363657869.jpg?w=1440&amp;q=75"></p><figcaption>Employees walk past a mural relief reading “Earn Trust” at the Amazon.com Inc. office campus in Hyderabad, India.</figcaption><p>Dhiraj Singh—Bloomberg via Getty Images</p></div>



<p>More than three years after Bezos passed the CEO baton to Jassy, as Amazon recently <a href="https://fortune.com/2024/07/05/jeff-bezos-andy-jassy-amazon-30-year-anniversary/" target="_self" aria-label="Go to https://fortune.com/2024/07/05/jeff-bezos-andy-jassy-amazon-30-year-anniversary/">celebrated its 30th birthday</a>, the durability and staying power of Amazon’s foundational work culture are being watched closely by many inside and outside the organization.&nbsp;</p>



<p>Fortune spoke to two dozen current and recently departed Amazon executives and managers about how the famous Amazon Way is holding up in the post-Bezos era. Many of those interviewed paint a picture of a company where the key principles and practices remain core but have become less universally agreed upon. Increasingly, some insiders say, the leadership principles have become weaponized, diluted, or applied inconsistently.&nbsp;</p>



<p>PowerPoint presentations, once strictly verboten, now pop up occasionally. Longtime leaders who embodied the principles in their every move have moved on.</p>



<p>Perhaps in response to some of these new realities, Amazon recently disseminated to employees <a href="https://www.youtube.com/watch?v=My-2-MyxamQ" target="_blank" aria-label="Go to https://www.youtube.com/watch?v=My-2-MyxamQ" rel="noopener">an hourlong video course hosted by Jassy</a> himself explaining the company’s 16 leadership principles.&nbsp;</p>



<p>“The leadership principles are not something that you just memorize or that you just study for a couple of hours, or you try once or twice and you’ve got them,” Jassy says in the intro. “It’s something that you have to practice a lot.”</p>



<p>Margaret Callahan, an Amazon spokesperson, said that the company regularly updates internal resources and training, including on topics pertaining to the company’s culture. She said that Amazon’s culture—defined by the leadership principles, a “writing culture,” and working backward from customers’ needs—remains strong: “It’s what has driven innovations such as Prime, AWS, the Kindle, Alexa, the Climate Pledge, and Project Kuiper, just to name a few.”</p>



<p>The success of these products, and Amazon’s<a href="https://fortune.com/2024/05/09/amazon-andy-jassy-earnings-accelerated-growth-aws-ads/" target="_self" aria-label="Go to https://fortune.com/2024/05/09/amazon-andy-jassy-earnings-accelerated-growth-aws-ads/"> continued financial growth</a>, indicate that the company is far from facing any immediate crisis. On Thursday, Amazon will report its second-quarter financial results, with Wall Street analysts expecting double-digit revenue and profit growth.&nbsp;</p>



<p>As Amazon seeks to extend its dominance into the next 30 years, however, the leadership principles and special work culture will almost certainly collide with the questions that have challenged so many corporate paragons of the past: Is having a sacred playbook an asset that companies should preserve at all costs, or does it become a liability holding companies back as the world around them changes? And, perhaps more important, is there a point at which a company’s size, growth, and industry-spanning tentacles make a unified culture of decision-making and inventing impossible?</p>



<h2>True believers in the Amazon Way </h2>



<p>Customer obsession.</p>



<p>Bias for action.</p>



<p>Disagree and commit.&nbsp;</p>



<p>There are <a href="https://www.amazon.jobs/content/en/our-workplace/leadership-principles" target="_blank" aria-label="Go to https://www.amazon.jobs/content/en/our-workplace/leadership-principles" rel="noopener">16 Leadership Principles at Amazon</a>. Any Amazon employee can recite most of them by heart (those who can’t won’t last very long).</p>



<p>There are also the various homegrown Amazon practices: the two-pizza rule, which holds that cross-functional, or “single-threaded,” teams focused on a specific goal or project should be lean enough that two pies could suffice as a team meal. There’s also a rabid attention on so-called “input” metrics of a certain business—think selection or price—rather than output metrics such as revenue.&nbsp;</p>



<p>And then there’s the intense focus on written narratives, including the 6-pager, a planning document that describes in storylike fashion a goal for a business line and how to go about accomplishing it, or a new project or plan (one variant of the 6-pager is the so-called PRFAQ, written in the style of a press release announcing the hypothetical future product, and the focal point of Amazon’s “Working Backward” product-development approach). Before a key meeting, every single attendee sits silently and reads the memo to themself. Only then is a discussion permitted to begin in earnest.&nbsp;</p>



<p>It sounds almost cultlike, Amazon insiders acknowledge. But as former Amazon Prime Video boss Bill Carr notes, the payoff is that historically Amazon employees up and down the corporate ladder understand things at a “granular level.”</p>


<div><p><img alt="" loading="lazy" width="1024" height="683" decoding="async" data-nimg="1" sizes="100vw" srcset="https://fortune.com/img-assets/wp-content/uploads/2024/07/GettyImages-1445867611-e1722363942847.jpg?w=320&amp;q=75 320w, https://fortune.com/img-assets/wp-content/uploads/2024/07/GettyImages-1445867611-e1722363942847.jpg?w=384&amp;q=75 384w, https://fortune.com/img-assets/wp-content/uploads/2024/07/GettyImages-1445867611-e1722363942847.jpg?w=480&amp;q=75 480w, https://fortune.com/img-assets/wp-content/uploads/2024/07/GettyImages-1445867611-e1722363942847.jpg?w=576&amp;q=75 576w, https://fortune.com/img-assets/wp-content/uploads/2024/07/GettyImages-1445867611-e1722363942847.jpg?w=768&amp;q=75 768w, https://fortune.com/img-assets/wp-content/uploads/2024/07/GettyImages-1445867611-e1722363942847.jpg?w=1024&amp;q=75 1024w, https://fortune.com/img-assets/wp-content/uploads/2024/07/GettyImages-1445867611-e1722363942847.jpg?w=1280&amp;q=75 1280w, https://fortune.com/img-assets/wp-content/uploads/2024/07/GettyImages-1445867611-e1722363942847.jpg?w=1440&amp;q=75 1440w" src="https://fortune.com/img-assets/wp-content/uploads/2024/07/GettyImages-1445867611-e1722363942847.jpg?w=1440&amp;q=75"></p><figcaption>Andy Jassy took the baton from Amazon founder Bezos in 2021 to become the new CEO.</figcaption><p>Thos Robinson/Getty Images for The New York Times</p></div>



<p>“The executives at Amazon are just so much more well-informed about what is going on in their company, in terms of metrics, in terms of the initiatives that teams are doing, in terms of what’s working, what’s not working,” said Carr, who left in 2015 but is the coauthor of the book <em>Working Backwards</em> and cofounder of a consulting firm by the same name, which both aim to guide business leaders on how to apply Amazon’s principles and practices to their own businesses.&nbsp;</p>



<p>Executives at Amazon brim with personal examples of the power of the leadership mottos. Ideally, multiple principles can mesh together on a project to help unleash a single breakthrough product or service.&nbsp;</p>



<p>Beryl Tomay, a 19-year Amazon veteran and vice president of its transportation division, points to one recent success story that involved “regionalizing” the company’s network of U.S. warehouses so that each facility serves a distinct geographic area. The multiyear project has lowered costs, led to more environmentally friendly trucking routes, and allowed customers to get their goods faster, the company has said.&nbsp;</p>



<p>From brainstorming the initial idea to executing, the project called for a collection of Leadership Principles— from “customer obsession” to “thinking big.” Tomay reels off more of them with the zeal of a true believer: “There’s a ‘simplify’ part [and] there’s also the ‘invent’ part. ‘Dive deep’ too. Going super deep into what our topology looks like, and what our inbound inventory placement looks like.”</p>



<p>If mission statements and corporate values are viewed as empty slogans within many companies, at Amazon the Leadership Principles and special practices are embraced with genuine sincerity.&nbsp;</p>



<p>“It’s critically important for an organization to have something like this if they are actually meaningful,” said Stephan Meier, chair of the management division at Columbia Business School and author of the forthcoming book <em>The Employee Advantage</em>.&nbsp;</p>



<p>But, Meier adds, “if it’s not lived, if it’s not on top of people’s minds, if it doesn’t have any implications of how you would make decisions or treat each other, they are completely meaningless.”</p>



<p>It’s precisely this warning that made some Amazon insiders uneasy with what happened a few years ago.</p>



<h2>An erosion of trust</h2>



<p>On July 1, 2021, Amazon did something it hadn’t done in many years: It added two new leadership principles to its list. “Strive to be Earth’s best employer” was one new principle. “Success and scale bring broad responsibility” was the other.&nbsp;</p>



<p>When these were introduced, Amazon was facing intense media coverage over the swell of unionization efforts in its warehouse network, as well as antitrust and environmental scrutiny. And with <a href="https://fortune.com/2021/02/02/jeff-bezos-stepping-down-amazon-ceo-executive-chair-letter-to-employees-andy-jassy-replacement/" target="_self" aria-label="Go to https://fortune.com/2021/02/02/jeff-bezos-stepping-down-amazon-ceo-executive-chair-letter-to-employees-andy-jassy-replacement/">Bezos scheduled to hand over the CEO reins</a> a few days later, the introduction of the two new principles served as a convenient opportunity to demonstrate a company committed to progress under his successor.</p>



<p>Inside the company, though, the reaction among many employees was swift and brutal: “They are clearly a marketing ploy and they devalue the rest of the Leadership Principles,” one former senior manager of more than 10 years who left the company recently told <em>Fortune</em>. “Total bullshit,” opined a former longtime communications employee at Amazon who was still at the company at the time, and who summed up the new principles as “playing the reputational game versus guiding how you think.”</p>



<p>The problem, explained a former Amazon vice president, is that the pair of new leadership principles are so radically different from the other 14 that it makes it tougher for employees to grasp the essence of the overall principles and to act on them. “I’ve got to think that that’s somewhat challenging for the rank and file. The fact that there are so many LPs, and the fact that these last two are so abstract,” the former VP said.</p>


<div><p><img alt="" loading="lazy" width="1024" height="683" decoding="async" data-nimg="1" sizes="100vw" srcset="https://fortune.com/img-assets/wp-content/uploads/2024/07/GettyImages-1358788181-e1722366559811.jpg?w=320&amp;q=75 320w, https://fortune.com/img-assets/wp-content/uploads/2024/07/GettyImages-1358788181-e1722366559811.jpg?w=384&amp;q=75 384w, https://fortune.com/img-assets/wp-content/uploads/2024/07/GettyImages-1358788181-e1722366559811.jpg?w=480&amp;q=75 480w, https://fortune.com/img-assets/wp-content/uploads/2024/07/GettyImages-1358788181-e1722366559811.jpg?w=576&amp;q=75 576w, https://fortune.com/img-assets/wp-content/uploads/2024/07/GettyImages-1358788181-e1722366559811.jpg?w=768&amp;q=75 768w, https://fortune.com/img-assets/wp-content/uploads/2024/07/GettyImages-1358788181-e1722366559811.jpg?w=1024&amp;q=75 1024w, https://fortune.com/img-assets/wp-content/uploads/2024/07/GettyImages-1358788181-e1722366559811.jpg?w=1280&amp;q=75 1280w, https://fortune.com/img-assets/wp-content/uploads/2024/07/GettyImages-1358788181-e1722366559811.jpg?w=1440&amp;q=75 1440w" src="https://fortune.com/img-assets/wp-content/uploads/2024/07/GettyImages-1358788181-e1722366559811.jpg?w=1440&amp;q=75"></p><figcaption>A recent effort to “regionalize” Amazon’s warehouses leveraged multiple Leadership Principles and led to more environmentally friendly trucking routes, according the VP of transportation.</figcaption><p>Dan Kitwood—Getty Images</p></div>



<p>The expansion of the number of principles has coincided with what some Amazon insiders describe as an erosion of trust in the principles, or at least in the way their colleagues understand and apply the principles, which are meant to influence everything from new-product ideation to employee evaluations.</p>



<p>Several longtime managers told <em>Fortune</em> that they felt the overall intent of the leadership principles has now shifted in many situations from guidelines on how to make the right decision, to more punitive usages that come across mainly intended to point out flaws. Such weaponization of leadership rules to criticize or squash dissent has always been a reality to a certain extent. “Earns trust” has been especially problematic in this regard, <a href="https://www.vox.com/recode/2021/2/26/22297554/amazon-race-black-diversity-inclusion" target="_blank" aria-label="Go to https://www.vox.com/recode/2021/2/26/22297554/amazon-race-black-diversity-inclusion" rel="noopener">according to some women of color</a>, and a <a href="https://medium.com/@ezcoach1/weaponizing-amazon-leadership-principles-5e1c8d13a71" target="_blank" aria-label="Go to https://medium.com/@ezcoach1/weaponizing-amazon-leadership-principles-5e1c8d13a71" rel="noopener">former Amazon VP has written about leadership principles being weaponized</a> by leaders when “they lack the power to give orders” and thus resort to “a crude attempt to apply the LP not as intended, but as a way to ensure an outcome.”</p>



<p>Even knowing that, many who spoke to <em>Fortune</em> believe the issue has worsened in recent years as Amazon has hired many executives from outside the company. (Most of those who spoke to <em>Fortune</em> requested anonymity, either because they are not permitted to talk to the press without permission as current Amazon employees, or because they feared retaliation for speaking candidly even as former employees.) One current Amazon senior manager said they’ve consistently observed bosses new to the company use the principles “as weapons to put those who aren’t favorites in their place,” while employing other principles to build up their favorites.&nbsp;</p>



<p>“Sometimes I’ll hear, ‘It’s amazing you had this ‘bias for action’…and other times when I believe I’ve had ‘bias for action,’&nbsp;they will say you weren’t data-driven (from the leadership principle ‘Dive deep’) enough.”</p>



<p>Another employee, a longtime AWS manager, said his superiors over the last few years frequently wielded “Disagree and commit”—a maxim intended to prevent groupthink during project planning while ensuring unity once a plan has been agreed upon—as a cudgel to quash any level of pushback.</p>



<p>“The joke by the time I left [last year] was if you didn’t like something, you could disagree and commit or disagree and quit,” the employee said.</p>



<p>Callahan, the Amazon spokesperson, said that the two new principles are as important as&nbsp;the others, and that they all play a role in evaluating new hires as well as the performance of current employees.</p>



<p>But there are other signs of change within the organization too. Several current managers who spoke to <em>Fortune</em> said that PowerPoint presentations have supplanted written narratives in some cases over the last two years—not in a dominant way, but in a noticeable one nonetheless. In the Prime Video division, for example, new executives who have come to the company after long careers outside of Amazon have been known to chafe at the heavy focus on narratives.</p>



<p>“There’s a lot of resistance from outsiders at the executive level,” one current manager said.</p>



<p>Another senior manager who worked at Amazon for 15 years said his first 13 years at the company were marked by an overwhelming amount of writing, but that in the last two years that has shifted to PowerPoint decks.</p>



<p>“We have this S team that is very religious about Amazon’s culture and gets it,” he said, “but they brought in an enormous amount of senior execs in the level or two below the S team from [other] companies and they brought in their culture and were never given a real, ‘This is how we do things at Amazon.’”</p>



<p>New executives who joined right before or immediately after COVID-19 shutdowns also struggled to grasp the supreme importance of business review documents like the weekly, monthly, and quarterly business reviews that exist elsewhere in the business world but are foundational inside Amazon.</p>



<p>“There’s huge value in the QBR when everyone sits together and puts everything on the table,” a former director-level executive who left Amazon last year said. “But when you’re doing it over video and have to limit the number of attendees because there’s too many people, and you’re really worried about anything in there that’s too sensitive to be leaked, then the QBR becomes an onerous burden.”</p>


<div><p><img alt="" loading="lazy" width="1024" height="683" decoding="async" data-nimg="1" sizes="100vw" srcset="https://fortune.com/img-assets/wp-content/uploads/2024/07/GettyImages-1243927438-e1722366285183.jpg?w=320&amp;q=75 320w, https://fortune.com/img-assets/wp-content/uploads/2024/07/GettyImages-1243927438-e1722366285183.jpg?w=384&amp;q=75 384w, https://fortune.com/img-assets/wp-content/uploads/2024/07/GettyImages-1243927438-e1722366285183.jpg?w=480&amp;q=75 480w, https://fortune.com/img-assets/wp-content/uploads/2024/07/GettyImages-1243927438-e1722366285183.jpg?w=576&amp;q=75 576w, https://fortune.com/img-assets/wp-content/uploads/2024/07/GettyImages-1243927438-e1722366285183.jpg?w=768&amp;q=75 768w, https://fortune.com/img-assets/wp-content/uploads/2024/07/GettyImages-1243927438-e1722366285183.jpg?w=1024&amp;q=75 1024w, https://fortune.com/img-assets/wp-content/uploads/2024/07/GettyImages-1243927438-e1722366285183.jpg?w=1280&amp;q=75 1280w, https://fortune.com/img-assets/wp-content/uploads/2024/07/GettyImages-1243927438-e1722366285183.jpg?w=1440&amp;q=75 1440w" src="https://fortune.com/img-assets/wp-content/uploads/2024/07/GettyImages-1243927438-e1722366285183.jpg?w=1440&amp;q=75"></p><figcaption>Some Amazon insiders point to disruption caused by the pandemic as one reason for the changing work culture.</figcaption><p>Genaro Molina—Los Angeles Times/Getty Images</p></div>



<h2>Bezos was a guiding light and real-time model</h2>



<p>Some ascribe the fraying of Amazon’s distinct work culture in part to the change in the CEO suite, even while acknowledging Bezos’s wandering focus in this area during the final years of his tenure.&nbsp;</p>



<p>“In the last two years, Andy should have been more attuned to this,” one current Amazon manager who has spent 15 years at the company said in an interview.</p>



<p>As chief executive, Bezos for many years served as the guiding light of the Amazon Way, providing real-time lessons in how to interpret the leadership principles in different situations and how to know which ones to employ when.&nbsp;</p>



<p>The modeling was crucial for a set of principles which, as everyone who spoke to <em>Fortune</em> agreed, are often in tension with one another. How can you both “dive deep” while having a “bias for action”? How can you truly employ “customer obsession” if you also have to make sure that “frugality” is core to what you do?</p>



<p>Bezos excelled at explaining the mental models or logic he used to arrive at a decision, says Carr. He was able to articulate the “why” as much as the “what.”</p>



<p>“Jeff’s brain just doesn’t work like other people’s brains,” adds Carr, who experienced 15 years of firsthand observations before leaving the company in 2015, and who stressed that he could only speak about Amazon’s culture as it was during his time at the company. “By learning from him, then you could start to take those paths, too, and teach people about why that’s the path we would take.”</p>


<div><p><img alt="" loading="lazy" width="1024" height="682" decoding="async" data-nimg="1" sizes="100vw" srcset="https://fortune.com/img-assets/wp-content/uploads/2024/07/GettyImages-1193818193-e1722363304195.jpg?w=320&amp;q=75 320w, https://fortune.com/img-assets/wp-content/uploads/2024/07/GettyImages-1193818193-e1722363304195.jpg?w=384&amp;q=75 384w, https://fortune.com/img-assets/wp-content/uploads/2024/07/GettyImages-1193818193-e1722363304195.jpg?w=480&amp;q=75 480w, https://fortune.com/img-assets/wp-content/uploads/2024/07/GettyImages-1193818193-e1722363304195.jpg?w=576&amp;q=75 576w, https://fortune.com/img-assets/wp-content/uploads/2024/07/GettyImages-1193818193-e1722363304195.jpg?w=768&amp;q=75 768w, https://fortune.com/img-assets/wp-content/uploads/2024/07/GettyImages-1193818193-e1722363304195.jpg?w=1024&amp;q=75 1024w, https://fortune.com/img-assets/wp-content/uploads/2024/07/GettyImages-1193818193-e1722363304195.jpg?w=1280&amp;q=75 1280w, https://fortune.com/img-assets/wp-content/uploads/2024/07/GettyImages-1193818193-e1722363304195.jpg?w=1440&amp;q=75 1440w" src="https://fortune.com/img-assets/wp-content/uploads/2024/07/GettyImages-1193818193-e1722363304195.jpg?w=1440&amp;q=75"></p><figcaption>Amazon founder Jeff Bezos was instrumental in instilling Amazon’s special work culture within the company</figcaption><p>SAJJAD HUSSAIN/AFP via Getty Images</p></div>



<p>That would be a tough act for anyone to follow, even <a href="https://fortune.com/2021/07/05/andy-jassy-amazon-ceo-jeff-bezos/" target="_self" aria-label="Go to https://fortune.com/2021/07/05/andy-jassy-amazon-ceo-jeff-bezos/">a 27-year veteran like Jassy who</a> once served as Bezos’s “shadow,” a role similar to a chief of staff. That’s why many who spoke to <em>Fortune</em> don’t point to the Bezos-Jassy transition as the main fault line. The disruption caused by the pandemic, as well as the doubling of Amazon’s headcount in two years, was more to blame, they say.</p>



<p>Those who joined right before the pandemic, or during the madness of 2020 and 2021, had little time to learn and adapt. Learning through meeting interactions over videoconferencing, for example, was much less conducive to osmosis than in-person interactions, either planned or serendipitous run-ins, several sources said.</p>



<p>“The leadership we brought in from 2019 to 2021 at the director level and above never really were educated on the Amazon culture,” a senior manager of 15 years said.</p>



<p>“They really struggled to understand the culture, but that wasn’t on them,” said another, an Amazon director-level executive who left the company recently after nearly a decade. “That’s on the changing of times and remote work.”&nbsp;</p>



<p>Amazon’s Callahan said that for the last five years, new senior Amazon leaders at the director and vice president levels attend a three-day training on the company’s culture taught by peers, and are paired with other Amazon colleagues to help them adapt to the company in other ways. However, Callahan declined to respond to questions about whether this practice was put on hold during the pandemic and, if so, for how long.&nbsp;</p>



<p>Many longtime standard-bearers of the company’s DNA have also walked away in recent years. Jeff Wilke, Bezos’s longtime right hand and the CEO of Amazon’s core consumer business, left in 2021; Dave Clark, a longtime head of Amazon’s warehouse and delivery operations who eventually replaced Wilke, departed Amazon a little more than a year later, reportedly in part due to Jassy’s hands-on managing style.</p>



<p>“Culture takes active architecture and work,” said another former Amazon vice president who worked at the company for more than 15 years. “There was nobody else left to teach [that],” the former exec added, in a nod to all the top leaders who have left the company.&nbsp;</p>



<p>With so much change at the top, executives like Jamil Ghani are trying to step up. The global leader of Amazon Prime joined the company eight years ago and says that providing on-the-fly lessons and guidance about the leadership principles and Amazon customs, like written narratives, is an important part of his job.&nbsp;</p>



<p>“I often tell the team that the point of your work is not the doc; that the point of your work is to create a doc that can inspire the right meeting, the right discussion,” Ghani told <em>Fortune</em>. “In the best meetings, you actually don’t even talk about the document. Everybody has the same context and information and then you have a discussion.”</p>



<p>In the event that a leadership principle has been misinterpreted or misapplied—including, as he acknowledges occasionally occurs, in situations when one is being used punitively—Ghani swoops in.&nbsp;</p>



<p>“I’ve done this many times when it’s happened or, offline, kind of follow up with a peer or somebody else and be like, ‘Hey, I don’t think that’s quite right. And here’s why,’” he added. “And people can have a very level-headed conversation about it.”</p>


<div><p><img alt="" loading="lazy" width="1024" height="683" decoding="async" data-nimg="1" sizes="100vw" srcset="https://fortune.com/img-assets/wp-content/uploads/2024/07/GettyImages-1797509756_81cda9-e1722365091257.jpg?w=320&amp;q=75 320w, https://fortune.com/img-assets/wp-content/uploads/2024/07/GettyImages-1797509756_81cda9-e1722365091257.jpg?w=384&amp;q=75 384w, https://fortune.com/img-assets/wp-content/uploads/2024/07/GettyImages-1797509756_81cda9-e1722365091257.jpg?w=480&amp;q=75 480w, https://fortune.com/img-assets/wp-content/uploads/2024/07/GettyImages-1797509756_81cda9-e1722365091257.jpg?w=576&amp;q=75 576w, https://fortune.com/img-assets/wp-content/uploads/2024/07/GettyImages-1797509756_81cda9-e1722365091257.jpg?w=768&amp;q=75 768w, https://fortune.com/img-assets/wp-content/uploads/2024/07/GettyImages-1797509756_81cda9-e1722365091257.jpg?w=1024&amp;q=75 1024w, https://fortune.com/img-assets/wp-content/uploads/2024/07/GettyImages-1797509756_81cda9-e1722365091257.jpg?w=1280&amp;q=75 1280w, https://fortune.com/img-assets/wp-content/uploads/2024/07/GettyImages-1797509756_81cda9-e1722365091257.jpg?w=1440&amp;q=75 1440w" src="https://fortune.com/img-assets/wp-content/uploads/2024/07/GettyImages-1797509756_81cda9-e1722365091257.jpg?w=1440&amp;q=75"></p><figcaption>The Amazon Way has led the ecommerce company to a $2 trillion valuation.</figcaption><p>DIMITAR DILKOFF/AFP via Getty Images</p></div>



<h2>A Bible with many religions</h2>



<p>One of the beauties of Amazon’s leadership principles has long been that they are detailed enough to serve as North Stars but broad enough for leaders to mold them as necessary depending on the type of decision or current environment.&nbsp;</p>



<p>“These are not processes that give you the answers,” says Carr, the former head of Prime Video. “They don’t tell you what to do. They don’t tell you whether to turn left or turn right, or to green-light this thing or not that thing. They’re management tools that give you the right frameworks to use to examine the problem.”</p>



<p>“Think of the LPs like the Bible,” a former member of Amazon’s exclusive senior executive team, known as the S-team, told <em>Fortune</em>. “Amazing how many religions are based off the same text.”</p>



<p>Three years into Jassy’s CEO tenure, the changes are becoming increasingly clear. The question now is whether this is evidence that the magic formula is getting diluted or a sign of the framework’s versatility.</p>



<p>Tomay, the VP of transportation, says staying nimble sometimes requires tweaking longtime practices. In the last year, she’s told her teams to reserve the six-page memo for only the most important meetings and encouraged them to craft a one-pager first. If there’s an alignment on the path forward after reviewing the one-pager in, say, a 30-minute meeting, that person or team will get the green light to go off and dive deep in creating a 6-pager.&nbsp;</p>



<p>“The company has shifted and grown,” she says, “so you have to keep adapting.”</p>



<p>With 1.5 million employees, Amazon is one of the largest employers in the world. And it has successfully expanded into lucrative markets like cloud computing, advertising, and entertainment. But with online retailers like China’s Shein and Temu gaining momentum, and AI threatening to reshape the entire business landscape, Amazon’s ability to adapt without losing what makes it special are sure to be tested in the years to come.</p>



<p>Business history can provide some unifying lessons. One key one: a strong culture and DNA, anchored in principles and practices that are talked about and lived out most working days, can help stabilize—even bolster—an organization during periods of significant change, whether CEO transitions or massive shifts in consumer or enterprise trends.&nbsp;</p>



<p>Meier, the Columbia Business School professor and author, points to <a href="https://fortune.com/company/toyota-tsusho/" target="_blank" aria-label="Go to https://fortune.com/company/toyota-tsusho/">Toyota</a> as one legacy corporation worth studying in this regard. “Toyota had those very clear principles on how to treat employees and make decisions, and I think it served them really well,” he says. “As a result, they sustained some of their success over transitions.”</p>



<p>The auto giant, whose stock hit an all-time high in March, is 87 years old, almost three times older than Amazon.&nbsp;</p>



<p>It’s currently on its 12th president.</p>



<p><em>Are you a current or former Amazon employee with thoughts on this topic or a tip to share? Contact Jason Del Rey at&nbsp;</em>jason.delrey@fortune.com<em>,&nbsp;</em>jasondelrey@protonmail.com<em>, or through secure messaging app Signal at&nbsp;</em>917-655-4267<em>. You can also message him&nbsp;</em><a href="https://www.linkedin.com/in/jasondelrey/" target="_blank" aria-label="Go to https://www.linkedin.com/in/jasondelrey/" rel="noreferrer noopener">on LinkedIn</a><em>&nbsp;or at&nbsp;</em><a href="https://twitter.com/DelRey" target="_blank" aria-label="Go to https://twitter.com/DelRey" rel="noreferrer noopener">@delrey</a><em>&nbsp;on&nbsp;</em><a href="https://fortune.com/company/twitter/" target="_self" aria-label="Go to https://fortune.com/company/twitter/">X</a><em>.</em></p></div><p><strong>Recommended Newsletter:</strong> The Fortune Next to Lead newsletter is a must-read for the next generation of C-suite leaders. Every Monday, the newsletter provides the strategies, resources, and expert insight needed to claim the most coveted positions in business. <a href="https://fortune.com/newsletters/next-to-lead?&amp;itm_source=fortune&amp;itm_medium=article_tout&amp;itm_campaign=next_to_lead_v2&amp;itm_content=elon_amazon_google" target="_self" aria-label="Go to https://fortune.com/newsletters/next-to-lead?&amp;itm_source=fortune&amp;itm_medium=article_tout&amp;itm_campaign=next_to_lead_v2&amp;itm_content=elon_amazon_google">Subscribe now</a>.</p></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Why the CrowdStrike bug hit banks hard (146 pts)]]></title>
            <link>https://www.bitsaboutmoney.com/archive/crowdstrike-bug-hit-banks-hard/</link>
            <guid>41119874</guid>
            <pubDate>Wed, 31 Jul 2024 15:07:24 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.bitsaboutmoney.com/archive/crowdstrike-bug-hit-banks-hard/">https://www.bitsaboutmoney.com/archive/crowdstrike-bug-hit-banks-hard/</a>, See on <a href="https://news.ycombinator.com/item?id=41119874">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>
        <p><em><strong>Programming note</strong>: I recently launched a weekly podcast, </em><a href="https://www.complexsystemspodcast.com/" rel="noreferrer"><em>Complex Systems</em></a><em> with Patrick McKenzie. About 50% of the conversations cover Bits about Money's beat. The remainder will be on other interesting intersections of technology, incentives, culture, and organizational design. The first three episodes covered </em><a href="https://www.complexsystemspodcast.com/episodes/teaching-trading-ricki-heicklen/" rel="noreferrer"><em>teaching trading</em></a><em>, Byrne Hobart on the </em><a href="https://www.complexsystemspodcast.com/episodes/writing-history-byrne-hobart/" rel="noreferrer"><em>epistemology of financial firms</em></a><em>, and </em><a href="https://www.complexsystemspodcast.com/episodes/reporting-tech-kelsey-piper/" rel="noreferrer"><em>the tech industry vs. tech reporting divide</em></a><em>. Subscribe to it anywhere you listen to podcasts. If you enjoy it, writing a review (in your podcast app or to me via email) helps quite a bit.</em></p><p>On July 19th, a firm most people have sensibly never heard of knocked out a large portion of the routine operations at many institutions worldwide. This hit the banking sector particularly hard. It has been <a href="https://www.wsj.com/tech/microsoft-reports-major-service-outage-affecting-users-worldwide-328a2f40">publicly reported</a> that several of the largest U.S. banks were affected by the outage. I understand one of them to have idled tellers and bankers nationwide for the duration. (You’ll forgive me for not naming them, as it would cost me some points.) The issue affected institutions across the size spectrum, including large regionals and community banks.</p><p>You might sensibly ask why that happened and, for that matter, how it was possible it would happen.</p><p>You might be curious about how to quickly reconstitute the financial system from less legible sources of credit when it is down. (Which: probably less important as a takeaway, but it is quite colorful.)</p><h2 id="brief-necessary-technical-context">Brief necessary technical context</h2><p>Something like 20% of the readership of this column has an engineering degree. To you folks, I apologize in advance for the following handwaviness. (You <em>may</em> be better served by the <a href="https://www.crowdstrike.com/falcon-content-update-remediation-and-guidance-hub/" rel="noreferrer">Preliminary Post Incident Review</a>.)</p><p>Many operating systems have a distinction between the “kernel” supplied by the operating system manufacturer and all other software running on the computer system. For historical reasons, that area where almost everything executes is called “userspace.”</p><p>In modern software design, programs running in userspace (i.e. almost all programs) are <em>relatively</em> limited in what they can do. Programs running in kernelspace, on the other hand, get direct access to the hardware under the operating system. Certain bugs in kernel programming are very, very bad news for everything running on the computer.</p><p><a href="https://www.crowdstrike.com/platform/endpoint-security/">CrowdStrike Falcon</a> is endpoint monitoring software. In brief, “endpoint monitoring” is a service sold to enterprises which have tens or hundreds of thousands of devices (“endpoints”). Those devices are<em> illegible to the organization that owns them</em> due to sheer scale; no single person nor group of people understand what is happening on them. This means there are <em>highly variable</em> levels of how-totally-effed those devices might be at exactly this moment in time. The pitch for endpoint monitoring is that it gives your teams the ability to make those systems legible again while also benefitting from economies of scale, with you getting a continuously updated feed of threats to scan for from your provider.</p><p>One way an endpoint might be effed is if it was physically stolen from your working-from-home employee earlier this week. Another way is if it has recently joined a botnet orchestrated from a geopolitical adversary of the United States after one of your junior programmers decided to install warez because the six figure annual salary was too little to fund their video game habit. (No, I am not reading <em>your</em> incident reports, I clarify for every security team in the industry.)</p><p>In theory, you perform ongoing monitoring of <em>all</em> of your computers. Then, your crack security team responds to alerts generated by your endpoint monitoring solution. This will sometimes merit further investigation and sometimes call for immediate remedial work. The conversations range from “Did you really just install cracked Starcraft 2 on your work PC? … Please don’t do that.” to “The novel virus reported this morning compromised 32 computers in the wealth management office. Containment was achieved by 2:05 PM ET, by which point we had null routed every packet coming out of that subnet then physically disconnected power to the router just to be sure. We have engaged incident response to see what if any data was exfiltrated in the 47 minutes between detection and null routing. At this point we have no indications of compromise outside that subnet but we cannot rule out a threat actor using the virus as a beachhead or advanced persistent threats being deployed.”</p><p>(Yes, that does sound like a Tom Clancy novel. No, that is not a parody.)</p><h2 id="falcon-punched">Falcon punched</h2><p>Falcon <a href="https://www.crowdstrike.com/blog/falcon-update-for-windows-hosts-technical-details/">shipped a configuration bug</a>. In brief, this means that rather than writing new software (which, in modern development practice, hopefully goes through fairly extensive testing and release procedures), CrowdStrike sent a bit of data to systems with Falcon installed. That data was intended to simply update the set of conditions that Falcon scanned for. However, due to an error at CrowdStrike, it <em>actually</em> caused existing already-reviewed Falcon software to fail catastrophically.</p><p>Since that failure happened in kernelspace at a particularly vulnerable time, this resulted in Windows systems experiencing total failure beginning at boot. The user-visible symptom is sometimes called the <a href="https://support.microsoft.com/en-us/windows/resolving-blue-screen-errors-in-windows-60b01860-58f2-be66-7516-5c45a66ae3c6" rel="noreferrer">Blue Screen of Death</a>.</p><p>Configuration bugs are a disturbingly large portion of engineering decisions which cause outages. (Citation: let’s go with “general knowledge as an informed industry observer.” As always, while I’ve previously worked at Stripe, neither Stripe nor its security team necessarily endorses things I say in my personal spaces.)</p><p>However, because <em>this</em> configuration bug hit very widely distributed software running in kernelspace almost universally across machines used by the workforce of lynchpin institutions throughout society (most relevantly to this column, banks, but also <a href="https://www.delta.com/us/en/advisories/other-alerts/global-it-outage" rel="noreferrer">airlines</a>, etc etc), it had a blast radius much, much larger than typical configuration bugs.</p><p>Have I mentioned that IT security really likes military metaphors? “Blast radius” means “given a fault or failure in system X, how far afield from X will we see negative user impact.” I struggle to recall a bug with a broader direct blast radius than the Falcon misconfiguration.</p><p>Once the misconfiguration was rolled out, fixing it was complicated by the tiny issue that a lot of the people needed to fix it couldn’t access their work systems because their machine Blue Screen of Death’ed.</p><p>Why? Well, we put the vulnerable software on essentially all machines in a particular institution. You want to protect <em>all</em> the devices. That is the point of endpoint monitoring. It is literally someone’s job to figure out where the devices that aren’t endpoint monitored exist and then to bring them into compliance.</p><p>Why do we care about optimizing for endpoint monitoring coverage? Partly it is for genuinely good security reasons. But a major part of it is that small-c compliance is necessary for large-C Compliance. Your regulator will effectively demand that you do it.</p><h2 id="why-did-falcon-run-in-kernelspace-rather-than-userspace">Why did Falcon run in kernelspace rather than userspace?</h2><p>Falcon runs in kernelspace versus userspace in part because the most straightforward way to poke its nose in other programs’ business is to simply ignore the security guarantees that operating systems give to programs running in userspace. Poking your nose in another program’s memory is generally considered somewhere between rude and forbidden-by-very-substantial-engineering-work. However, endpoint monitoring software considers that other software running on the device <em>may be there at the direction of the adversary</em>. It therefore considers that software’s comfort level with its intrusion to be a distant secondary consideration.</p><p>Another reason Falcon ran in kernelspace was, as Microsoft told <a href="https://www.wsj.com/tech/cybersecurity/microsoft-tech-outage-role-crowdstrike-50917b90">the WSJ</a>, Microsoft was forbidden by an understanding with the European Commission from firmly demoting other security software developers down to userspace. This was because Microsoft both a) wrote security software and b) necessarily always had the option of writing it in kernelspace, because Microsoft controls Windows. The European Commission has <a href="https://www.euronews.com/next/2024/07/23/european-commission-denies-responsibility-for-massive-microsoft-it-outage#:~:text=A%20European%20Commission%20spokesperson%20has,Commission%20either%20before%20or%20after" rel="noreferrer">pushed back</a> against this characterization and pointed out that This Sentence Uses Cookies To Enable Essential Essay Functionality.</p><h2 id="regulations-which-strongly-suggest-particular-software-purchases">Regulations which strongly suggest particular software purchases</h2><p>It would be an overstatement to say that the United States federal government commanded U.S. financial institutions to install CrowdStrike Falcon and thereby embed a landmine into the kernels of all their employees’ computers. Anyone saying that has no idea how banking regulation works.</p><p>Life is much more subtle than that.</p><p>The United States has many, many different banking regulators. Those regulators have some desires for their banks which rhyme heavily, and so they have banded into a club to share resources. This lets them spend their limited brainsweat budgets on things banking regulators have more individualized opinions on than simple, common banking regulatory infrastructure.</p><p>One such club is the <a href="https://www.ffiec.gov/">Federal Financial Institutions Examination Council</a>. They wrote the tgreatest crossover event of all time if your interests are a) mandatory supervisory evaluations of financial institutions and b) IT risk management: the <a href="https://www.ffiec.gov/press/pdf/ffiec_it_handbook_information_security_booklet.pdf">FFIEC Information Technology Examination Handbook's Information Security Booklet</a>.</p><p>The modal consumer of this document is probably not a Linux kernel programmer with a highly developed mental model of kernelspace versus userspace. That would be an <em>unreasonable</em> expectation for a banking supervisor. They work for a <em>banking regulator</em>, not a software company, doing <em>important supervisory work</em>, not merely implementation. Later this week they might be working on capital adequacy ratios, but for right now, they’re asking your IT team about endpoint monitoring.</p><p>The FFEITC ITEH ISB (the acronym just rolls off the tongue) is not super prescriptive about exactly what controls you, a financial institution, have to have. This is common in many regulatory environments. HIPAA, to use a contrasting example, is unusual in that it describes a control environment that you can reduce to a checklist with Required or Optional next to each of them. (HIPAA spells that second category “Addressable”, for reasons outside the scope of this essay, but which I’ll mention because I don’t want to offend other former HIPAA Compliance Officers.)</p><p>To facilitate your institution’s conversation with the examiner who drew the short straw, you will conduct a risk analysis. Well, more likely, you’ll pay a consulting firm to conduct a risk analysis. In the production function that is scaled consultancies, this means that a junior employee will open U.S. Financial Institution IT Security Risk Analysis v3-edited-final-final.docx and add important client-specific context like a) their name and b) their logo.</p><p>That document will heavily reference the ITEH, because it exists to quickly shut down the line of questioning from the examiner. If you desire a career in this field, you will phrase that as “guiding the conversation towards areas of maximum mutual interest in the cause of 'advanc[ing] the nation’s monetary, financial, and payment systems to build a stronger economy for all Americans.'” (The internal quotation is lifted from a <a href="https://archive.is/P7Zsz#selection-1405.0-1405.69" rel="noreferrer">job description</a> at the Federal Reserve.)</p><p>Your consultants are going to, when they conduct the mandatory risk analysis, give you a shopping list. Endpoint monitoring is one item on that shopping list. Why? Ask your consultant and they’ll bill you for the answer, but you can get my opinion for free and it is worth twice what you paid for it: II.C.12 Malware Mitigation.</p><p>Does the FFEITC have a hugely prescriptive view of what you should be doing for malware monitoring? Well, no:</p><blockquote>Management should implement defense-in-depth to protect, detect, and respond to malware. The institution can use many tools to block malware before it enters the environment and to detect it and respond if it is not blocked. Methods or systems that management should consider include the following: [12 bullet points which vary in specificity from whitelisting allowed programs to port monitoring to user education].</blockquote><p>But your consultants will tell you that you want a very responsive answer to II.C.12 in this report and that, since you probably do not have Google’s ability to fill floors of people doing industry-leading security research, you should just buy something which says Yeah We Do That.</p><p>CrowdStrike’s sales reps will happily tell you <a href="https://crowdstrike.com/solutions/financial-services/">Yeah We Do That</a>. This web page exists as a result of a deterministic process co-owned by the Marketing and Sales departments at a B2B software company to create industry-specific “sales enablement” collateral. As a matter of fact, if you want to give CrowdStrike your email address and job title, they will even send you a document which is not titled <a href="https://www.crowdstrike.com/resources/reports/crowdstrike-falcon-and-ffiec-compliance/">Exact Wording To Put In Your Risk Assessment Including Which Five Objectives And Seventeen Controls Purchasing This Product Will Solve For</a>.</p><p>CrowdStrike is not, strictly speaking, the only vendor that you could have installed on every computer you owned to make your regulators happy with you. But, due to vagaries of how enterprise software sales teams work, they sewed up an awful lot of government-adjacent industries. This was in part because they aggressively pursued writing the <a href="https://www.crowdstrike.com/why-crowdstrike/crowdstrike-compliance-certification/" rel="noreferrer">sort of documents</a> you need if the people who read your project plans have national security briefs.</p><p>I’m not mocking the Federal Financial Institutions Examining Council for cosplaying as having a national security brief. (Goodness knows that that happens a lot in cybersecurity... and government generally. New York <em>City</em> likes to pretend it has an <a href="https://www.nyc.gov/site/nypd/bureaus/investigative/intelligence.page" rel="noreferrer">intelligence service</a>, which is absolutely not a patronage program designed to have taxpayers fund indefinite foreign vacations with minimal actual job duties.)</p><p>But money <em>is</em> core societal infrastructure, like the power grid and transportation systems are. It would be <em>really bad</em> if hackers working for a foreign government could just <em>turn off money</em>. That would be more damaging than a conventional missile being fired at random into New York City, and we might be more constrained in responding.</p><p>And so, we ended up in a situation where we invited an <a href="https://www.crowdstrike.com/cybersecurity-101/advanced-persistent-threat-apt/">advanced persistent threat</a> into kernelspace.</p><p>It is perhaps important to point out that security professionals understand  security tools to themselves introduce security vulnerabilities. Partly, the worry is that a monoculture could have a particular weakness that could be exploited in a particular way. Partly, it is that security tools (and security personnel!) frequently have more privileges than is typical, and therefore they can be directly compromised by the adversary. This observation is fractal in systems engineering: at every level of abstraction, if your control plane gets compromised, you lose. (Control plane has a <a href="https://www.cloudflare.com/learning/network-layer/what-is-the-control-plane/">specific meaning</a> in networking but for this purpose just round it to “operating system (metaphorical) that controls your operating systems (literal).”)</p><p>CrowdStrike <a href="https://x.com/George_Kurtz/status/1814235001745027317" rel="noreferrer">maintains</a> that they do not understand it to be the case that a bad actor intentionally tried to bring down global financial infrastructure and airlines by using them as a weapon. No, CrowdStrike did that themselves, on accident, of their own volition. But this demonstrates the problem pretty clearly: if a junior employee tripping over a power cord at your company brings down computers worldwide, the bad guys have a variety of options for achieving directionally similar aims by attacking directionally similar power cords.</p><h2 id="when-money-stops-money-ing">When money stops money-ing</h2><p>I found out about the CrowdStrike vulnerability in the usual fashion: Twitter. But then my friendly local bank branch cited it (as quote the Microsoft systems issue endquote) when I was attempting to withdraw cash from the teller window.</p><p>My family purchased a duplex recently and is doing renovation prior to moving in. For complex social reasons, a thorough recitation of which would make me persona non grata across the political spectrum, engaging a sufficient number of contractors in Chicago will result in one being asked to make frequent, sizable payments in cash.</p><p>This created a minor emergency for me, because it was an other-than-minor emergency for some contractors I was working with.</p><p>Many contractors are small businesses. Many small businesses are very thinly capitalized. Many employees of small businesses are extremely dependent on receiving compensation exactly on payday and not after it. And so, while <em>many</em> people in Chicago were basically unaffected on that Friday because <em>their</em> money kept working (on mobile apps, via Venmo/Cash App, via credit cards, etc), cash-dependent people got an enormous wrench thrown into their plans.</p><p>I personally tried withdrawing cash at three financial institutions in different weight classes, as was told it was absolutely impossible (in size) at all of them, owing to the Falcon issue.</p><p>At one, I was told that I couldn’t use the tellers but could use the ATM. Unfortunately, like many customers, I was attempting to take out more cash from the ATM than I ever had before. Fortunately, their system that flags potentially fraudulent behavior will let a customer unflag themselves by responding to an instant communication from the bank. Unfortunately, the subdomain that communication directs them to runs on a server apparently protected by CrowdStrike Falcon.</p><p>It was not impossible at <em>all</em> financial institutions. I am aware of a few around Chicago which ran out of physical cash on hand at some branches, because all demand for cash on a Friday was serviced by them versus by “all of the financial institutions.” (As always happens during widespread disturbances in infrastructure, there quickly arises a shadow economy of information trading which redirects relatively sophisticated people to the places that are capable of servicing them. This happens through offline social networks since time immemorial and online social networks since we invented those. The first is probably more impactful but the second is more <em>legible</em>, so banking regulators pretend this class of issues sprang fully formed from the tech industry just in time to bring down banks last year.)</p><p>I have some knowledge of the history of comprehensive failures of financial infrastructure, and so I considered doing the traditional thing when convertibility of deposits is suspended by industry-wide issues: <a href="https://theculturetrip.com/europe/ireland/articles/how-pubs-in-ireland-literally-saved-the-countrys-economy">head to the bar</a>.</p><p>A hopefully unnecessary disclaimer: the following is historical fact despite rhyming with stereotype.</p><p>Back in 1970, there was a widespread and sustained (six months!) strike in the Irish banking sector. Workers were unable to cash paychecks because tellers refused to work. So, as an accommodation for customers, operators of pubs would cash the checks from the till, trusting that <em>eventually</em> checks drawn on the accounts of local employers would be good funds again.&nbsp;</p><p>Some publicans even cashed personal checks, backed by the swift and terrible justice of the credit reporting bureau We Control Whether You Can Ever Enjoy A Pint With Your Friends Again. This kept physical notes circulating in the economy.</p><p>As I told my contractors, to their confusion, I was unable to simply go down to the local bar to get them cash with the banks down. I don’t have sufficient credit with the operator of the local bar, as I don’t drink.</p><p>I told them, to their <em>even greater</em> confusion, that I had considered going down to the parish and buying all their cash on hand with a personal check. Churches, much like bars, have much of their weekly income come through electronic payments but still do a substantial amount of cash management through the workweek heading into the weekend. I’m much more a known quantity at church than I am at the friendly neighborhood watering hole. (Also, when attempting to workaround financial infrastructure bugs to get workers their wages, consider relying on counterparties with common knowledge of <a href="https://bible.usccb.org/bible/james/5">James 5:4</a>.)</p><p>I eventually resolved the issue in a more boring fashion: I texted someone I reasonably assumed to have cash and asked them to bring it over.</p><p>Financial infrastructure normally functions to abstract away personal ties and replace favor-swapping with legibly-priced broadly-offered services.</p><p>Thankfully, while this outage was surprisingly deep and broad, banks were <em>mostly</em> back to normal on the following Monday.</p>

        

        <div>
          <h2>Want more essays in your inbox?</h2>
          <p>I write about the intersection of tech and finance, approximately biweekly. It's free.</p>
                  </div>

      </div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[How great was the Great Oxidation Event? (162 pts)]]></title>
            <link>https://eos.org/science-updates/how-great-was-the-great-oxidation-event</link>
            <guid>41119080</guid>
            <pubDate>Wed, 31 Jul 2024 13:40:49 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://eos.org/science-updates/how-great-was-the-great-oxidation-event">https://eos.org/science-updates/how-great-was-the-great-oxidation-event</a>, See on <a href="https://news.ycombinator.com/item?id=41119080">Hacker News</a></p>
<div id="readability-page-1" class="page"><article id="post-225187">
	<div>

		
		
<p>If water is the key to life, then oxygen is the key to animal life. All animals breathe oxygen. Despite decades of research, however, scientists still don’t know when Earth’s atmosphere held enough free oxygen to support the planet’s early animals. Most geologists agree that oxygen first accumulated in the atmosphere <a href="https://eos.org/articles/early-life-learned-to-love-oxygen-long-before-it-was-cool" target="_blank" rel="noopener">around 2.4 billion years ago</a>. But they don’t agree on how much there was at that time or if it was enough for animals to thrive.</p>

<p>My colleagues and I recently found new clues to help answer these questions from an unlikely source: the acidic, metal-rich waters of Rio Tinto in southern Spain. The composition of these waters is considered extreme today, yet the sort of acid rock drainage that causes these conditions was widespread long ago, when newly available atmospheric oxygen first began interacting with sulfur minerals on land.</p>

<p>In our work, we showed that the chemistry occurring in these acidic waters can reconcile seemingly contradictory estimates of past levels of breathable oxygen determined from ancient sediments. Our data support growing evidence that enough oxygen was present for animals to have evolved nearly 2 billion years before they burst onto the scene.</p>

<h3>Earth’s First “Great Oxidation”</h3>

<figure><blockquote><p><em>When the single-celled ancestors of plants learned to combine carbon dioxide and water, these early innovators spat out a waste product formerly absent from their environment: free molecular oxygen.</em></p></blockquote></figure>

<p>A critical transition in our planet’s history occurred when the single-celled ancestors of plants learned to combine carbon dioxide and water—two chemicals found everywhere on Earth—to make their cells and produce energy. These early innovators spat out a waste product formerly absent from their environment: free molecular oxygen (O<sub>2</sub>). This highly reactive gas began to run rampant on Earth’s surface, leaving telltale signs of its activity in minerals and sediments.</p>

<p>It’s been more than 5 decades since scientists began deciphering these signs from the geologic record. Over that time, most scientists have come to agree that O<sub>2</sub> first reached appreciable concentrations in Earth’s atmosphere roughly 2.4 billion years ago, during the Great Oxidation Event (GOE) [<a href="https://doi.org/10.1016/B978-0-08-095975-7.01304-8" target="_blank" rel="noopener"><em>Farquhar et al.</em></a>, 2014]. Geologists who first described the GOE estimated that oxygen levels rose from near zero to about 10%–40% of what they are today (oxygen currently makes up 21% of the air we breathe). They also proposed that atmospheric O<sub>2</sub> remained at these levels until it reached modern levels more than 1.5 billion years later. This extended interval roughly coincided with the third and longest of the four geologic eons of Earth’s history, the Proterozoic.</p>

<p>Other researchers have since challenged those original estimates of Proterozoic O<sub>2</sub>. They suggest that oxygen concentrations rose to less than 0.1% of today’s level during the GOE and remained there, with only occasional short-term increases, through the ensuing eon. This substantial distinction—10% or more versus less than 0.1%—bears critically on the role of oxygen in animal evolution. Various forms of animal life require different minimum oxygen levels for survival, but even primitive animals like sponges require at least 0.25% of today’s atmospheric oxygen levels to metabolize [<a href="https://doi.org/10.1111/gbi.12382" target="_blank" rel="noopener"><em>Cole et al.</em></a>, 2020].</p>


<p>In the fossil record, paleontologists have found the oldest undisputed fossil eukaryotes, the single-celled precursors to animals, in marine sediments that accumulated about 1.7 billion years ago [<a href="https://doi.org/10.1126/sciadv.1603076" target="_blank" rel="noopener"><em>Knoll and Nowak</em></a>, 2017]. Despite the undisputed antiquity of eukaryotes, fossils of large multicellular life-forms representing putative animals don’t appear until more than a billion years later in the 0.57-billion-year-old Ediacaran biota, and undisputed animals don’t appear until the Cambrian period about 0.54 billion years ago.</p>

<figure><img decoding="async" width="780" height="384" src="https://i0.wp.com/eos.org/wp-content/uploads/2024/07/ediacaran-model-museum-display.jpg?resize=780%2C384&amp;ssl=1" alt="A view of a museum display reproducing frond-shaped life forms from the Ediacaran period." srcset="https://i0.wp.com/eos.org/wp-content/uploads/2024/07/ediacaran-model-museum-display.jpg?resize=1024%2C504&amp;ssl=1 1024w, https://i0.wp.com/eos.org/wp-content/uploads/2024/07/ediacaran-model-museum-display.jpg?resize=480%2C236&amp;ssl=1 480w, https://i0.wp.com/eos.org/wp-content/uploads/2024/07/ediacaran-model-museum-display.jpg?resize=768%2C378&amp;ssl=1 768w, https://i0.wp.com/eos.org/wp-content/uploads/2024/07/ediacaran-model-museum-display.jpg?resize=400%2C197&amp;ssl=1 400w, https://i0.wp.com/eos.org/wp-content/uploads/2024/07/ediacaran-model-museum-display.jpg?w=1200&amp;ssl=1 1200w, https://i0.wp.com/eos.org/wp-content/uploads/2024/07/ediacaran-model-museum-display-1024x504.jpg?w=370&amp;ssl=1 370w" sizes="(max-width: 780px) 100vw, 780px" data-recalc-dims="1"><figcaption>Some of the earliest putative animals found in the fossil record are represented in this reproduction of life from the Ediacaran period (635–541 million years ago) at the Smithsonian National Museum of Natural History in Washington, D.C. Credit: <a href="https://commons.wikimedia.org/wiki/File:Ediacaran_ecosystem_diorama_NMNH.jpg" target="_blank" rel="noopener">Ryan Schwark/Wikimedia Commons</a>, <a href="https://creativecommons.org/publicdomain/zero/1.0/legalcode.en" target="_blank" rel="noopener">CC0 1.0 Universal</a></figcaption></figure>

<p>Paleontologists have also described a pronounced expansion of fossil eukaryotes around 0.8 billion years ago, coinciding with when atmospheric O<sub>2</sub> <a href="https://eos.org/articles/longer-days-likely-boosted-earths-early-oxygen" target="_blank" rel="noopener">reached near modern levels</a>. Some researchers hypothesize that this rise in O<sub>2</sub> allowed these early eukaryotes to diversify and eventually evolve into multicellular animals. But this simple cause-effect scenario relies heavily on debated claims that oxygen remained too low to sustain animal life for roughly 1.6 billion years prior.</p>

<h3>Controversial Clues from Chromium</h3>

<figure><blockquote><p>One problem with attempts to resolve the history of Earth’s breathable oxygen is that the data researchers use to estimate past levels have provided conflicting results.</p></blockquote></figure>

<p>One problem with attempts to resolve the history of Earth’s breathable oxygen is that the data researchers use to estimate past levels have provided conflicting results. The atmosphere doesn’t directly fossilize, so geochemists rely on indirect traces, or proxies, to tease out the gases it contained at different times.</p>

<p>One proxy that researchers have widely employed to estimate atmospheric O<sub>2</sub> levels in the Proterozoic involves the heavy metal chromium [<a href="https://doi.org/10.1016/j.chemgeo.2020.119570" target="_blank" rel="noopener"><em>Wei et al.</em></a>, 2020]. Like many elements, not all chromium atoms are created equal. Although all have 24 protons in their nuclei, they can have different numbers of neutrons; in other words, different isotopes of chromium exist.</p>

<p>These different chromium isotopes react at different rates, leading to fractionation, or a change in their ratios, when they undergo chemical reactions in the environment. For example, chromium isotopes are fractionated when they react with manganese oxide minerals. This reaction preferentially releases heavier isotopes of chromium into natural waters that become more concentrated in sediments as a result.</p>

<figure><blockquote><p>Scientists want to resolve these disparate scenarios to understand oxygen’s role in animal evolution on Earth and potentially on other planets too.</p></blockquote></figure>

<p>Manganese oxide minerals such as birnessite and todorokite are very common in modern environments, for example, in soils and fluvial settings and on the seafloor. Researchers have estimated that reactions with these minerals fractionate chromium isotopes when free O<sub>2</sub> is present at concentrations above 0.1% of modern atmospheric levels [<em><a href="https://doi.org/10.1126/science.1258410" target="_blank" rel="noopener">Planavsky et al.</a></em>, 2014]. So some scientists have argued that chromium isotope fractionation in ancient rocks provides an “oxygen signal,” indicating when O<sub>2</sub> exceeded 0.1% of current levels. They have also claimed the corollary, that a lack of chromium isotope fractionation in rocks indicates that oxygen levels at the time the rocks formed were below that threshold.</p>

<p>Geochemists who first measured chromium isotopes in Proterozoic rocks found that large chromium isotope fractionations didn’t appear until 0.8 billion years ago, suggesting O<sub>2</sub> levels were too low to support animals until late in the Proterozoic [<em><a href="https://doi.org/10.1126/science.1258410" target="_blank" rel="noopener">Planavsky et al.</a></em>, 2014]. However, researchers recently found large fractionations in chromium isotopes preserved in ancient soils and marine rocks as far back as 1.9 billion years ago. These researchers contended that Proterozoic O<sub>2</sub> levels were at least intermittently high enough for animals to evolve well before their first occurrence in the fossil record [<a href="https://doi.org/10.1038/s41467-018-05263-9" target="_blank" rel="noopener"><em>Canfield et al.</em></a>, 2018]. Scientists want to resolve these disparate scenarios to understand oxygen’s role in animal evolution on Earth and potentially on other planets too.</p>

<h3>Going to the Extreme</h3>

<p>Spain’s Rio Tinto flows roughly 100 kilometers through the southwest of the country, stained blood red from its headwaters north of the town of Nerva in the Sierra Moreno to its mouth at the Ria of Huelva estuary, where it spills into the Atlantic Ocean. Mining activities over millennia in the Iberian Pyrite Belt, one of the largest hydrothermal ore deposits in the world, have exposed large piles of the iron sulfide mineral pyrite in the headwaters of the river to attack by atmospheric O<sub>2</sub> at Earth’s surface. When pyrite reacts with O<sub>2</sub>, it produces sulfuric acid, which is responsible for the river’s very low pH of 2 (similar to the pH of lemon juice or stomach acid). The reaction and resulting acidity also release iron, which gives rise to the river’s characteristic red tint, and other heavy metals—including chromium—from surrounding rocks.</p>

<p>Today, Rio Tinto’s waters are an extreme environment. But such conditions were once far more common. Scientists have proposed that as a result of the GOE, newly liberated O<sub>2</sub> in the atmosphere attacked extensive pyrite deposits on the land surface. Like today’s rock weathering in southern Spain, this chemical attack released heavy metals and sulfuric acid, producing widespread acid rock drainage [<em><a href="https://doi.org/10.1038/nature10511" target="_blank" rel="noopener">Konhauser et al.</a></em>, 2011]. In the aftermath of the GOE, it’s likely that rivers like Rio Tinto were the norm rather than the exception.</p>

<figure><blockquote><p>Are scientists today similarly misinterpreting the lack of chromium isotope fractionation in rocks older than 0.8 billion years?</p></blockquote></figure>

<p>Despite the preponderance of acid rock drainage after the GOE, geochemists had not looked into how chromium isotopes fractionate in acidic natural waters. After nearly a decade of teaching geochemistry at Rio Tinto, I knew manganese oxides rarely form in similarly acidic waters. And I figured if manganese oxides are necessary for imparting the chromium isotopic oxygen signal into rocks, then a lack of these minerals might prevent the formation of the signal, even in today’s high-O<sub>2</sub> atmosphere.</p>

<p>To investigate this hypothesis, I teamed up with my longtime friend and colleague Kate Scheiderich, who was then at the U.S. Geological Survey and had set up a lab to measure chromium isotopes. Returning to Rio Tinto, I collected samples of river water, rocks, and sediment from different locations along the bank of the river. Then I shipped them to Kate’s lab for her and another colleague to analyze.</p>

<p>We found that the acidic headwaters of the Rio Tinto were, indeed, leaching chromium from the surrounding rocks, then carrying it downstream to the Atlantic, where it accumulated in sediments around the estuary. However, the river was simply too acidic for manganese oxide minerals to form, despite flowing in an atmosphere with 21% oxygen. The analytical results in our study confirmed that without any manganese oxides to react with, chromium isotopes in the estuary sediments remained unfractionated and the chromium isotope values were identical to those in the source rocks they came from upstream (Figure 1).</p>
<div>
<figure data-wp-context="{&quot;uploadedSrc&quot;:&quot;https:\/\/eos.org\/wp-content\/uploads\/2024\/07\/chromium-isotope-ratios-water-sediments.png&quot;,&quot;figureClassNames&quot;:&quot;alignright size-large&quot;,&quot;figureStyles&quot;:null,&quot;imgClassNames&quot;:&quot;wp-image-225193&quot;,&quot;imgStyles&quot;:null,&quot;targetWidth&quot;:1200,&quot;targetHeight&quot;:702,&quot;scaleAttr&quot;:false,&quot;ariaLabel&quot;:&quot;Enlarge image: Bar plot showing the ranges in chromium isotope ratios measured from various sources.&quot;,&quot;alt&quot;:&quot;Bar plot showing the ranges in chromium isotope ratios measured from various sources.&quot;}" data-wp-interactive="core/image"><img decoding="async" width="780" height="456" data-wp-init="callbacks.setButtonStyles" data-wp-on-async--click="actions.showLightbox" data-wp-on-async--load="callbacks.setButtonStyles" data-wp-on-async-window--resize="callbacks.setButtonStyles" src="https://i0.wp.com/eos.org/wp-content/uploads/2024/07/chromium-isotope-ratios-water-sediments.png?resize=780%2C456&amp;ssl=1" alt="Bar plot showing the ranges in chromium isotope ratios measured from various sources." srcset="https://i0.wp.com/eos.org/wp-content/uploads/2024/07/chromium-isotope-ratios-water-sediments.png?resize=1024%2C599&amp;ssl=1 1024w, https://i0.wp.com/eos.org/wp-content/uploads/2024/07/chromium-isotope-ratios-water-sediments.png?resize=480%2C281&amp;ssl=1 480w, https://i0.wp.com/eos.org/wp-content/uploads/2024/07/chromium-isotope-ratios-water-sediments.png?resize=768%2C449&amp;ssl=1 768w, https://i0.wp.com/eos.org/wp-content/uploads/2024/07/chromium-isotope-ratios-water-sediments.png?resize=400%2C234&amp;ssl=1 400w, https://i0.wp.com/eos.org/wp-content/uploads/2024/07/chromium-isotope-ratios-water-sediments.png?w=1200&amp;ssl=1 1200w, https://i0.wp.com/eos.org/wp-content/uploads/2024/07/chromium-isotope-ratios-water-sediments-1024x599.png?w=370&amp;ssl=1 370w" sizes="(max-width: 780px) 100vw, 780px" data-recalc-dims="1"><figcaption>Fig. 1. Most sediments and waters today show a wide spread in chromium isotope ratios because the chromium they contain has been fractionated through reactions with manganese oxides. In contrast, because manganese oxides do not form in acidic waters, sediments from the Rio Tinto estuary show a very small spread in chromium isotope ratios that centers around a δ<sup>53</sup>Cr of 0‰, similar to the range measured in rocks supplying chromium to the river. The range of chromium isotope ratios measured in rocks older than 0.8 billion years is also relatively narrow and centers around a δ<sup>53</sup>Cr of 0‰, indicating that little chromium isotope fractionation is evident in these rocks. δ<sup>53</sup>Cr (in parts per thousand, ‰) represents depletion (negative values) or enrichment (positive values) of chromium-53 relative to chromium-52 in a sample compared to a standard reference material; δ<sup>53</sup>Cr = 1,000 × {[(<sup>53</sup>Cr/<sup>52</sup>Cr<sub>sample</sub>)/(<sup>53</sup>Cr/<sup>52</sup>Cr<sub>standard</sub>)] − 1}.</figcaption></figure></div>
<p>Millions of years from now, after these estuarine sediments have lithified into marine rocks, future geochemists—analyzing the rocks with the same techniques and understanding of the chromium isotope oxygen signal scientists have employed until now—might thus mistakenly infer that our current air was unbreathable. Are scientists today similarly misinterpreting the lack of chromium isotope fractionation in rocks older than 0.8 billion years?</p>

<p>We proposed that the prevalence of acid rock drainage on Proterozoic continents could have hindered development of the chromium isotope oxygen signal until 0.8 billion years ago (when, perhaps, most acid rock drainage had been consumed). This idea reconciles seemingly contradictory chromium isotope data and suggests O<sub>2</sub> in the atmosphere could have been elevated above 0.1% of modern levels far earlier in the Proterozoic [<em><a href="https://doi.org/10.1016/j.gca.2023.05.024" target="_blank" rel="noopener">Scheiderich et al.</a></em>, 2023].</p>

<h3>Why Did Animals Wait?</h3>

<p>As scientists increasingly focus on oxygen in the Proterozoic, more geochemical estimates [e.g., <a href="https://doi.org/10.1038/s41561-020-0558-5" target="_blank" rel="noopener"><em>Mänd et al.</em></a>, 2020] and atmospheric models [e.g., <a href="https://doi.org/10.1016/j.epsl.2021.116818" target="_blank" rel="noopener"><em>Gregory et al</em></a><em>.</em>, 2021] are suggesting that atmospheric O<sub>2</sub> concentrations were high enough for animals to have thrived more than 2 billion years before the early Cambrian. So why did it take so long for them to appear?</p>

<p>One possible explanation is that oxygen concentrations in the Proterozoic ocean fluctuated too much. Most scientists agree that shallow marine habitats, likely hotbeds for evolution, had oxygen levels high enough to support eukaryotes throughout the Proterozoic. But oxygen-free waters from the deep ocean routinely circulated upward, possibly diluting the oxygen oases at the surface. The instability of back-and-forth swings in oxygen in the surface ocean could have posed a big challenge to the evolution of early animals.</p>

<p>Some scientists suggest famine could also have held early animals back. The same protoplants that produced oxygen in the Proterozoic also formed the base of the food chain, so researchers have inferred that low oxygen and a low food supply went hand in hand. Animals could also have been starved for nutrients essential to life, such as nitrogen, which is found in nearly all biomolecules, including DNA, RNA, and proteins. Many geochemists have suggested nitrogen was scarce in the Proterozoic, when denitrifying microbes first started converting oxidized nitrogen (e.g., nitrate) into forms that animals can’t use (e.g., nitrogen gas).</p>

<p>Other researchers have proposed developmental hypotheses for the lag in animal evolution. They point out that it could have taken billions of years for the core set of genes found in all multicellular life to evolve in eukaryotes and that only after those genes emerged could animal life diversify greatly. Or perhaps, environmental and biological hurdles together slowed animal evolution.</p>

<p>For now, more answers to why animals only debuted at the end of the Proterozoic will have to wait. Whatever the explanations, recent research is seemingly making clear that it wasn’t for want of oxygen.</p>

<h3>References</h3>

<p>Canfield, D. E., et al. (2018), Highly fractionated chromium isotopes in Mesoproterozoic-aged shales and atmospheric oxygen, <em>Nat. Commun.</em>, <em>9</em>(1), 2871, <a href="https://doi.org/10.1038/s41467-018-05263-9" target="_blank" rel="noopener">https://doi.org/10.1038/s41467-018-05263-9</a>.</p>

<p>Cole, D. B., et al. (2020), On the co‐evolution of surface oxygen levels and animals, <em>Geobiology</em>, <em>18</em>(3), 260–281, <a href="https://doi.org/10.1111/gbi.12382" target="_blank" rel="noopener">https://doi.org/10.1111/gbi.12382</a>.</p>

<p>Farquhar, J., A. L. Zerkle, and A. Bekker (2014), Geologic and geochemical constraints on Earth’s early atmosphere, in <em>Treatise on Geochemistry</em>, 2nd ed., pp. 91–138, Elsevier, Amsterdam, <a href="https://doi.org/10.1016/B978-0-08-095975-7.01304-8" target="_blank" rel="noopener">https://doi.org/10.1016/B978-0-08-095975-7.01304-8</a>.</p>

<p>Gregory, B. S., M. W. Claire, and S. Rugheimer (2021), Photochemical modelling of atmospheric oxygen levels confirms two stable states, <em>Earth Planet. Sci. Lett.</em>, <em>561</em>, 116818, <a href="https://doi.org/10.1016/j.epsl.2021.116818" target="_blank" rel="noopener">https://doi.org/10.1016/j.epsl.2021.116818</a>.</p>

<p>Knoll, A. H., and M. A. Nowak (2017), The timetable of evolution, <em>Sci. Adv.</em>, <em>3</em>, e1603076, <a href="https://doi.org/10.1126/sciadv.1603076" target="_blank" rel="noopener">https://doi.org/10.1126/sciadv.1603076</a>.</p>

<p>Konhauser, K. O., et al. (2011), Aerobic bacterial pyrite oxidation and acid rock drainage during the Great Oxidation Event, <em>Nature</em>, <em>478</em>(7369), 369–373, <a href="https://doi.org/10.1038/nature10511" target="_blank" rel="noopener">https://doi.org/10.1038/nature10511</a>.</p>

<p>Mänd, K., et al. (2020), Palaeoproterozoic oxygenated oceans following the Lomagundi–Jatuli event, <em>Nat. Geosci</em>., <em>13</em>(4), 302–306, <a href="https://doi.org/10.1038/s41561-020-0558-5" target="_blank" rel="noopener">https://doi.org/10.1038/s41561-020-0558-5</a>.</p>

<p>Planavsky, N. J., et al. (2014), Low mid-Proterozoic atmospheric oxygen levels and the delayed rise of animals, <em>Science</em>, <em>346</em>(6209), 635–638, <a href="https://doi.org/10.1126/science.1258410" target="_blank" rel="noopener">https://doi.org/10.1126/science.1258410</a>.</p>

<p>Scheiderich, K., A. L. Zerkle, and D. Damby (2023), Chromium isotopes in an acidic fluvial system: Implications for modern and ancient Cr isotope records, <em>Geochim. Cosmochim. Acta</em>, <em>354</em>, 123–145, <a href="https://doi.org/10.1016/j.gca.2023.05.024" target="_blank" rel="noopener">https://doi.org/10.1016/j.gca.2023.05.024</a>.</p>

<p>Wei, W., et al. (2020), Biogeochemical cycle of chromium isotopes at the modern Earth’s surface and its applications as a paleo-environment proxy, <em>Chem. Geol.</em>, <em>541</em>, 119570, <a href="https://doi.org/10.1016/j.chemgeo.2020.119570" target="_blank" rel="noopener">https://doi.org/10.1016/j.chemgeo.2020.119570</a>.</p>

<h3>Author Information</h3>

<p>Aubrey Zerkle (<a href="mailto:aubrey.zerkle@bmsis.org" target="_blank" rel="noopener">aubrey.zerkle@bmsis.org</a>), Blue Marble Space Institute of Science, Seattle, Wash.</p>

<h5><strong>Citation:</strong> Zerkle, A. (2024), How great was the “Great Oxidation Event”?, <em>Eos, 105, </em><a href="https://doi.org/10.1029/2024EO240313" target="_blank" rel="noopener">https://doi.org/10.1029/2024EO240313</a>. Published on 30 July 2024.</h5>

<h6><strong>Text © 2024. The authors.&nbsp;<a href="https://creativecommons.org/licenses/by-nc-nd/3.0/us/" target="_blank" rel="noreferrer noopener">CC BY-NC-ND 3.0</a></strong><br><strong>Except where otherwise noted, images are subject to copyright. Any reuse without express permission from the copyright owner is prohibited.</strong></h6>

	</div><!-- .entry-content -->

	<!-- .entry-footer -->

	
</article></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Rustgo: Calling Rust from Go with near-zero overhead (2017) (177 pts)]]></title>
            <link>https://words.filippo.io/rustgo/</link>
            <guid>41116639</guid>
            <pubDate>Wed, 31 Jul 2024 05:43:33 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://words.filippo.io/rustgo/">https://words.filippo.io/rustgo/</a>, See on <a href="https://news.ycombinator.com/item?id=41116639">Hacker News</a></p>
<div id="readability-page-1" class="page"><section>
            <p>
[<a href="https://habrahabr.ru/post/337348/?ref=words.filippo.io">русский</a><!-- — 日本語]-->]
</p>
<p>Go has good support for calling into assembly, and a lot of the fast cryptographic code in the stdlib is carefully optimized assembly, bringing speedups of over 20 times.</p>
<p>However, writing assembly code is hard, reviewing it is possibly harder, and <a href="https://groups.google.com/forum/?ref=words.filippo.io#!topic/golang-announce/B5ww0iFt1_Q">cryptography is unforgiving</a>. Wouldn't it be nice if we could write these hot functions in a higher level language?</p>
<p>This post is the story of a slightly-less-than-sane experiment to call Rust code from Go fast enough to replace assembly. No need to know Rust, or compiler internals, but knowing what a linker is would help.</p>
<blockquote>
<p>Hello, readers from the future! In the seven years since writing this a couple things changed, but note that this was always a fun technical exploration, not a production guide.</p>
<p>If you're looking for <em>serious</em> ways to call Rust from Go, know that cgo these days <a href="https://shane.ai/posts/cgo-performance-in-go1.21/?ref=words.filippo.io">is faster</a> and <a href="https://github.com/golang/go/issues/56378?ref=words.filippo.io">is still getting faster</a>. There are also some experimental cgo-less alternatives, like <a href="https://github.com/ebitengine/purego?ref=words.filippo.io">purego</a> and <a href="https://wazero.io/?ref=words.filippo.io">wazero</a>. I toyed for years with the idea of using Wasm for cross-platform Go FFI withg better DX. I admit I even used a tecnique similar to this in the standard library, to <a href="https://go-review.googlesource.com/c/go/+/227037?ref=words.filippo.io">invoke the macOS X.509 verifier</a>.</p>
<p>As for me, I gave <a href="https://www.youtube.com/watch?v=eymMKjymgGA&amp;list=PLwiyx1dc3P2KWbISzXf3T63_fenq7sOoL&amp;index=10&amp;t=227&amp;ref=words.filippo.io">a talk</a> about this at a Go conference wearing a (freshly printed) Rust Evangelism Strike Force t-shirt. That kind of landed me a job on the Go team at Google, which I left to <a href="https://words.filippo.io/geomys/">become an independent Go maintainer</a>.</p>
<p>The fight against cryptographic assembly continues, but now with <a href="https://go.dev/wiki/AssemblyPolicy?ref=words.filippo.io">strict policies</a> and <a href="https://github.com/mmcloughlin/avo?ref=words.filippo.io">dedicated generators</a>. Just yesterday I [livestreamed a benchmarking session to replace some P-256 curve assembly] with formally verified Go code.</p>
</blockquote>
<h2 id="why-rust">Why Rust</h2>
<p>I'll be upfront: I don't know Rust, and don't feel compelled to do my day-to-day programming in it. However, I know Rust is a very tweakable and optimizable language, while still more readable than assembly. (After all, everything is more readable than assembly!)</p>
<p>Go strives to find defaults that are good for its core use cases, and only accepts features that are fast enough to be enabled by default, in a constant and successful fight against knobs. I love it for that. But for what we are doing today we need a language that won't flinch when asked to generate stack-only functions with manually hinted away safety checks.</p>
<p>So if there's a language that we might be able to constrain enough to behave like assembly, and to optimize enough to be as useful as assembly, it might be Rust.</p>
<p>Finally, Rust is safe, actively developed, and not least, there's already a good ecosystem of high-performance Rust cryptography code to tap into.</p>
<h2 id="why-not-cgo">Why not cgo</h2>
<p>Go has a <a href="https://en.wikipedia.org/wiki/Foreign_function_interface?ref=words.filippo.io">Foreign Function Interface</a>, <em>cgo</em>. <a href="https://golang.org/cmd/cgo/?ref=words.filippo.io">cgo</a> allows Go programs to call C functions in the most natural way possible—which is unfortunately not very natural at all. (I know <a href="https://speakerdeck.com/filosottile/from-cgo-back-to-go-gophercon-2016?ref=words.filippo.io">more than I'd like to about cgo</a>, and I can tell you <a href="https://dave.cheney.net/2016/01/18/cgo-is-not-go?ref=words.filippo.io">it's not fun</a>.)</p>
<p>By using the C <a href="https://en.wikipedia.org/wiki/Application_binary_interface?ref=words.filippo.io">ABI</a> as <a href="https://en.wikipedia.org/wiki/Lingua_franca?ref=words.filippo.io">lingua franca</a> of FFIs, we can call anything from anything: Rust can compile into a library exposing the C ABI, and cgo can use that. It's awkward, but it works.</p>
<p>We can even use reverse-cgo to build Go into a C library and call it from random languages, like <a href="https://blog.filippo.io/building-python-modules-with-go-1-5/?ref=words.filippo.io">I did with Python as a stunt</a>. (It was a stunt folks, stop taking me seriously.)</p>
<p>But cgo does a lot of things to enable that bit of Go naturalness it provides: it will setup a whole stack for C to live in, it makes defer calls to prepare for a panic in a Go callback... this <s>could be</s> will be a whole post of its own.</p>
<p>As a result, the performance cost of each cgo call is way too high for the use case we are thinking about—<em>small hot functions</em>.</p>
<h2 id="linking-it-together">Linking it together</h2>
<p>So here's the idea: if we have Rust code that is as constrained as assembly, we should be able to use it <strong>just like assembly</strong>, and call straight into it. Maybe with a thin layer of glue.</p>
<p>We don't have to work at the <a href="https://idea.popcount.org/2013-07-24-ir-is-better-than-assembly/?ref=words.filippo.io">IR</a> level: the Go compiler converts both code and high-level assembly into machine code before linking <a href="https://talks.golang.org/2016/asm.slide?ref=words.filippo.io">since Go 1.3</a>.</p>
<p>This is confirmed by the existence of "<a href="https://docs.google.com/document/d/1nr-TQHw_er6GOQRsF6T43GGhFDelrAP0NqSS_00RgZQ/preview?ref=words.filippo.io">external linking</a>", where the system linker is used to put together a Go program. It's how cgo works, too: it compiles C with the C compiler, Go with the Go compiler, and links it all together with <code>clang</code> or <code>gcc</code>. We can even pass flags to the linker with <code>CGO_LDFLAGS</code>.</p>
<p>Underneath all the safety features of cgo, we surely find a cross-language function call, after all.</p>
<p>It would be nice if we could figure out how to do this without patching the compiler, though. First, let's figure out how to link a Go program with a Rust archive.</p>
<p>I could not find a decent way to link against a foreign blob with <code>go build</code> (why should there be one?) except using <code>#cgo</code> directives. However, invoking cgo <a href="https://github.com/golang/go/issues/19448?ref=words.filippo.io">makes <code>.s</code> files go to the C compiler instead of the Go one</a>, and my friends, we <em>will</em> need Go assembly.</p>
<p>Thankfully <a href="https://golang.org/pkg/go/build/?ref=words.filippo.io">go/build</a> is nothing but a frontend! Go offers a set of low level tools to <a href="https://golang.org/cmd/compile/?ref=words.filippo.io">compile</a> and <a href="https://golang.org/cmd/link/?ref=words.filippo.io">link</a> programs, <code>go build</code> just collects files and invokes those tools. We can follow what it does by using the <code>-x</code> flag.</p>
<p>I built this small Makefile by following a <code>-x -ldflags "-v -linkmode=external '-extldflags=-v'"</code> invocation of a cgo build.</p>
<pre><code>rustgo: rustgo.a
        go tool link -o rustgo -extld clang -buildmode exe -buildid b01dca11ab1e -linkmode external -v rustgo.a

rustgo.a: hello.go hello.o
        go tool compile -o rustgo.a -p main -buildid b01dca11ab1e -pack hello.go
        go tool pack r rustgo.a hello.o

hello.o: hello.s
        go tool asm -I "$(shell go env GOROOT)/pkg/include" -D GOOS_darwin -D GOARCH_amd64 -o hello.o hello.s
</code></pre>
<p>This compiles a simple main package composed of a Go file (<code>hello.go</code>) and a Go assembly file (<code>hello.s</code>).</p>
<p>Now, if we want to link in a Rust object we first build it as a static library...</p>
<pre><code>libhello.a: hello.rs
        rustc -g -O --crate-type staticlib hello.rs
</code></pre>
<p>... and then just tell the external linker to link it together.</p>
<pre><code>rustgo: rustgo.a libhello.a
        go tool link -o rustgo -extld clang -buildmode exe -buildid b01dca11ab1e -linkmode external -v -extldflags='-lhello -L"$(CURDIR)"' rustgo.a
</code></pre>
<pre><code>$ make
go tool asm -I "/usr/local/Cellar/go/1.8.1_1/libexec/pkg/include" -D GOOS_darwin -D GOARCH_amd64 -o hello.o hello.s
go tool compile -o rustgo.a -p main -buildid b01dca11ab1e -pack hello.go
go tool pack r rustgo.a hello.o
rustc --crate-type staticlib hello.rs
note: link against the following native artifacts when linking against this static library

note: the order and any duplication can be significant on some platforms, and so may need to be preserved

note: library: System

note: library: c

note: library: m

go tool link -o rustgo -extld clang -buildmode exe -buildid b01dca11ab1e -linkmode external -v -extldflags="-lhello -L/Users/filippo/code/misc/rustgo" rustgo.a
HEADER = -H1 -T0x1001000 -D0x0 -R0x1000
searching for runtime.a in /usr/local/Cellar/go/1.8.1_1/libexec/pkg/darwin_amd64/runtime.a
searching for runtime/cgo.a in /usr/local/Cellar/go/1.8.1_1/libexec/pkg/darwin_amd64/runtime/cgo.a
 0.00 deadcode
 0.00 pclntab=166785 bytes, funcdata total 17079 bytes
 0.01 dodata
 0.01 symsize = 0
 0.01 symsize = 0
 0.01 reloc
 0.01 dwarf
 0.02 symsize = 0
 0.02 reloc
 0.02 asmb
 0.02 codeblk
 0.03 datblk
 0.03 sym
 0.03 headr
 0.06 host link: "clang" "-m64" "-gdwarf-2" "-Wl,-headerpad,1144" "-Wl,-no_pie" "-Wl,-pagezero_size,4000000" "-o" "rustgo" "-Qunused-arguments" "/var/folders/ry/v14gg02d0y9cb2w9809hf6ch0000gn/T/go-link-412633279/go.o" "/var/folders/ry/v14gg02d0y9cb2w9809hf6ch0000gn/T/go-link-412633279/000000.o" "-g" "-O2" "-lpthread" "-lhello" "-L/Users/filippo/code/misc/rustgo"
 0.34 cpu time
12641 symbols
5764 liveness data
</code></pre>
<h2 id="jumping-into-rust">Jumping into Rust</h2>
<p>Alright, so we linked it, but the symbols are not going to do anything just by sitting next to each other. We need to somehow call the Rust function from our Go code.</p>
<p>We know how to call a Go function from Go. In assembly the same call looks like <code>CALL hello(SB)</code>, where SB is a virtual register all global symbols are relative to.</p>
<p>If we want to call an assembly function from Go we make the compiler aware of its existence like a C header, by writing <code>func hello()</code> without a function body.</p>
<p>I tried all combinations of the above to call an external (Rust) function, but they all complained that they couldn't find either the symbol name, or the function body.</p>
<p>But cgo, which at the end of the day is just a giant code generator, somehow manages to eventually invoke that foreign function! How?</p>
<p>I stumbled upon <a href="https://github.com/golang/go/blob/c3c2e453c968c7b450c59a47dc9502bd44257164/src/cmd/cgo/out.go?ref=words.filippo.io#L1475-L1478">the answer</a> a couple days later.</p>
<pre><code>//go:cgo_import_static _cgoPREFIX_Cfunc__Cmalloc
//go:linkname __cgofn__cgoPREFIX_Cfunc__Cmalloc _cgoPREFIX_Cfunc__Cmalloc
var __cgofn__cgoPREFIX_Cfunc__Cmalloc byte
var _cgoPREFIX_Cfunc__Cmalloc = unsafe.Pointer(&amp;__cgofn__cgoPREFIX_Cfunc__Cmalloc)
</code></pre>
<p>That looks like an interesting pragma! <code>//go:linkname</code> just creates a symbol alias in the local scope (which <a href="https://sitano.github.io/2016/04/28/golang-private/?ref=words.filippo.io">can be used to call private functions</a>!), and I'm pretty sure the <code>byte</code> trick is only cleverness to have something to take the address of, but <code>//go:cgo_import_static</code>... this imports an external symbol!</p>
<blockquote>
<p><strong>2024 note</strong>: <code>cgo_import_static</code> is <a href="https://github.com/golang/go/issues/23672?ref=words.filippo.io">not usable anymore</a>, but there are <a href="https://github.com/FiloSottile/ed25519-dalek-rustgo/pull/1?ref=words.filippo.io">alternative strategies</a>.</p>
</blockquote>
<p>Armed with this new tool and the Makefile above, we have a chance to invoke this Rust function (<code>hello.rs</code>)</p>
<pre><code>#[no_mangle]
pub extern fn hello() {
    println!("Hello, Rust!");
}
</code></pre>
<p>(The no-mangle-pub-extern incantation is from <a href="https://doc.rust-lang.org/1.5.0/book/rust-inside-other-languages.html?ref=words.filippo.io">this tutorial</a>.)</p>
<p>from this Go program (<code>hello.go</code>)</p>
<pre><code>package main

//go:cgo_import_static hello

func trampoline()

func main() {
    println("Hello, Go!")
    trampoline()
}
</code></pre>
<p>with the help of this assembly snippet. (<code>hello.s</code>)</p>
<pre><code>TEXT ·trampoline(SB), 0, $2048
    JMP hello(SB)
    RET
</code></pre>
<p><code>CALL</code> was a bit too smart to work, but using a simple <code>JMP</code>...</p>
<pre><code>Hello, Go!
Hello, Rust!
panic: runtime error: invalid memory address or nil pointer dereference
[signal SIGSEGV: segmentation violation code=0x1 addr=0x0 pc=0x0]
</code></pre>
<p>💥</p>
<p>Well, it crashes when it tries to return. Also that <code>$2048</code> value is the whole stack size Rust is allowed (if it's even putting the stack in the right place), and don't ask me what happens if Rust tries to touch a heap... but hell, I'm surprised it works at all!</p>
<h2 id="calling-conventions">Calling conventions</h2>
<p>Now, to make it return cleanly, and take some arguments, we need to look more closely at the Go and Rust calling conventions. A <a href="https://en.wikipedia.org/wiki/Calling_convention?ref=words.filippo.io">calling convention</a> defines where arguments and return values sit across function calls.</p>
<p>The Go calling convention is described <a href="https://github.com/golang/go/files/447163/GoFunctionsInAssembly.pdf?ref=words.filippo.io">here</a> and <a href="https://golang.org/doc/asm?ref=words.filippo.io">here</a>. For Rust we'll look at the <a href="https://doc.rust-lang.org/beta/book/first-edition/ffi.html?ref=words.filippo.io#calling-rust-code-from-c">default for FFI</a>, which is the standard C calling convention.</p>
<p>To keep going we're going to need a debugger. (LLDB supports Go, but <a href="https://github.com/golang/go/issues/20568?ref=words.filippo.io">breakpoints are somehow broken on macOS</a>, so I had to play inside a privileged Docker container.)</p>

<p>
![Zelda dangerous to go alone](/content/images/2017/08/zelda-2.png)
</p>
<h3 id="the-go-calling-convention">The Go calling convention</h3>
<p><img src="https://words.filippo.io/content/images/2017/08/Go-stack-layout-3.png" alt="Go calling convention diagram" loading="lazy"></p>
<p>The Go calling convention is mostly <a href="https://github.com/golang/go/issues/16922?ref=words.filippo.io">undocumented</a>, but we'll need to understand it to proceed, so here is what we can learn from a disassembly (amd64 specific). Let's look at a very simple function.</p>
<pre><code>// func foo(x, y uint64) uint64
TEXT ·foo(SB), 0, $256-24
    MOVQ x+0(FP), DX
    MOVQ DX, ret+16(FP)
    RET
</code></pre>
<p><code>foo</code> has 256 (0x100) bytes of local frame, 16 bytes of arguments, 8 bytes of return value, and it returns its first argument.</p>
<pre><code>func main() {
    foo(0xf0f0f0f0f0f0f0f0, 0x5555555555555555)
</code></pre>
<pre><code>rustgo[0x49d785]:  movabsq $-0xf0f0f0f0f0f0f10, %rax
rustgo[0x49d78f]:  movq   %rax, (%rsp)
rustgo[0x49d793]:  movabsq $0x5555555555555555, %rax
rustgo[0x49d79d]:  movq   %rax, 0x8(%rsp)
rustgo[0x49d7a2]:  callq  0x49d8a0                  ; main.foo at hello.s:14
</code></pre>
<p>The caller, seen above, does very little: it places the arguments on the stack in reverse order, at the bottom of its own frame (<code>rsp</code> to <code>16(rsp)</code>, remember that the stack grows down) and executes <code>CALL</code>. The <code>CALL</code> will push the return pointer to the stack and jump. There's no caller cleanup, just a plain <code>RET</code>.</p>
<p>Notice that <code>rsp</code> is fixed, and we have <code>movq</code>s, not <code>push</code>s.</p>
<pre><code>rustgo`main.foo at hello.s:14:
rustgo[0x49d8a0]:  movq   %fs:-0x8, %rcx
rustgo[0x49d8a9]:  leaq   -0x88(%rsp), %rax
rustgo[0x49d8b1]:  cmpq   0x10(%rcx), %rax
rustgo[0x49d8b5]:  jbe    0x49d8ee                  ; main.foo + 78 at hello.s:14
                   [...]
rustgo[0x49d8ee]:  callq  0x495d10                  ; runtime.morestack_noctxt at asm_amd64.s:405
rustgo[0x49d8f3]:  jmp    0x49d8a0                  ; main.foo at hello.s:14
</code></pre>
<p>The first 4 and last 2 instructions of the function are checking if there is enough space for the stack, and if not calling <code>runtime.morestack</code>. They are probably skipped for <code>NOSPLIT</code> functions.</p>
<pre><code>rustgo[0x49d8b7]:  subq   $0x108, %rsp
                   [...]
rustgo[0x49d8e6]:  addq   $0x108, %rsp
rustgo[0x49d8ed]:  retq
</code></pre>
<p>Then there's the <code>rsp</code> management, which subtracts 0x108, making space for the entire 0x100 bytes of frame in one go, and the 8 bytes of frame pointer. So <code>rsp</code> points to the bottom (the end) of the function frame, and is callee managed. Before returning, <code>rsp</code> is returned to where it was (just past the return pointer).</p>
<pre><code>rustgo[0x49d8be]:  movq   %rbp, 0x100(%rsp)
rustgo[0x49d8c6]:  leaq   0x100(%rsp), %rbp
                   [...]
rustgo[0x49d8de]:  movq   0x100(%rsp), %rbp
</code></pre>
<p>Finally the <a href="https://stackoverflow.com/questions/579262/what-is-the-purpose-of-the-ebp-frame-pointer-register?ref=words.filippo.io">frame pointer</a>, which is effectively pushed to the stack just after the return pointer, and updated at <code>rbp</code>. So <code>rbp</code> is also callee saved, and should be updated to point at where the caller's <code>rbp</code> is stored to enable stack trace unrolling.</p>
<pre><code>rustgo[0x49d8ce]:  movq   0x110(%rsp), %rdx
rustgo[0x49d8d6]:  movq   %rdx, 0x120(%rsp)
</code></pre>
<p>Finally, from the body itself we learn that return values go just above the arguments.</p>
<h4 id="virtual-registers">Virtual registers</h4>
<p>The Go docs say that <code>SP</code> and <code>FP</code> are virtual registers, not just aliases of <code>rsp</code> and <code>rbp</code>.</p>
<p>Indeed, when accessing <code>SP</code> from Go assembly, the offsets are adjusted relative to the real <code>rsp</code> so that <code>SP</code> points to the top, not the bottom, of the frame. That's convenient because it means not having to change all offsets when changing the frame size, but it's just syntactic sugar. Naked access to the register (like <code>MOVQ SP, DX</code>) accesses <code>rsp</code> directly.</p>
<p>The <code>FP</code> virtual register is simply an adjusted offset over <code>rsp</code>, too. It points to the bottom of the caller frame, where arguments are, and there's no direct access.</p>
<p>Note: Go maintains <code>rbp</code> and frame pointers to help debugging, but then uses a fixed <code>rsp</code> and <code>omit-stack-pointer</code>-style <code>rsp</code> offsets for the virtual <code>FP</code>. You can learn more about frame pointers and not using them from <a href="https://www.imperialviolet.org/2017/01/18/cfi.html?ref=words.filippo.io">this Adam Langley blog post</a>.</p>
<h3 id="the-c-calling-convention">The C calling convention</h3>
<p>"<a href="https://en.wikipedia.org/wiki/X86_calling_conventions?ref=words.filippo.io#System_V_AMD64_ABI">sysv64</a>", the default C calling convention on x86-64, is quite different:</p>
<ul>
<li>The arguments are passed via registers: RDI, RSI, RDX, RCX, R8, and R9.</li>
<li>The return value goes to RAX.</li>
<li>Some registers are callee-saved: RBP, RBX, and R12–R15.
<ul>
<li>We care little about this, since in Go all registers are caller-saved.</li>
</ul>
</li>
<li>The stack must be aligned to 16-bytes.
<ul>
<li>(I think this is why <code>JMP</code> worked and <code>CALL</code> didn't, we failed to align the stack!)</li>
</ul>
</li>
</ul>
<p>Frame pointers work the same way (and are generated by <code>rustc</code> with <code>-g</code>).</p>
<h3 id="gluing-them-together">Gluing them together</h3>
<p>Building a simple trampoline between the two conventions won't be hard. We can also look at <a href="https://github.com/golang/go/blob/57bf6aca711a53aa7fea877b98896cd0445c6ad0/src/runtime/asm_amd64.s?ref=words.filippo.io#L585"><code>asmcgocall</code></a> for inspiration, since it does approximately the same job, but for cgo.</p>
<p>We need to remember that we want the Rust function to use the stack space of our assembly function, since Go ensured for us that it's present. To do that, we have to rollback <code>rsp</code> from the end of the stack.</p>
<pre><code>package main

//go:cgo_import_static increment
func trampoline(arg uint64) uint64

func main() {
    println(trampoline(41))
}
</code></pre>
<center>⬇</center>
<pre><code>TEXT ·trampoline(SB), 0, $2048-16
    MOVQ arg+0(FP), DI // Load the argument before messing with SP
    MOVQ SP, BX        // Save SP in a callee-saved registry
    ADDQ $2048, SP     // Rollback SP to reuse this function's frame
    ANDQ $~15, SP      // Align the stack to 16-bytes
    CALL increment(SB)
    MOVQ BX, SP        // Restore SP
    MOVQ AX, ret+8(FP) // Place the return value on the stack
    RET
</code></pre>
<center>⬇</center>
<pre><code>#[no_mangle]
pub extern fn increment(a: u64) -&gt; u64 {
    return a + 1;
}
</code></pre>
<h3 id="call-on-macos">CALL on macOS</h3>
<p><code>CALL</code> didn't quite work on macOS. For some reason, there the function call was replaced with an intermediate call to <code>_cgo_thread_start</code>, which is not that incredible considering we are using something called <code>cgo_import_static</code> and that <code>CALL</code> is virtual in Go assembly.</p>
<pre><code>callq  0x40a27cd                 ; x_cgo_thread_start + 29
</code></pre>
<p>We can bypass that "helper" by using the full <code>//go:linkname</code> incantation we found in the standard library to take a pointer to the function, and then calling the function pointer, like this.</p>
<pre><code>import _ "unsafe"

//go:cgo_import_static increment
//go:linkname increment increment
var increment uintptr
var _increment = &amp;increment
</code></pre>
<pre><code>    MOVQ ·_increment(SB), AX
    CALL AX
</code></pre>
<h2 id="is-it-fast">Is it fast?</h2>
<p>The point of this whole exercise is to be able to call Rust instead of assembly for cryptographic operations (and to have fun). So a rustgo call will have to be almost <a href="https://speakerdeck.com/gtank/i-wanna-go-fast?ref=words.filippo.io">as fast as an assembly call</a> to be useful.</p>
<p>Benchmark time!</p>
<p>We'll compare incrementing a uint64 inline, with a <code>//go:noinline</code> function, with the rustgo call above, and with a cgo call to the exact same Rust function.</p>
<p>Rust was compiled with <code>-g -O</code>, and the benchmarks were run on macOS on a 2.9GHz Intel Core i5.</p>
<pre><code>name                 time/op
CallOverhead/Inline  1.72ns ± 3%
CallOverhead/Go      4.60ns ± 2%
CallOverhead/rustgo  5.11ns ± 4%
CallOverhead/cgo     73.6ns ± 0%
</code></pre>
<p>rustgo is 11% slower than a Go function call, and almost 15 times faster than cgo!</p>
<p>The performance is even better when run on Linux without the function pointer workaround, with only a 2% overhead.</p>
<pre><code>name                 time/op
CallOverhead/Inline  1.67ns ± 2%
CallOverhead/Go      4.49ns ± 3%
CallOverhead/rustgo  4.58ns ± 3%
CallOverhead/cgo     69.4ns ± 0%
</code></pre>
<h2 id="a-real-example">A real example</h2>
<p>For a real-world demo, I picked the excellent curve25519-dalek library, and specifically the task of multiplying the curve basepoint by a scalar and returning its Edwards representation.</p>
<p>The Cargo benchmarks swing widely between executions because of <a href="https://wiki.debian.org/HowTo/CpuFrequencyScaling?ref=words.filippo.io">CPU frequency scaling</a>, but they suggest the operation will take 22.9µs ± 17%.</p>
<pre><code>test curve::bench::basepoint_mult    ... bench:      17,276 ns/iter (+/- 3,057)
test curve::bench::edwards_compress  ... bench:       5,633 ns/iter (+/- 858)
</code></pre>
<p>On the Go side, we'll expose a simple API.</p>
<pre><code>func ScalarBaseMult(dst, in *[32]byte)
</code></pre>
<p>On the Rust side, it's not different from building <a href="https://doc.rust-lang.org/beta/book/first-edition/ffi.html?ref=words.filippo.io#calling-rust-code-from-c">an interface for normal FFI</a>.</p>
<p>I'll be honest, it took me forever to figure out enough Rust to make this work.</p>
<pre><code>#![no_std]

extern crate curve25519_dalek;
use curve25519_dalek::scalar::Scalar;
use curve25519_dalek::constants;

#[no_mangle]
pub extern fn scalar_base_mult(dst: &amp;mut [u8; 32], k: &amp;[u8; 32]) {
    let res = &amp;constants::ED25519_BASEPOINT_TABLE * &amp;Scalar(*k);
    dst.clone_from(res.compress_edwards().as_bytes());
}
</code></pre>
<p>To build the <code>.a</code> we use <code>cargo build --release</code> with a <code>Cargo.toml</code> that defines the dependencies, enables frame pointers, and configures curve25519-dalek to use its most efficient math and no standard library.</p>
<pre><code>[package]
name = "ed25519-dalek-rustgo"
version = "0.0.0"

[lib]
crate-type = ["staticlib"]

[dependencies.curve25519-dalek]
version = "^0.9"
default-features = false
features = ["nightly"]

[profile.release]
debug = true
</code></pre>
<p>Finally, we need to adjust the trampoline to take two arguments and return no value.</p>
<pre><code>TEXT ·ScalarBaseMult(SB), 0, $16384-16
    MOVQ dst+0(FP), DI
    MOVQ in+8(FP), SI

    MOVQ SP, BX
    ADDQ $16384, SP
    ANDQ $~15, SP

    MOVQ ·_scalar_base_mult(SB), AX
    CALL AX

    MOVQ BX, SP
    RET
</code></pre>
<p>The result is a transparent Go call with performance that closely resembles the pure Rust benchmark, and is almost 6% faster than cgo!</p>
<pre><code>name            old time/op  new time/op  delta
RustScalarBaseMult  23.7µs ± 1%  22.3µs ± 4%  -5.88%  (p=0.003 n=5+7)
</code></pre>
<p>For comparison, similar functionality is provided by github.com/agl/ed25519/edwards25519, and that pure-Go library takes almost 3 times as long.</p>
<pre><code>h := &amp;edwards25519.ExtendedGroupElement{}
edwards25519.GeScalarMultBase(h, &amp;k)
h.ToBytes(&amp;dst)
</code></pre>
<pre><code>name            time/op
GoScalarBaseMult  66.1µs ± 2%
</code></pre>
<h2 id="packaging-up">Packaging up</h2>
<p>Now we know it actually works, that's exciting! But to be usable it will have to be an importable package, not forced into <code>package main</code> by a weird build process.</p>
<p>This is where <a href="https://github.com/golang/proposal/blob/master/design/2775-binary-only-packages.md?ref=words.filippo.io"><code>//go:binary-only-package</code></a> comes in! That annotation allows us to tell the compiler to ignore the source of the package, and to only use the pre-built <code>.a</code> library file in <code>$GOPATH/pkg</code>.</p>
<blockquote>
<p><strong>2024 note</strong>: <code>binary-only-package</code> is <a href="https://github.com/golang/go/issues/28152?ref=words.filippo.io">also gone</a>, but <a href="https://github.com/FiloSottile/ed25519-dalek-rustgo/pull/1?ref=words.filippo.io">using a .syso file</a> was probably the correct answer back then, too. Still, this was a fun detour into linking tooling.</p>
</blockquote>
<p>If we can manage to build a <code>.a</code> file that works with Go's native linker (<a href="https://godoc.org/cmd/link?ref=words.filippo.io">cmd/link</a>, referred to also as the <em>internal</em> linker), <strong>we can redistribute that and it will let our users import the package as if it was a native one</strong>, including cross-compiling (provided we included a <code>.a</code> for that platform)!</p>
<p>The Go side is easy, and pairs with the assembly and Rust we already have. We can even include docs for <code>go doc</code>'s benefit.</p>
<pre><code>//go:binary-only-package

// Package edwards25519 implements operations on an Edwards curve that is
// isomorphic to curve25519.
//
// Crypto operations are implemented by calling directly into the Rust
// library curve25519-dalek, without cgo.
//
// You should not actually be using this.
package edwards25519

import _ "unsafe"

//go:cgo_import_static scalar_base_mult
//go:linkname scalar_base_mult scalar_base_mult
var scalar_base_mult uintptr
var _scalar_base_mult = &amp;scalar_base_mult

// ScalarBaseMult multiplies the scalar in by the curve basepoint, and writes
// the compressed Edwards representation of the resulting point to dst.
func ScalarBaseMult(dst, in *[32]byte)
</code></pre>
<p>The Makefile will have to change quite a bit—since we aren't building a binary anymore we don't get to keep using <code>go tool link</code>.</p>
<p>A <code>.a</code> archive is just a pack of <code>.o</code> object files in <a href="https://en.wikipedia.org/wiki/Ar_(Unix)?ref=words.filippo.io">an ancient format with a symbol table</a>. If we could get the symbols from the Rust <code>libed25519_dalek_rustgo.a</code> library into the <code>edwards25519.a</code> archive that <code>go tool compile</code> made, we <em>should</em> be golden.</p>
<p><code>.a</code> archives are managed by the <code>ar</code> UNIX tool, or by its Go internal counterpart, <a href="https://godoc.org/cmd/pack?ref=words.filippo.io">cmd/pack</a> (as in <code>go tool pack</code>). The two formats are ever-so-subtly different, of course. We'll need to use the platform <code>ar</code> for <code>libed25519_dalek_rustgo.a</code> and the Go cmd/pack for <code>edwards25519.a</code>.</p>
<p>(For example, the platform <code>ar</code> on my macOS uses <a href="https://en.wikipedia.org/wiki/Ar_(Unix)?ref=words.filippo.io#BSD_variant">the BSD convention</a> of calling files <code>#1/LEN</code> and then embedding the filename of length LEN at the beginning of the file, to exceed the 16 bytes max file length. That was confusing.)</p>
<p>To bundle the two libraries I tried doing the simplest (read: hackish) thing: extract <code>libed25519_dalek_rustgo.a</code> into a temporary folder, and then pack the objects back into <code>edwards25519.a</code>.</p>
<pre><code>edwards25519/edwards25519.a: edwards25519/rustgo.go edwards25519/rustgo.o target/release/libed25519_dalek_rustgo.a
               go tool compile -N -l -o $@ -p main -pack edwards25519/rustgo.go
               go tool pack r $@ edwards25519/rustgo.o # from edwards25519/rustgo.s
               mkdir -p target/release/libed25519_dalek_rustgo &amp;&amp; cd target/release/libed25519_dalek_rustgo &amp;&amp; \
                       rm -f *.o &amp;&amp; ar xv "$(CURDIR)/target/release/libed25519_dalek_rustgo.a"
               go tool pack r $@ target/release/libed25519_dalek_rustgo/*.o

.PHONY: install
install: edwards25519/edwards25519.a
               mkdir -p "$(shell go env GOPATH)/pkg/darwin_amd64/$(IMPORT_PATH)/"
               cp edwards25519/edwards25519.a "$(shell go env GOPATH)/pkg/darwin_amd64/$(IMPORT_PATH)/"
</code></pre>
<p>Imagine my surprise when it worked!</p>
<p>With the <code>.a</code> in place it's just a matter of making a simple program using the package.</p>
<pre><code>package main

import (
	"bytes"
	"encoding/hex"
	"fmt"
	"testing"

	"github.com/FiloSottile/ed25519-dalek-rustgo/edwards25519"
)

func main() {
	input, _ := hex.DecodeString("39129b3f7bbd7e17a39679b940018a737fc3bf430fcbc827029e67360aab3707")
	expected, _ := hex.DecodeString("1cc4789ed5ea69f84ad460941ba0491ff532c1af1fa126733d6c7b62f7ebcbcf")

	var dst, k [32]byte
	copy(k[:], input)

	edwards25519.ScalarBaseMult(&amp;dst, &amp;k)
	if !bytes.Equal(dst[:], expected) {
		fmt.Println("rustgo produces a wrong result!")
	}

	fmt.Printf("BenchmarkScalarBaseMult\t%v\n", testing.Benchmark(func(b *testing.B) {
		for i := 0; i &lt; b.N; i++ {
			edwards25519.ScalarBaseMult(&amp;dst, &amp;k)
		}
	}))
}
</code></pre>
<p>And running <code>go build</code>!</p>
<pre><code>$ go build -ldflags '-linkmode external -extldflags -lresolv'
$ ./ed25519-dalek-rustgo
BenchmarkScalarBaseMult	  100000	     19914 ns/op
</code></pre>
<p>Well, it almost worked. We cheated. The binary would not compile unless we linked it to <code>libresolv</code>. To be fair, the Rust compiler tried to tell us. (But who listens to everything the Rust compiler tells you anyway?)</p>
<pre><code>note: link against the following native artifacts when linking against this static library

note: the order and any duplication can be significant on some platforms, and so may need to be preserved

note: library: System

note: library: resolv

note: library: c

note: library: m
</code></pre>
<p>Now, linking against system libraries would be a problem, because it will never happen with internal linking and cross-compilation...</p>
<p>But hold on a minute, <em>libresolv</em>?! Why does our <code>no_std</code>, "should be like assembly", stack only Rust library want to <em>resolve DNS names</em>?</p>
<h3 id="i-really-meant-nostd">I really meant <code>no_std</code></h3>
<p>The problem is that the library is not actually <code>no_std</code>. Look at all that stuff in there! We want nothing to do with allocators!</p>
<pre><code>$ ar t target/release/libed25519_dalek_rustgo.a
__.SYMDEF
ed25519_dalek_rustgo-742a1d9f1c101d86.0.o
ed25519_dalek_rustgo-742a1d9f1c101d86.crate.allocator.o
curve25519_dalek-03e3ca0f6d904d88.0.o
subtle-cd04b61500f6e56a.0.o
std-72653eb2361f5909.0.o
panic_unwind-d0b88496572d35a9.0.o
unwind-da13b913698118f9.0.o
arrayref-2be0c0ff08ae2c7d.0.o
digest-f1373d68da35ca45.0.o
generic_array-95ca86a62dc11ddc.0.o
nodrop-7df18ca19bb4fc21.0.o
odds-3bc0ea0bdf8209aa.0.o
typenum-a61a9024d805e64e.0.o
rand-e0d585156faee9eb.0.o
alloc_system-c942637a1f049140.0.o
libc-e038d130d15e5dae.0.o
alloc-0e789b712308019f.0.o
std_unicode-9735142be30abc63.0.o
compiler_builtins-8a5da980a34153c7.0.o
absvdi2.o
absvsi2.o
absvti2.o
[... snip ...]
truncsfhf2.o
ucmpdi2.o
ucmpti2.o
core-9077840c2cc91cbf.0.o
</code></pre>
<p>So how do we actually make it <code>no_std</code>? This turned out to be <a href="https://twitter.com/FiloSottile/status/894663496410988544?ref=words.filippo.io">an entire side-quest</a>, but I'll give you a recap.</p>
<ul>
<li>If any dependency is not <code>no_std</code>, your <code>no_std</code> flag is nullified. One of the <code>curve25519-dalek</code> dependencies had this problem, <code>cargo update</code> fixed that.</li>
<li>Actually making a <code>no_std</code> <em>staticlib</em> (that is, an library for external use, as opposed to for inclusion in a Rust program) is more like making a <code>no_std</code> <em>executable</em>, which is much harder as it must be self-contained.</li>
<li>The docs on how to make a <code>no_std</code> <em>executable</em> are sparse. I mostly used <a href="https://doc.rust-lang.org/1.5.0/book/no-stdlib.html?ref=words.filippo.io">an old version of the Rust book</a> and eventually found <a href="https://doc.rust-lang.org/beta/unstable-book/language-features/lang-items.html?ref=words.filippo.io#writing-an-executable-without-stdlib">this section in the lang_items chapter</a>. <a href="https://os.phil-opp.com/set-up-rust/?ref=words.filippo.io">This blog post</a> was useful.</li>
<li>For starters, you need to define "lang_items" functions to handle functionality that is normally in the stdlib, like <code>panic_fmt</code>.</li>
<li>Then you are without the Rust equivalents of <code>compiler-rt</code>, so you have to import the crate compiler_builtins. (<a href="https://github.com/rust-lang/rust/issues/43264?ref=words.filippo.io">rust-lang/rust#43264</a>)</li>
<li>Then there's a problem with <code>rust_begin_unwind</code> being unexported, which don't ask me why but is solved by marking <code>panic_fmt</code> as <code>no_mangle</code>, which the linter is not happy about. (<a href="https://github.com/rust-lang/rust/issues/38281?ref=words.filippo.io">rust-lang/rust#38281</a>)</li>
<li>Then you are without <code>memcpy</code>, but thankfully there's a native Rust reimplementation in the <a href="https://github.com/alexcrichton/rlibc?ref=words.filippo.io">rlibc</a> crate. Super useful <a href="https://github.com/rust-lang-nursery/compiler-builtins/issues/182?ref=words.filippo.io">learning</a> that <code>nm -u</code> will tell you what symbols are missing from an object.</li>
</ul>
<p>This all boils down to a bunch of arcane lines at the top of our <code>lib.rs</code>.</p>
<pre><code>#![no_std]
#![feature(lang_items, compiler_builtins_lib, core_intrinsics)]
use core::intrinsics;
#[allow(private_no_mangle_fns)] #[no_mangle] // rust-lang/rust#38281
#[lang = "panic_fmt"] fn panic_fmt() -&gt; ! { unsafe { intrinsics::abort() } }
#[lang = "eh_personality"] extern fn eh_personality() {}
extern crate compiler_builtins; // rust-lang/rust#43264
extern crate rlibc;
</code></pre>
<p>And with that, <code>go build</code> works (!!!) on macOS.</p>
<h3 id="linux">Linux</h3>
<p>On Linux nothing works.</p>
<p>External linking complains about <code>fmax</code> and other symbols missing, and it seems to be right.</p>
<pre><code>$ ld -r -o linux.o target/release/libed25519_dalek_rustgo/*.o
$ nm -u linux.o
                 U _GLOBAL_OFFSET_TABLE_
                 U abort
                 U fmax
                 U fmaxf
                 U fmaxl
                 U logb
                 U logbf
                 U logbl
                 U scalbn
                 U scalbnf
                 U scalbnl
</code></pre>
<p>A friend thankfully suggested making sure that I was using <code>--gc-sections</code> to strip dead code, which might reference things I don't actually need. And sure enough, this worked. (That's three layers of flag-passing right there.)</p>
<pre><code>$ go build -ldflags '-extld clang -linkmode external -extldflags -Wl,--gc-sections'
</code></pre>
<p>But umh, in the Makefile we aren't using a linker at all, so where do we put <code>--gc-sections</code>? The answer is to stop hacking <code>.a</code>s together and actually reading the <a href="https://linux.die.net/man/1/ld?ref=words.filippo.io">linker man page</a>.</p>
<p>We can build a <code>.o</code> containing a given symbol and all the symbols it references with <code>ld -r --gc-sections -u $SYMBOL</code>. <code>-r</code> makes the object reusable for a later link, and <code>-u</code> marks a symbol as needed, or everything would end up garbage collected. <code>$SYMBOL</code> is <code>scalar_base_mult</code> in our case.</p>
<p>Why wasn't this a problem on macOS? It would have been if we linked manually, but the macOS compiler apparently does dead symbol stripping by default.</p>
<pre><code>$ ld -e _scalar_base_mult target/release/libed25519_dalek_rustgo/*.o
Undefined symbols for architecture x86_64:
  "___assert_rtn", referenced from:
      _compilerrt_abort_impl in int_util.o
  "_copysign", referenced from:
      ___divdc3 in divdc3.o
      ___muldc3 in muldc3.o
  "_copysignf", referenced from:
      ___divsc3 in divsc3.o
      ___mulsc3 in mulsc3.o
  "_copysignl", referenced from:
      ___divxc3 in divxc3.o
      ___mulxc3 in mulxc3.o
  "_fmax", referenced from:
      ___divdc3 in divdc3.o
  "_fmaxf", referenced from:
      ___divsc3 in divsc3.o
  "_fmaxl", referenced from:
      ___divxc3 in divxc3.o
  "_logb", referenced from:
      ___divdc3 in divdc3.o
  "_logbf", referenced from:
      ___divsc3 in divsc3.o
  "_logbl", referenced from:
      ___divxc3 in divxc3.o
  "_scalbn", referenced from:
      ___divdc3 in divdc3.o
  "_scalbnf", referenced from:
      ___divsc3 in divsc3.o
  "_scalbnl", referenced from:
      ___divxc3 in divxc3.o
ld: symbol(s) not found for inferred architecture x86_64
$ ld -e _scalar_base_mult -dead_strip target/release/libed25519_dalek_rustgo/*.o
</code></pre>
<p>This is also the part where <a href="https://github.com/rust-lang/rust/issues/35052?ref=words.filippo.io">we learn painfully that the macOS platform prepends a <code>_</code> to all symbol names</a>, because reasons.</p>
<p>So here's the Makefile portion that will work with external linking out of the box.</p>
<pre><code>edwards25519/edwards25519.a: edwards25519/rustgo.go edwards25519/rustgo.o edwards25519/libed25519_dalek_rustgo.o
		go tool compile -N -l -o $@ -p main -pack edwards25519/rustgo.go
		go tool pack r $@ edwards25519/rustgo.o edwards25519/libed25519_dalek_rustgo.o

edwards25519/libed25519_dalek_rustgo.o: target/$(TARGET)/release/libed25519_dalek_rustgo.a
ifeq ($(shell go env GOOS),darwin)
		$(LD) -r -o $@ -arch x86_64 -u "_$(SYMBOL)" $^
else
		$(LD) -r -o $@ --gc-sections -u "$(SYMBOL)" $^
endif
</code></pre>
<p>The last missing piece is internal linking on Linux. In short, <a href="https://gist.github.com/FiloSottile/0d938bc4e8a7f3eab1fa4f672c334842?ref=words.filippo.io#file-internal-linking-issue-diff">it was not linking the Rust code</a>, even if the compilation seemed to succeed. The relocations were not happening and the <code>CALL</code> instructions in our Rust function left pointing at meaningless addresses.</p>
<p>At that point I felt like it had to be a silent linker bug, the final boss in implementing rustgo, and reached out to people much smarter than me. One of them was guiding me in <a href="https://gist.github.com/FiloSottile/0d938bc4e8a7f3eab1fa4f672c334842?ref=words.filippo.io#file-relocations-txt">debugging cmd/link</a> (which was fascinating!) when Ian Lance Taylor, the author of cgo, helpfully pointed out that <code>//cgo:cgo_import_static</code> is not enough for internal linking, and that I also wanted <code>//cgo:cgo_import_dynamic</code>.</p>
<pre><code>//go:cgo_import_static scalar_base_mult
//go:cgo_import_dynamic scalar_base_mult
</code></pre>
<p>I still have no idea <em>why</em> leaving it out would result in that issue, but adding it finally made our rustgo package compile both with external and internal linking, on Linux and macOS, out of the box.</p>
<h3 id="redistributable">Redistributable</h3>
<p>Now that we can build a <code>.a</code>, we can take the suggestion in the <a href="https://github.com/golang/proposal/blob/master/design/2775-binary-only-packages.md?ref=words.filippo.io"><code>//go:binary-only-package</code></a> spec, and build a tarball with <code>.a</code>s for <code>linux_amd64</code>/<code>darwin_amd64</code> and the package source, to untar into a GOPATH to install.</p>
<pre><code>$ tar tf ed25519-dalek-rustgo_go1.8.3.tar.gz
src/github.com/FiloSottile/ed25519-dalek-rustgo/
src/github.com/FiloSottile/ed25519-dalek-rustgo/.gitignore
src/github.com/FiloSottile/ed25519-dalek-rustgo/Cargo.lock
src/github.com/FiloSottile/ed25519-dalek-rustgo/Cargo.toml
src/github.com/FiloSottile/ed25519-dalek-rustgo/edwards25519/
src/github.com/FiloSottile/ed25519-dalek-rustgo/main.go
src/github.com/FiloSottile/ed25519-dalek-rustgo/Makefile
src/github.com/FiloSottile/ed25519-dalek-rustgo/release.sh
src/github.com/FiloSottile/ed25519-dalek-rustgo/src/
src/github.com/FiloSottile/ed25519-dalek-rustgo/target.go
src/github.com/FiloSottile/ed25519-dalek-rustgo/src/lib.rs
src/github.com/FiloSottile/ed25519-dalek-rustgo/edwards25519/rustgo.go
src/github.com/FiloSottile/ed25519-dalek-rustgo/edwards25519/rustgo.s
pkg/linux_amd64/github.com/FiloSottile/ed25519-dalek-rustgo/edwards25519.a
pkg/darwin_amd64/github.com/FiloSottile/ed25519-dalek-rustgo/edwards25519.a
</code></pre>
<p>Once installed like that, the package will be usable just like a native one, cross-compilation included (as long as we packaged a <code>.a</code> for the target)!</p>
<p>The only thing we have to worry about is that if we build Rust with <code>-Ctarget-cpu=native</code> it might not run on older CPUs. Thankfully benchmarks (<a href="https://twitter.com/isislovecruft/status/887787163072507904?ref=words.filippo.io">and the curve25519-dalek authors</a>) tell us that the only real difference is between post and pre-Haswell processors, so we only have to make a universal build and a Haswell one.</p>
<pre><code>$ benchstat bench-none.txt bench-haswell.txt
name                   old time/op  new time/op  delta
ScalarBaseMult/rustgo  22.0µs ± 3%  20.2µs ± 2%  -8.41%  (p=0.001 n=7+6)
$ benchstat bench-haswell.txt bench-native.txt
name                   old time/op  new time/op  delta
ScalarBaseMult/rustgo  20.2µs ± 2%  20.1µs ± 2%   ~     (p=0.945 n=6+7)
</code></pre>
<p>As the cherry on top, I made the Makefile obey GOOS/GOARCH, converting them as needed into Rust target triples, so if you have Rust set up for cross-compilation you can even cross-compile the <code>.a</code> itself.</p>
<p>Here's the result: <a href="https://github.com/FiloSottile/ed25519-dalek-rustgo?ref=words.filippo.io">github.com/FiloSottile/ed25519-dalek-rustgo/edwards25519</a>. It's even on <a href="https://godoc.org/github.com/FiloSottile/ed25519-dalek-rustgo/edwards25519?ref=words.filippo.io">godoc</a>.</p>
<h2 id="turning-it-into-a-real-thing">Turning it into a real thing</h2>
<p>Well, this was fun.</p>
<p>But to be clear, rustgo is not a real thing that you should use <s>in production</s>. For example, I suspect I should be saving <code>g</code> before the jump, the stack size is completely arbitrary, and shrinking the trampoline frame like that will probably confuse the hell out of debuggers. Also, a panic in Rust might get weird.</p>
<p>To make it a real thing I'd start by calling <code>morestack</code> manually from a <code>NOSPLIT</code> assembly function to ensure we have enough goroutine stack space (instead of rolling back <code>rsp</code>) with a size obtained maybe from static analysis of the Rust function (instead of, well, made up).</p>
<p>It could all be analyzed, generated and built by some "rustgo" tool, instead of hardcoded in Makefiles and assembly files. cgo itself is little more than a code-generation tool after all. It might make sense as a <code>go:generate</code> thing, but I know someone who wants to make it a cargo command. (Finally some Rust-vs-Go fighting!) Also, a Rust-side collection of FFI types like, say, <code>GoSlice</code> would be nice.</p>
<pre><code>#[repr(C)]
struct GoSlice {
    array: *mut u8,
    len: i32,
    cap: i32,
}
</code></pre>
<p>Or maybe a Go or Rust adult will come and tell us to stop before we get hurt.</p>
<p>In the meantime, you might want to <a href="https://twitter.com/FiloSottile?ref=words.filippo.io">follow me on Twitter</a>.</p>
<p>EDIT: It was pointed out to me that if we simply named the Rust object file <code>libed25519_dalek_rustgo.syso</code>, we could skip all the <code>go tool</code> invocations and simply use <code>go build</code> which automatically links <code>.syso</code> files found in the package. But what's the fun in that.</p>
<blockquote>
<p>Thanks (in no particular order) to David, Ian, Henry, Isis, Manish, Zaki, Anna, George, Kaylyn, Bill, David, Jess, Tony and Daniel for making this possible. Don't blame them for the mistakes and horrors, those are mine.</p>
</blockquote>
<center>
<blockquote data-cards="hidden" data-lang="en-gb">— Filippo Valsorda (@FiloSottile) <a href="https://twitter.com/FiloSottile/status/897434109613674496?ref=words.filippo.io">15 August 2017</a></blockquote>

</center>
<p>P.S. Before anyone tries to compare this to cgo (which has many more safety features) or pure Go, it's not meant to replace either. It's meant to replace manually written assembly with something much safer and more readable, with comparable performance. Or better yet, it was meant to be a fun experiment.</p>

        </section></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Meta introduces Segment Anything Model 2 (266 pts)]]></title>
            <link>https://ai.meta.com/sam2/</link>
            <guid>41116635</guid>
            <pubDate>Wed, 31 Jul 2024 05:42:37 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://ai.meta.com/sam2/">https://ai.meta.com/sam2/</a>, See on <a href="https://news.ycombinator.com/item?id=41116635">Hacker News</a></p>
<div id="readability-page-1" class="page"><div><hr><div><p>Key capabilities</p><p><h2>Segment any object, now in any video or image</h2></p><div><p>SAM 2 is the first unified model for segmenting objects across images and videos. You can use a click, box, or mask as the input to select an object on any image or frame of video.</p><a href="https://ai.meta.com/research/publications/sam-2-segment-anything-in-images-and-videos/" data-ms-clickable="true" data-ms="{&quot;creative&quot;:&quot;click_external-link&quot;,&quot;creative_detail&quot;:&quot;sam2_key_capabilities_read_the_research_paper_cta&quot;}" target="_self"><svg viewBox="0 0 38 38" fill="none" xmlns="http://www.w3.org/2000/svg"><path opacity="0.4" fill-rule="evenodd" clip-rule="evenodd" d="M19 37C9.05887 37 1 28.9411 1 19C1 9.05887 9.05887 1 19 1C28.9411 1 37 9.05887 37 19C37 28.9411 28.9411 37 19 37Z" stroke="CurrentColor"></path><path d="M21.9657 12L28.9287 18.963L21.9657 25.926L20.7348 24.7193L25.6203 19.8334L10.0001 19.8334V18.0926L25.5966 18.0926L20.7348 13.2309L21.9657 12Z" fill="CurrentColor"></path><path d="M21.9657 12L28.9287 18.963L21.9657 25.926L20.7348 24.7193L25.6203 19.8334L10.0001 19.8334V18.0926L25.5966 18.0926L20.7348 13.2309L21.9657 12Z" fill="CurrentColor"></path></svg>Read the research paper</a></div></div><div><div><h3>Select objects and make adjustments across video frames</h3><div><p>Using SAM 2, you can select one or multiple objects in a video frame. Use additional prompts to refine the model predictions.</p></div></div><div><h3>Robust segmentation, even in <br>unfamiliar videos</h3><div><p>SAM 2 is capable of strong zero-shot performance for objects, images and videos not previously seen during model training, enabling use in a wide range of real-world applications.</p></div></div><div><h3>Real-time interactivity and results</h3><p>SAM 2 is designed for efficient video processing with streaming inference to enable real-time, interactive applications.</p></div></div><div><div><p><h2>State-of-the-art performance for object segmentation</h2></p><p>SAM 2 outperforms the best models in the field for object segmentation in videos and images. </p></div><div><h3>Highlights</h3><div><ul><li>SAM 2 improves on SAM for segmentation in images</li><li>SAM 2 outperforms existing video object segmentation models, especially for tracking parts</li><li>SAM 2 requires less interaction time than existing interactive video segmentation methods</li></ul></div></div></div><div><h2>Try it yourself</h2><div><p>Track an object across any video interactively with as little as a single click on one frame, and create fun effects.</p><a href="https://sam2.metademolab.com/?utm_source=ai_meta_site&amp;utm_medium=web&amp;utm_content=AI_demos_page&amp;utm_campaign=July_moment" data-ms-clickable="true" data-ms="{&quot;creative&quot;:&quot;click_external-link&quot;,&quot;creative_detail&quot;:&quot;try_demos_SAM2_tryyourself_CTA&quot;}" target="_blank" rel="noreferrer noopener" data-lnfb-mode="ie" id="u_0_g_k9"><svg viewBox="0 0 38 38" fill="none" xmlns="http://www.w3.org/2000/svg"><path opacity="0.4" fill-rule="evenodd" clip-rule="evenodd" d="M19 37C9.05887 37 1 28.9411 1 19C1 9.05887 9.05887 1 19 1C28.9411 1 37 9.05887 37 19C37 28.9411 28.9411 37 19 37Z" stroke="CurrentColor"></path><path d="M16.3102 12.2707L26.1574 12.2707L26.1574 22.1179L24.4338 22.135L24.4335 15.2256L13.3883 26.2707L12.1574 25.0398L23.1858 14.0114L16.3102 14.0115L16.3102 12.2707Z" fill="CurrentColor"></path><path d="M16.3102 12.2707L26.1574 12.2707L26.1574 22.1179L24.4338 22.135L24.4335 15.2256L13.3883 26.2707L12.1574 25.0398L23.1858 14.0114L16.3102 14.0115L16.3102 12.2707Z" fill="CurrentColor"></path></svg>Try the demo</a></div></div><div><p>Our approach</p><h2>The next generation of Meta Segment Anything</h2><p>SAM 2 brings state-of-the-art video and image segmentation capabilities into a single model, while preserving a simple design and fast inference speed.</p></div><div><p>Model architecture</p><div><p>The SAM 2 model extends the promptable capability of SAM to the video domain by adding a per session memory module that captures information about the target object in the video. This allows SAM 2 to track the selected object throughout all video frames, even if the object temporarily disappears from view, as the model has context of the object from previous frames. SAM 2 also supports the ability to make corrections in the mask prediction based on additional prompts on any frame. </p><p>SAM 2’s streaming architecture—which processes video frames one at a time—is also a natural generalization of SAM to the video domain. When SAM 2 is applied to images, the memory module is empty and the model behaves like SAM.</p></div></div><hr><div><p>The Segment Anything Video Dataset</p><h2>A large and diverse video segmentation dataset</h2><p>SAM 2 was trained on a large and diverse set of videos and masklets (object masks over time), created by applying SAM 2 interactively in a model in the loop data-engine. The training data includes the SA-V dataset, which we are open sourcing.</p><p>Please email <a href="mailto:support@segment-anything.com" target="_blank" data-lnfb-mode="ie">support@segment-anything.com</a> with any issues or questions regarding the SA-V dataset.</p><a href="https://ai.meta.com/datasets/segment-anything-video/" data-ms-clickable="true" data-ms="{&quot;creative&quot;:&quot;click_external-link&quot;,&quot;creative_detail&quot;:&quot;sam2_the_segment_anything_video_dataset_explore_the_dataset_cta&quot;}" target="_self"><svg viewBox="0 0 38 38" fill="none" xmlns="http://www.w3.org/2000/svg"><path opacity="0.4" fill-rule="evenodd" clip-rule="evenodd" d="M19 37C9.05887 37 1 28.9411 1 19C1 9.05887 9.05887 1 19 1C28.9411 1 37 9.05887 37 19C37 28.9411 28.9411 37 19 37Z" stroke="CurrentColor"></path><path d="M21.9657 12L28.9287 18.963L21.9657 25.926L20.7348 24.7193L25.6203 19.8334L10.0001 19.8334V18.0926L25.5966 18.0926L20.7348 13.2309L21.9657 12Z" fill="CurrentColor"></path><path d="M21.9657 12L28.9287 18.963L21.9657 25.926L20.7348 24.7193L25.6203 19.8334L10.0001 19.8334V18.0926L25.5966 18.0926L20.7348 13.2309L21.9657 12Z" fill="CurrentColor"></path></svg>Explore the dataset</a><div><h3>Highlights</h3><div><ul><li>~600K+ masklets collected on ~51K videos</li><li>Geographically diverse, real world scenarios collected across 47 countries</li><li>Annotations include whole objects, parts, and challenging occlusions</li></ul></div></div></div><div><div><p>Access our research</p><h2>Open innovation</h2><p>To enable the research community to build upon this work, we’re publicly releasing a pretrained Segment Anything 2 model, along with the SA-V dataset, a demo, and code.</p><a href="https://github.com/facebookresearch/segment-anything-2" data-ms-clickable="true" data-ms="{&quot;creative&quot;:&quot;click_external-link&quot;,&quot;creative_detail&quot;:&quot;download_model_SAM2&quot;}" target="_blank" rel="noreferrer noopener" data-lnfb-mode="ie" id="u_0_q_Ll"><svg viewBox="0 0 38 38" fill="none" xmlns="http://www.w3.org/2000/svg"><path opacity="0.4" fill-rule="evenodd" clip-rule="evenodd" d="M19 37C9.05887 37 1 28.9411 1 19C1 9.05887 9.05887 1 19 1C28.9411 1 37 9.05887 37 19C37 28.9411 28.9411 37 19 37Z" stroke="CurrentColor"></path><path d="M16.3102 12.2707L26.1574 12.2707L26.1574 22.1179L24.4338 22.135L24.4335 15.2256L13.3883 26.2707L12.1574 25.0398L23.1858 14.0114L16.3102 14.0115L16.3102 12.2707Z" fill="CurrentColor"></path><path d="M16.3102 12.2707L26.1574 12.2707L26.1574 22.1179L24.4338 22.135L24.4335 15.2256L13.3883 26.2707L12.1574 25.0398L23.1858 14.0114L16.3102 14.0115L16.3102 12.2707Z" fill="CurrentColor"></path></svg>Download the model</a><div><h3>Highlights</h3><div><ul><li>We are providing transparency into the SAM 2 training data </li><li>We prioritized geographic diversity in the SA-V dataset for real-world representation</li><li>We conducted a fairness evaluation of SAM 2</li></ul></div></div></div><div><p><img src="https://static.xx.fbcdn.net/rsrc.php/v3/y4/r/-PAXP-deijE.gif" alt="Person coding on desktop computer"></p></div></div><hr><div><h2>Potential model applications</h2><div><p>SAM 2 can be used by itself, or as part of a larger system with other models in future work to enable novel experiences. </p><a href="https://github.com/facebookresearch/segment-anything-2" data-ms-clickable="true" data-ms="{&quot;creative&quot;:&quot;click_external-link&quot;,&quot;creative_detail&quot;:&quot;download_model_SAM2&quot;}" target="_blank" rel="noreferrer noopener" data-lnfb-mode="ie" id="u_0_r_ft"><svg viewBox="0 0 38 38" fill="none" xmlns="http://www.w3.org/2000/svg"><path opacity="0.4" fill-rule="evenodd" clip-rule="evenodd" d="M19 37C9.05887 37 1 28.9411 1 19C1 9.05887 9.05887 1 19 1C28.9411 1 37 9.05887 37 19C37 28.9411 28.9411 37 19 37Z" stroke="CurrentColor"></path><path d="M16.3102 12.2707L26.1574 12.2707L26.1574 22.1179L24.4338 22.135L24.4335 15.2256L13.3883 26.2707L12.1574 25.0398L23.1858 14.0114L16.3102 14.0115L16.3102 12.2707Z" fill="CurrentColor"></path><path d="M16.3102 12.2707L26.1574 12.2707L26.1574 22.1179L24.4338 22.135L24.4335 15.2256L13.3883 26.2707L12.1574 25.0398L23.1858 14.0114L16.3102 14.0115L16.3102 12.2707Z" fill="CurrentColor"></path></svg>Download the model</a></div><div><div><h3>Extensible outputs</h3><div><p>The video object segmentation outputs from SAM 2 could be used as input to other AI systems such as modern video generation models to enable precise editing capabilities.</p></div></div><div><h3>Extensible inputs </h3><p>SAM 2 can be extended to take other types of input prompts such as in the future enabling creative ways of interacting with objects in real-time or live video.</p></div></div></div><hr><div><p><h2>Explore additional resources</h2></p></div><div><div><p><h5>Read the AI at Meta blog</h5></p></div><div><p><h5>Read the research paper</h5></p></div><div><p><h5>Download the dataset</h5></p></div><div><p><h5>Explore the dataset</h5></p></div><div><p><h5>Download the model</h5></p></div><div><p><h5>Try the demo</h5></p></div></div></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[macOS in Docker Container (524 pts)]]></title>
            <link>https://github.com/sickcodes/Docker-OSX</link>
            <guid>41116473</guid>
            <pubDate>Wed, 31 Jul 2024 04:51:12 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://github.com/sickcodes/Docker-OSX">https://github.com/sickcodes/Docker-OSX</a>, See on <a href="https://news.ycombinator.com/item?id=41116473">Hacker News</a></p>
<div id="readability-page-1" class="page"><div data-hpc="true"><article itemprop="text"><p dir="auto"><h2 tabindex="-1" dir="auto">Docker-OSX · <a href="https://twitter.com/sickcodes" rel="nofollow">Follow @sickcodes on Twitter</a></h2><a id="user-content-docker-osx--follow-sickcodes-on-twitter" aria-label="Permalink: Docker-OSX · Follow @sickcodes on Twitter" href="#docker-osx--follow-sickcodes-on-twitter"></a></p>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="https://github.com/sickcodes/Docker-OSX/blob/master/running-mac-inside-docker-qemu.png?raw=true"><img src="https://github.com/sickcodes/Docker-OSX/raw/master/running-mac-inside-docker-qemu.png?raw=true" alt="Running Mac OS X in a Docker container" title="OSX KVM DOCKER"></a></p>
<p dir="auto">Run Mac OS X in Docker with near-native performance! X11 Forwarding! iMessage security research! iPhone USB working! macOS in a Docker container!</p>
<p dir="auto">Conduct Security Research on macOS using both Linux &amp; Windows!</p>
<p dir="auto"><h2 tabindex="-1" dir="auto">Docker-OSX now has a Discord server &amp; Telegram!</h2><a id="user-content-docker-osx-now-has-a-discord-server--telegram" aria-label="Permalink: Docker-OSX now has a Discord server &amp; Telegram!" href="#docker-osx-now-has-a-discord-server--telegram"></a></p>
<p dir="auto">The Discord is active on #docker-osx and anyone is welcome to come and ask questions, ideas, etc.</p>
<p dir="auto">
    <a href="https://hub.docker.com/r/sickcodes/docker-osx" rel="nofollow"><img src="https://camo.githubusercontent.com/bf743a6fa27847ac2915bc2ffa2653921caed101282db02299576d635582d7f6/68747470733a2f2f646f636b6572692e636f2f696d6167652f7369636b636f6465732f646f636b65722d6f7378" data-canonical-src="https://dockeri.co/image/sickcodes/docker-osx"></a><a href="https://discord.gg/sickchat" rel="nofollow"></a><a href="https://discord.gg/sickchat" rel="nofollow"><img src="https://raw.githubusercontent.com/sickcodes/Docker-OSX/master/discord-logo.svg"></a>
</p>
<p dir="auto"><h3 tabindex="-1" dir="auto">Click to join the Discord server <a href="https://discord.gg/sickchat" rel="nofollow">https://discord.gg/sickchat</a></h3><a id="user-content-click-to-join-the-discord-server-httpsdiscordggsickchat" aria-label="Permalink: Click to join the Discord server https://discord.gg/sickchat" href="#click-to-join-the-discord-server-httpsdiscordggsickchat"></a></p>
<p dir="auto"><h3 tabindex="-1" dir="auto">Click to join the Telegram server <a href="https://t.me/sickcodeschat" rel="nofollow">https://t.me/sickcodeschat</a></h3><a id="user-content-click-to-join-the-telegram-server-httpstmesickcodeschat" aria-label="Permalink: Click to join the Telegram server https://t.me/sickcodeschat" href="#click-to-join-the-telegram-server-httpstmesickcodeschat"></a></p>
<p dir="auto">Or reach out via Linkedin if it's private: <a href="https://www.linkedin.com/in/sickcodes" rel="nofollow">https://www.linkedin.com/in/sickcodes</a></p>
<p dir="auto">Or via <a href="https://sick.codes/contact/" rel="nofollow">https://sick.codes/contact/</a></p>
<p dir="auto"><h2 tabindex="-1" dir="auto">Author</h2><a id="user-content-author" aria-label="Permalink: Author" href="#author"></a></p>
<p dir="auto">This project is maintained by <a href="https://sick.codes/" rel="nofollow">Sick.Codes</a>. <a href="https://twitter.com/sickcodes" rel="nofollow">(Twitter)</a></p>
<p dir="auto">Additional credits can be found here: <a href="https://github.com/sickcodes/Docker-OSX/blob/master/CREDITS.md">https://github.com/sickcodes/Docker-OSX/blob/master/CREDITS.md</a></p>
<p dir="auto">Additionally, comprehensive list of all contributors can be found here: <a href="https://github.com/sickcodes/Docker-OSX/graphs/contributors">https://github.com/sickcodes/Docker-OSX/graphs/contributors</a></p>
<p dir="auto">Big thanks to <a href="https://twitter.com/kholia" rel="nofollow">@kholia</a> for maintaining the upstream project, which Docker-OSX is built on top of: <a href="https://github.com/kholia/OSX-KVM">OSX-KVM</a>.</p>
<p dir="auto">Also special thanks to <a href="https://github.com/thenickdude">@thenickdude</a> who maintains the valuable fork <a href="https://github.com/thenickdude/KVM-Opencore">KVM-OpenCore</a>, which was started by <a href="https://github.com/Leoyzen/">@Leoyzen</a>!</p>
<p dir="auto">Extra special thanks to the OpenCore team over at: <a href="https://github.com/acidanthera/OpenCorePkg">https://github.com/acidanthera/OpenCorePkg</a>. Their well-maintained bootloader provides much of the great functionality that Docker-OSX users enjoy :)</p>
<p dir="auto">If you like this project, consider contributing here or upstream!</p>
<p dir="auto"><h2 tabindex="-1" dir="auto">Quick Start Docker-OSX</h2><a id="user-content-quick-start-docker-osx" aria-label="Permalink: Quick Start Docker-OSX" href="#quick-start-docker-osx"></a></p>
<p dir="auto">Video setup tutorial is also available here: <a href="https://www.youtube.com/watch?v=wLezYl77Ll8" rel="nofollow">https://www.youtube.com/watch?v=wLezYl77Ll8</a></p>
<p dir="auto"><strong>Windows users:</strong> <a href="#id-like-to-run-docker-osx-on-windows">click here to see the notes below</a>!</p>
<p dir="auto">
  <a href="https://www.youtube.com/watch?v=wLezYl77Ll8" rel="nofollow"><img src="https://raw.githubusercontent.com/sickcodes/Docker-OSX/master/Youtube-Screenshot-Docker-OSX-Setup.png"></a>
</p>
<p dir="auto">First time here? try <a href="#initial-setup">initial setup</a>, otherwise try the instructions below to use either Catalina or Big Sur.</p>
<p dir="auto"><h2 tabindex="-1" dir="auto">Any questions, ideas, or just want to hang out?</h2><a id="user-content-any-questions-ideas-or-just-want-to-hang-out" aria-label="Permalink: Any questions, ideas, or just want to hang out?" href="#any-questions-ideas-or-just-want-to-hang-out"></a></p>
<p dir="auto"><h2 tabindex="-1" dir="auto"><a href="https://discord.gg/sickchat" rel="nofollow">https://discord.gg/sickchat</a></h2><a id="user-content-httpsdiscordggsickchat" aria-label="Permalink: https://discord.gg/sickchat" href="#httpsdiscordggsickchat"></a></p>
<div dir="auto"><h3 tabindex="-1" dir="auto">Catalina <a href="https://hub.docker.com/r/sickcodes/docker-osx/tags?page=1&amp;ordering=last_updated" rel="nofollow"><img src="https://camo.githubusercontent.com/800ac0f5869ed01e2fa3eaa86a829f4ea97bfab5660efec131e32c69fd5a79f1/68747470733a2f2f696d672e736869656c64732e696f2f646f636b65722f696d6167652d73697a652f7369636b636f6465732f646f636b65722d6f73782f6c61746573743f6c6162656c3d7369636b636f646573253246646f636b65722d6f73782533416c6174657374" alt="https://img.shields.io/docker/image-size/sickcodes/docker-osx/latest?label=sickcodes%2Fdocker-osx%3Alatest" data-canonical-src="https://img.shields.io/docker/image-size/sickcodes/docker-osx/latest?label=sickcodes%2Fdocker-osx%3Alatest"></a></h3><a id="user-content-catalina-" aria-label="Permalink: Catalina " href="#catalina-"></a></div>
<div dir="auto" data-snippet-clipboard-copy-content="docker run -it \
    --device /dev/kvm \
    -p 50922:10022 \
    -v /tmp/.X11-unix:/tmp/.X11-unix \
    -e &quot;DISPLAY=${DISPLAY:-:0.0}&quot; \
    sickcodes/docker-osx:latest

# docker build -t docker-osx ."><pre>docker run -it \
    --device /dev/kvm \
    -p 50922:10022 \
    -v /tmp/.X11-unix:/tmp/.X11-unix \
    -e <span><span>"</span>DISPLAY=<span>${DISPLAY<span>:-:</span>0.0}</span><span>"</span></span> \
    sickcodes/docker-osx:latest

<span><span>#</span> docker build -t docker-osx .</span></pre></div>
<div dir="auto"><h3 tabindex="-1" dir="auto">Big Sur <a href="https://hub.docker.com/r/sickcodes/docker-osx/tags?page=1&amp;ordering=last_updated" rel="nofollow"><img src="https://camo.githubusercontent.com/e85e5f2ef4f14005a66b133a9100e4c02d0e6b49b5eebc178d310fc06f3f0a6e/68747470733a2f2f696d672e736869656c64732e696f2f646f636b65722f696d6167652d73697a652f7369636b636f6465732f646f636b65722d6f73782f6269672d7375723f6c6162656c3d7369636b636f646573253246646f636b65722d6f73782533416269672d737572" alt="https://img.shields.io/docker/image-size/sickcodes/docker-osx/big-sur?label=sickcodes%2Fdocker-osx%3Abig-sur" data-canonical-src="https://img.shields.io/docker/image-size/sickcodes/docker-osx/big-sur?label=sickcodes%2Fdocker-osx%3Abig-sur"></a></h3><a id="user-content-big-sur-" aria-label="Permalink: Big Sur " href="#big-sur-"></a></div>
<div dir="auto" data-snippet-clipboard-copy-content="docker run -it \
    --device /dev/kvm \
    -p 50922:10022 \
    -v /tmp/.X11-unix:/tmp/.X11-unix \
    -e &quot;DISPLAY=${DISPLAY:-:0.0}&quot; \
    sickcodes/docker-osx:big-sur

# docker build -t docker-osx --build-arg SHORTNAME=big-sur ."><pre>docker run -it \
    --device /dev/kvm \
    -p 50922:10022 \
    -v /tmp/.X11-unix:/tmp/.X11-unix \
    -e <span><span>"</span>DISPLAY=<span>${DISPLAY<span>:-:</span>0.0}</span><span>"</span></span> \
    sickcodes/docker-osx:big-sur

<span><span>#</span> docker build -t docker-osx --build-arg SHORTNAME=big-sur .</span></pre></div>
<div dir="auto"><h3 tabindex="-1" dir="auto">Monterey <a href="https://hub.docker.com/r/sickcodes/docker-osx/tags?page=1&amp;ordering=last_updated" rel="nofollow"><img src="https://camo.githubusercontent.com/c971a2c633cfd64b8ad87f02d0b4cf930a9995630e46d08a10292b184a632f02/68747470733a2f2f696d672e736869656c64732e696f2f646f636b65722f696d6167652d73697a652f7369636b636f6465732f646f636b65722d6f73782f6d6f6e74657265793f6c6162656c3d7369636b636f646573253246646f636b65722d6f73782533416d6f6e7465726579" alt="https://img.shields.io/docker/image-size/sickcodes/docker-osx/monterey?label=sickcodes%2Fdocker-osx%3Amonterey" data-canonical-src="https://img.shields.io/docker/image-size/sickcodes/docker-osx/monterey?label=sickcodes%2Fdocker-osx%3Amonterey"></a></h3><a id="user-content-monterey-" aria-label="Permalink: Monterey " href="#monterey-"></a></div>
<div dir="auto" data-snippet-clipboard-copy-content="
docker run -it \
    --device /dev/kvm \
    -p 50922:10022 \
    -v /tmp/.X11-unix:/tmp/.X11-unix \
    -e &quot;DISPLAY=${DISPLAY:-:0.0}&quot; \
    -e GENERATE_UNIQUE=true \
    -e MASTER_PLIST_URL='https://raw.githubusercontent.com/sickcodes/osx-serial-generator/master/config-custom.plist' \
    sickcodes/docker-osx:monterey

# docker build -t docker-osx --build-arg SHORTNAME=monterey ."><pre>docker run -it \
    --device /dev/kvm \
    -p 50922:10022 \
    -v /tmp/.X11-unix:/tmp/.X11-unix \
    -e <span><span>"</span>DISPLAY=<span>${DISPLAY<span>:-:</span>0.0}</span><span>"</span></span> \
    -e GENERATE_UNIQUE=true \
    -e MASTER_PLIST_URL=<span><span>'</span>https://raw.githubusercontent.com/sickcodes/osx-serial-generator/master/config-custom.plist<span>'</span></span> \
    sickcodes/docker-osx:monterey

<span><span>#</span> docker build -t docker-osx --build-arg SHORTNAME=monterey .</span></pre></div>
<div dir="auto"><h3 tabindex="-1" dir="auto">Ventura <a href="https://hub.docker.com/r/sickcodes/docker-osx/tags?page=1&amp;ordering=last_updated" rel="nofollow"><img src="https://camo.githubusercontent.com/0191c41f0e53e834e55a977cc0ee5f6ac98e4e2a2a0580190c8f96f34441cc18/68747470733a2f2f696d672e736869656c64732e696f2f646f636b65722f696d6167652d73697a652f7369636b636f6465732f646f636b65722d6f73782f76656e747572613f6c6162656c3d7369636b636f646573253246646f636b65722d6f737825334176656e74757261" alt="https://img.shields.io/docker/image-size/sickcodes/docker-osx/ventura?label=sickcodes%2Fdocker-osx%3Aventura" data-canonical-src="https://img.shields.io/docker/image-size/sickcodes/docker-osx/ventura?label=sickcodes%2Fdocker-osx%3Aventura"></a></h3><a id="user-content-ventura-" aria-label="Permalink: Ventura " href="#ventura-"></a></div>
<div dir="auto" data-snippet-clipboard-copy-content="
docker run -it \
    --device /dev/kvm \
    -p 50922:10022 \
    -v /tmp/.X11-unix:/tmp/.X11-unix \
    -e &quot;DISPLAY=${DISPLAY:-:0.0}&quot; \
    -e GENERATE_UNIQUE=true \
    -e MASTER_PLIST_URL='https://raw.githubusercontent.com/sickcodes/osx-serial-generator/master/config-custom.plist' \
    sickcodes/docker-osx:ventura

# docker build -t docker-osx --build-arg SHORTNAME=ventura ."><pre>docker run -it \
    --device /dev/kvm \
    -p 50922:10022 \
    -v /tmp/.X11-unix:/tmp/.X11-unix \
    -e <span><span>"</span>DISPLAY=<span>${DISPLAY<span>:-:</span>0.0}</span><span>"</span></span> \
    -e GENERATE_UNIQUE=true \
    -e MASTER_PLIST_URL=<span><span>'</span>https://raw.githubusercontent.com/sickcodes/osx-serial-generator/master/config-custom.plist<span>'</span></span> \
    sickcodes/docker-osx:ventura

<span><span>#</span> docker build -t docker-osx --build-arg SHORTNAME=ventura .</span></pre></div>
<div dir="auto"><h3 tabindex="-1" dir="auto">Sonoma <a href="https://hub.docker.com/r/sickcodes/docker-osx/tags?page=1&amp;ordering=last_updated" rel="nofollow"><img src="https://camo.githubusercontent.com/ee50b5efe3f58f87263a527d444e405f197349b0429fba1039f871161486d685/68747470733a2f2f696d672e736869656c64732e696f2f646f636b65722f696d6167652d73697a652f7369636b636f6465732f646f636b65722d6f73782f736f6e6f6d613f6c6162656c3d7369636b636f646573253246646f636b65722d6f7378253341736f6e6f6d61" alt="https://img.shields.io/docker/image-size/sickcodes/docker-osx/sonoma?label=sickcodes%2Fdocker-osx%3Asonoma" data-canonical-src="https://img.shields.io/docker/image-size/sickcodes/docker-osx/sonoma?label=sickcodes%2Fdocker-osx%3Asonoma"></a></h3><a id="user-content-sonoma-" aria-label="Permalink: Sonoma " href="#sonoma-"></a></div>
<div dir="auto" data-snippet-clipboard-copy-content="
docker run -it \
    --device /dev/kvm \
    -p 50922:10022 \
    -v /tmp/.X11-unix:/tmp/.X11-unix \
    -e &quot;DISPLAY=${DISPLAY:-:0.0}&quot; \
    -e GENERATE_UNIQUE=true \
    -e CPU='Haswell-noTSX' \
    -e CPUID_FLAGS='kvm=on,vendor=GenuineIntel,+invtsc,vmware-cpuid-freq=on' \
    -e MASTER_PLIST_URL='https://raw.githubusercontent.com/sickcodes/osx-serial-generator/master/config-custom-sonoma.plist' \
    sickcodes/docker-osx:sonoma

# docker build -t docker-osx --build-arg SHORTNAME=sonoma ."><pre>docker run -it \
    --device /dev/kvm \
    -p 50922:10022 \
    -v /tmp/.X11-unix:/tmp/.X11-unix \
    -e <span><span>"</span>DISPLAY=<span>${DISPLAY<span>:-:</span>0.0}</span><span>"</span></span> \
    -e GENERATE_UNIQUE=true \
    -e CPU=<span><span>'</span>Haswell-noTSX<span>'</span></span> \
    -e CPUID_FLAGS=<span><span>'</span>kvm=on,vendor=GenuineIntel,+invtsc,vmware-cpuid-freq=on<span>'</span></span> \
    -e MASTER_PLIST_URL=<span><span>'</span>https://raw.githubusercontent.com/sickcodes/osx-serial-generator/master/config-custom-sonoma.plist<span>'</span></span> \
    sickcodes/docker-osx:sonoma

<span><span>#</span> docker build -t docker-osx --build-arg SHORTNAME=sonoma .</span></pre></div>
<div dir="auto"><h4 tabindex="-1" dir="auto">Run Catalina Pre-Installed <a href="https://hub.docker.com/r/sickcodes/docker-osx/tags?page=1&amp;ordering=last_updated" rel="nofollow"><img src="https://camo.githubusercontent.com/95a8f30ec42cff4f909e34a85cd8ecccce74926271a1832380c1e8c2b4f506b5/68747470733a2f2f696d672e736869656c64732e696f2f646f636b65722f696d6167652d73697a652f7369636b636f6465732f646f636b65722d6f73782f6175746f3f6c6162656c3d7369636b636f646573253246646f636b65722d6f73782533416175746f" alt="https://img.shields.io/docker/image-size/sickcodes/docker-osx/auto?label=sickcodes%2Fdocker-osx%3Aauto" data-canonical-src="https://img.shields.io/docker/image-size/sickcodes/docker-osx/auto?label=sickcodes%2Fdocker-osx%3Aauto"></a></h4><a id="user-content-run-catalina-pre-installed-" aria-label="Permalink: Run Catalina Pre-Installed " href="#run-catalina-pre-installed-"></a></div>
<div dir="auto" data-snippet-clipboard-copy-content="# 40GB disk space required: 20GB original image 20GB your container.
docker pull sickcodes/docker-osx:auto

# boot directly into a real OS X shell with a visual display [NOT HEADLESS]
docker run -it \
    --device /dev/kvm \
    -p 50922:10022 \
    -v /tmp/.X11-unix:/tmp/.X11-unix \
    -e &quot;DISPLAY=${DISPLAY:-:0.0}&quot; \
    -e GENERATE_UNIQUE=true \
    sickcodes/docker-osx:auto

# username is user
# passsword is alpine"><pre><span><span>#</span> 40GB disk space required: 20GB original image 20GB your container.</span>
docker pull sickcodes/docker-osx:auto

<span><span>#</span> boot directly into a real OS X shell with a visual display [NOT HEADLESS]</span>
docker run -it \
    --device /dev/kvm \
    -p 50922:10022 \
    -v /tmp/.X11-unix:/tmp/.X11-unix \
    -e <span><span>"</span>DISPLAY=<span>${DISPLAY<span>:-:</span>0.0}</span><span>"</span></span> \
    -e GENERATE_UNIQUE=true \
    sickcodes/docker-osx:auto

<span><span>#</span> username is user</span>
<span><span>#</span> passsword is alpine</span></pre></div>
<p dir="auto"><h3 tabindex="-1" dir="auto">Older Systems</h3><a id="user-content-older-systems" aria-label="Permalink: Older Systems" href="#older-systems"></a></p>
<div dir="auto"><h3 tabindex="-1" dir="auto">High Sierra <a href="https://hub.docker.com/r/sickcodes/docker-osx/tags?page=1&amp;ordering=last_updated" rel="nofollow"><img src="https://camo.githubusercontent.com/9a31843e25f47091192eb461f3312da533152aac69f963507efa139c4c88c58f/68747470733a2f2f696d672e736869656c64732e696f2f646f636b65722f696d6167652d73697a652f7369636b636f6465732f646f636b65722d6f73782f686967682d7369657272613f6c6162656c3d7369636b636f646573253246646f636b65722d6f7378253341686967682d736965727261" alt="https://img.shields.io/docker/image-size/sickcodes/docker-osx/high-sierra?label=sickcodes%2Fdocker-osx%3Ahigh-sierra" data-canonical-src="https://img.shields.io/docker/image-size/sickcodes/docker-osx/high-sierra?label=sickcodes%2Fdocker-osx%3Ahigh-sierra"></a></h3><a id="user-content-high-sierra-" aria-label="Permalink: High Sierra " href="#high-sierra-"></a></div>
<div dir="auto" data-snippet-clipboard-copy-content="
docker run -it \
    --device /dev/kvm \
    -p 50922:10022 \
    -v /tmp/.X11-unix:/tmp/.X11-unix \
    -e &quot;DISPLAY=${DISPLAY:-:0.0}&quot; \
    sickcodes/docker-osx:high-sierra

# docker build -t docker-osx --build-arg SHORTNAME=high-sierra ."><pre>docker run -it \
    --device /dev/kvm \
    -p 50922:10022 \
    -v /tmp/.X11-unix:/tmp/.X11-unix \
    -e <span><span>"</span>DISPLAY=<span>${DISPLAY<span>:-:</span>0.0}</span><span>"</span></span> \
    sickcodes/docker-osx:high-sierra

<span><span>#</span> docker build -t docker-osx --build-arg SHORTNAME=high-sierra .</span></pre></div>
<div dir="auto"><h3 tabindex="-1" dir="auto">Mojave <a href="https://hub.docker.com/r/sickcodes/docker-osx/tags?page=1&amp;ordering=last_updated" rel="nofollow"><img src="https://camo.githubusercontent.com/13bdf6e99e80c5b166024ade608e0ac2466f506884dd65edba64b04144074006/68747470733a2f2f696d672e736869656c64732e696f2f646f636b65722f696d6167652d73697a652f7369636b636f6465732f646f636b65722d6f73782f6d6f6a6176653f6c6162656c3d7369636b636f646573253246646f636b65722d6f73782533416d6f6a617665" alt="https://img.shields.io/docker/image-size/sickcodes/docker-osx/mojave?label=sickcodes%2Fdocker-osx%3Amojave" data-canonical-src="https://img.shields.io/docker/image-size/sickcodes/docker-osx/mojave?label=sickcodes%2Fdocker-osx%3Amojave"></a></h3><a id="user-content-mojave-" aria-label="Permalink: Mojave " href="#mojave-"></a></div>
<div dir="auto" data-snippet-clipboard-copy-content="
docker run -it \
    --device /dev/kvm \
    -p 50922:10022 \
    -v /tmp/.X11-unix:/tmp/.X11-unix \
    -e &quot;DISPLAY=${DISPLAY:-:0.0}&quot; \
    sickcodes/docker-osx:mojave

# docker build -t docker-osx --build-arg SHORTNAME=mojave ."><pre>docker run -it \
    --device /dev/kvm \
    -p 50922:10022 \
    -v /tmp/.X11-unix:/tmp/.X11-unix \
    -e <span><span>"</span>DISPLAY=<span>${DISPLAY<span>:-:</span>0.0}</span><span>"</span></span> \
    sickcodes/docker-osx:mojave

<span><span>#</span> docker build -t docker-osx --build-arg SHORTNAME=mojave .</span></pre></div>
<p dir="auto"><h4 tabindex="-1" dir="auto">Download the image manually and use it in Docker</h4><a id="user-content-download-the-image-manually-and-use-it-in-docker" aria-label="Permalink: Download the image manually and use it in Docker" href="#download-the-image-manually-and-use-it-in-docker"></a></p>
<p dir="auto"><a href="https://hub.docker.com/r/sickcodes/docker-osx/tags?page=1&amp;ordering=last_updated" rel="nofollow"><img src="https://camo.githubusercontent.com/18ebff76cdd5b97ba8c4f154fc69ce16aab9850f3a57dfae97f2e06e6d1a37cc/68747470733a2f2f696d672e736869656c64732e696f2f646f636b65722f696d6167652d73697a652f7369636b636f6465732f646f636b65722d6f73782f6e616b65643f6c6162656c3d7369636b636f646573253246646f636b65722d6f73782533416e616b6564" alt="https://img.shields.io/docker/image-size/sickcodes/docker-osx/naked?label=sickcodes%2Fdocker-osx%3Anaked" data-canonical-src="https://img.shields.io/docker/image-size/sickcodes/docker-osx/naked?label=sickcodes%2Fdocker-osx%3Anaked"></a></p>
<p dir="auto">This is a particularly good way for downloading the container, in case Docker's CDN (or your connection) happens to be slow.</p>
<div dir="auto" data-snippet-clipboard-copy-content="wget https://images2.sick.codes/mac_hdd_ng_auto.img

docker run -it \
    --device /dev/kvm \
    -p 50922:10022 \
    -v &quot;${PWD}/mac_hdd_ng_auto.img:/image&quot; \
    -v /tmp/.X11-unix:/tmp/.X11-unix \
    -e &quot;DISPLAY=${DISPLAY:-:0.0}&quot; \
    -e GENERATE_UNIQUE=true \
    -e MASTER_PLIST_URL=https://raw.githubusercontent.com/sickcodes/Docker-OSX/master/custom/config-nopicker-custom.plist \
    sickcodes/docker-osx:naked"><pre>wget https://images2.sick.codes/mac_hdd_ng_auto.img

docker run -it \
    --device /dev/kvm \
    -p 50922:10022 \
    -v <span><span>"</span><span>${PWD}</span>/mac_hdd_ng_auto.img:/image<span>"</span></span> \
    -v /tmp/.X11-unix:/tmp/.X11-unix \
    -e <span><span>"</span>DISPLAY=<span>${DISPLAY<span>:-:</span>0.0}</span><span>"</span></span> \
    -e GENERATE_UNIQUE=true \
    -e MASTER_PLIST_URL=https://raw.githubusercontent.com/sickcodes/Docker-OSX/master/custom/config-nopicker-custom.plist \
    sickcodes/docker-osx:naked</pre></div>
<p dir="auto"><h4 tabindex="-1" dir="auto">Use your own image and manually and automatically log into a shell</h4><a id="user-content-use-your-own-image-and-manually-and-automatically-log-into-a-shell" aria-label="Permalink: Use your own image and manually and automatically log into a shell" href="#use-your-own-image-and-manually-and-automatically-log-into-a-shell"></a></p>
<p dir="auto"><a href="https://hub.docker.com/r/sickcodes/docker-osx/tags?page=1&amp;ordering=last_updated" rel="nofollow"><img src="https://camo.githubusercontent.com/f79b81264c3f053603393cea79957ba913a1c75b7ed13dc9ef4e681013336ce6/68747470733a2f2f696d672e736869656c64732e696f2f646f636b65722f696d6167652d73697a652f7369636b636f6465732f646f636b65722d6f73782f6e616b65642d6175746f3f6c6162656c3d7369636b636f646573253246646f636b65722d6f73782533416e616b65642d6175746f" alt="https://img.shields.io/docker/image-size/sickcodes/docker-osx/naked-auto?label=sickcodes%2Fdocker-osx%3Anaked-auto" data-canonical-src="https://img.shields.io/docker/image-size/sickcodes/docker-osx/naked-auto?label=sickcodes%2Fdocker-osx%3Anaked-auto"></a></p>
<p dir="auto">Enable SSH in network sharing inside the guest first. Change <code>-e "USERNAME=user"</code> and <code>-e "PASSWORD=password"</code> to your credentials. The container will add itself to <code>~/.ssh/authorized_keys</code></p>
<p dir="auto">Since you can't see the screen, use the PLIST with nopicker, for example:</p>
<div dir="auto" data-snippet-clipboard-copy-content="# Catalina
# wget https://images2.sick.codes/mac_hdd_ng_auto.img
# Monterey
wget https://images.sick.codes/mac_hdd_ng_auto_monterey.img

docker run -it \
    --device /dev/kvm \
    -p 50922:10022 \
    -v &quot;${PWD}/mac_hdd_ng_auto_monterey.img:/image&quot; \
    -v /tmp/.X11-unix:/tmp/.X11-unix \
    -e &quot;DISPLAY=${DISPLAY:-:0.0}&quot; \
    -e &quot;USERNAME=user&quot; \
    -e &quot;PASSWORD=alpine&quot; \
    -e GENERATE_UNIQUE=true \
    -e MASTER_PLIST_URL=https://raw.githubusercontent.com/sickcodes/Docker-OSX/master/custom/config-nopicker-custom.plist \
    sickcodes/docker-osx:naked-auto"><pre><span><span>#</span> Catalina</span>
<span><span>#</span> wget https://images2.sick.codes/mac_hdd_ng_auto.img</span>
<span><span>#</span> Monterey</span>
wget https://images.sick.codes/mac_hdd_ng_auto_monterey.img

docker run -it \
    --device /dev/kvm \
    -p 50922:10022 \
    -v <span><span>"</span><span>${PWD}</span>/mac_hdd_ng_auto_monterey.img:/image<span>"</span></span> \
    -v /tmp/.X11-unix:/tmp/.X11-unix \
    -e <span><span>"</span>DISPLAY=<span>${DISPLAY<span>:-:</span>0.0}</span><span>"</span></span> \
    -e <span><span>"</span>USERNAME=user<span>"</span></span> \
    -e <span><span>"</span>PASSWORD=alpine<span>"</span></span> \
    -e GENERATE_UNIQUE=true \
    -e MASTER_PLIST_URL=https://raw.githubusercontent.com/sickcodes/Docker-OSX/master/custom/config-nopicker-custom.plist \
    sickcodes/docker-osx:naked-auto</pre></div>
<p dir="auto"><h2 tabindex="-1" dir="auto">Share directories, sharing files, shared folder, mount folder</h2></p>
<p dir="auto">The easiest and most secure way is <code>sshfs</code></p>
<div dir="auto" data-snippet-clipboard-copy-content="# on Linux/Windows
mkdir ~/mnt/osx
sshfs user@localhost:/ -p 50922 ~/mnt/osx
# wait a few seconds, and ~/mnt/osx will have full rootfs mounted over ssh, and in userspace
# automated: sshpass -p <password> sshfs user@localhost:/ -p 50922 ~/mnt/osx"><pre><span><span>#</span> on Linux/Windows</span>
mkdir <span>~</span>/mnt/osx
sshfs user@localhost:/ -p 50922 <span>~</span>/mnt/osx
<span><span>#</span> wait a few seconds, and ~/mnt/osx will have full rootfs mounted over ssh, and in userspace</span>
<span><span>#</span> automated: sshpass -p &lt;password&gt; sshfs user@localhost:/ -p 50922 ~/mnt/osx</span></pre></div>
<p dir="auto"><h2 tabindex="-1" dir="auto">(VFIO) iPhone USB passthrough (VFIO)</h2><a id="user-content-vfio-iphone-usb-passthrough-vfio" aria-label="Permalink: (VFIO) iPhone USB passthrough (VFIO)" href="#vfio-iphone-usb-passthrough-vfio"></a></p>
<p dir="auto">If you have a laptop see the next usbfluxd section.</p>
<p dir="auto">If you have a desktop PC, you can use <a href="https://github.com/Silfalion">@Silfalion</a>'s instructions: <a href="https://github.com/Silfalion/Iphone_docker_osx_passthrough">https://github.com/Silfalion/Iphone_docker_osx_passthrough</a></p>
<p dir="auto"><h2 tabindex="-1" dir="auto">(USBFLUXD) iPhone USB -&gt; Network style passthrough OSX-KVM Docker-OSX</h2><a id="user-content-usbfluxd-iphone-usb---network-style-passthrough-osx-kvm-docker-osx" aria-label="Permalink: (USBFLUXD) iPhone USB -> Network style passthrough OSX-KVM Docker-OSX" href="#usbfluxd-iphone-usb---network-style-passthrough-osx-kvm-docker-osx"></a></p>
<p dir="auto">Video setup tutorial for usbfluxd is also available here: <a href="https://www.youtube.com/watch?v=kTk5fGjK_PM" rel="nofollow">https://www.youtube.com/watch?v=kTk5fGjK_PM</a></p>
<p dir="auto">
  <a href="https://www.youtube.com/watch?v=kTk5fGjK_PM" rel="nofollow"><img alt="iPhone USB passthrough on macOS virtual machine Linux &amp; Windows" src="https://raw.githubusercontent.com/sickcodes/Docker-OSX/master/Youtube-USBFLUXD-Screenshot-Docker-OSX.png"></a>
</p>
<p dir="auto">This method WORKS on laptop, PC, anything!</p>
<p dir="auto">Thank you <a href="https://github.com/nikias">@nikias</a> for <a href="https://github.com/corellium/usbfluxd">usbfluxd</a> via <a href="https://github.com/corellium">https://github.com/corellium</a>!</p>
<p dir="auto"><strong>This is done inside Linux.</strong></p>
<p dir="auto">Open 3 terminals on Linux</p>
<p dir="auto">Connecting your device over USB on Linux allows you to expose <code>usbmuxd</code> on port <code>5000</code> using <a href="https://github.com/corellium/usbfluxd">https://github.com/corellium/usbfluxd</a> to another system on the same network.</p>
<p dir="auto">Ensure <code>usbmuxd</code>, <code>socat</code> and <code>usbfluxd</code> are installed.</p>
<p dir="auto"><code>sudo pacman -S libusbmuxd usbmuxd avahi socat</code></p>
<p dir="auto">Available on the AUR: <a href="https://aur.archlinux.org/packages/usbfluxd/" rel="nofollow">https://aur.archlinux.org/packages/usbfluxd/</a></p>
<p dir="auto"><code>yay usbfluxd</code></p>
<p dir="auto">Plug in your iPhone or iPad.</p>
<p dir="auto">Terminal 1</p>
<div dir="auto" data-snippet-clipboard-copy-content="sudo systemctl start usbmuxd
sudo avahi-daemon"><pre>sudo systemctl start usbmuxd
sudo avahi-daemon</pre></div>
<p dir="auto">Terminal 2:</p>
<div dir="auto" data-snippet-clipboard-copy-content="# on host
sudo systemctl restart usbmuxd
sudo socat tcp-listen:5000,fork unix-connect:/var/run/usbmuxd"><pre><span><span>#</span> on host</span>
sudo systemctl restart usbmuxd
sudo socat tcp-listen:5000,fork unix-connect:/var/run/usbmuxd</pre></div>
<p dir="auto">Terminal 3:</p>

<p dir="auto"><h3 tabindex="-1" dir="auto">Connect to a host running usbfluxd</h3><a id="user-content-connect-to-a-host-running-usbfluxd" aria-label="Permalink: Connect to a host running usbfluxd" href="#connect-to-a-host-running-usbfluxd"></a></p>
<p dir="auto"><strong>This is done inside macOS.</strong></p>
<p dir="auto">Install homebrew.</p>
<p dir="auto"><code>172.17.0.1</code> is usually the Docker bridge IP, which is your PC, but you can use any IP from <code>ip addr</code>...</p>
<p dir="auto">macOS Terminal:</p>
<div dir="auto" data-snippet-clipboard-copy-content="# on the guest
brew install make automake autoconf libtool pkg-config gcc libimobiledevice usbmuxd

git clone https://github.com/corellium/usbfluxd.git
cd usbfluxd

./autogen.sh
make
sudo make install"><pre><span><span>#</span> on the guest</span>
brew install make automake autoconf libtool pkg-config gcc libimobiledevice usbmuxd

git clone https://github.com/corellium/usbfluxd.git
<span>cd</span> usbfluxd

./autogen.sh
make
sudo make install</pre></div>
<p dir="auto">Accept the USB over TCP connection, and appear as local:</p>
<p dir="auto">(you may need to change <code>172.17.0.1</code> to the IP address of the host. e.g. check <code>ip addr</code>)</p>
<div dir="auto" data-snippet-clipboard-copy-content="# on the guest
sudo launchctl start usbmuxd
export PATH=/usr/local/sbin:${PATH}
sudo usbfluxd -f -r 172.17.0.1:5000"><pre><span><span>#</span> on the guest</span>
sudo launchctl start usbmuxd
<span>export</span> PATH=/usr/local/sbin:<span>${PATH}</span>
sudo usbfluxd -f -r 172.17.0.1:5000</pre></div>
<p dir="auto">Close apps such as Xcode and reopen them and your device should appear!</p>
<p dir="auto"><em>If you need to start again on Linux, wipe the current usbfluxd, usbmuxd, and socat:</em></p>
<div dir="auto" data-snippet-clipboard-copy-content="sudo killall usbfluxd
sudo systemctl restart usbmuxd
sudo killall socat"><pre>sudo killall usbfluxd
sudo systemctl restart usbmuxd
sudo killall socat</pre></div>
<p dir="auto"><h2 tabindex="-1" dir="auto">Make container FASTER using <a href="https://github.com/sickcodes/osx-optimizer">https://github.com/sickcodes/osx-optimizer</a></h2><a id="user-content-make-container-faster-using-httpsgithubcomsickcodesosx-optimizer" aria-label="Permalink: Make container FASTER using https://github.com/sickcodes/osx-optimizer" href="#make-container-faster-using-httpsgithubcomsickcodesosx-optimizer"></a></p>
<p dir="auto">SEE commands in <a href="https://github.com/sickcodes/osx-optimizer">https://github.com/sickcodes/osx-optimizer</a>!</p>
<ul dir="auto">
<li>Skip the GUI login screen (at your own risk!)</li>
<li>Disable spotlight indexing on macOS to heavily speed up Virtual Instances.</li>
<li>Disable heavy login screen wallpaper</li>
<li>Disable updates (at your own risk!)</li>
</ul>
<p dir="auto"><h2 tabindex="-1" dir="auto">Increase disk space by moving /var/lib/docker to external drive, block storage, NFS, or any other location conceivable.</h2><a id="user-content-increase-disk-space-by-moving-varlibdocker-to-external-drive-block-storage-nfs-or-any-other-location-conceivable" aria-label="Permalink: Increase disk space by moving /var/lib/docker to external drive, block storage, NFS, or any other location conceivable." href="#increase-disk-space-by-moving-varlibdocker-to-external-drive-block-storage-nfs-or-any-other-location-conceivable"></a></p>
<p dir="auto">Move /var/lib/docker, following the tutorial below</p>
<ul dir="auto">
<li>Cheap large physical disk storage instead using your server's disk, or SSD.</li>
<li>Block Storage, NFS, etc.</li>
</ul>
<p dir="auto">Tutorial here: <a href="https://sick.codes/how-to-run-docker-from-block-storage/" rel="nofollow">https://sick.codes/how-to-run-docker-from-block-storage/</a></p>
<p dir="auto">Only follow the above tutorial if you are happy with wiping all your current Docker images/layers.</p>
<p dir="auto">Safe mode: Disable docker temporarily so you can move the Docker folder temporarily.</p>
<ul dir="auto">
<li>Do NOT do this until you have moved your image out already <a href="https://github.com/dulatello08/Docker-OSX/#quick-start-your-own-image-naked-container-image">https://github.com/dulatello08/Docker-OSX/#quick-start-your-own-image-naked-container-image</a></li>
</ul>
<div dir="auto" data-snippet-clipboard-copy-content="killall dockerd
systemctl disable --now docker
systemctl disable --now docker.socket
systemctl stop docker
systemctl stop docker.socket"><pre>killall dockerd
systemctl disable --now docker
systemctl disable --now docker.socket
systemctl stop docker
systemctl stop docker.socket</pre></div>
<p dir="auto">Now, that Docker daemon is off, move /var/lib/docker somewhere</p>
<p dir="auto">Then, symbolicly link /var/lib/docker somewhere:</p>
<div dir="auto" data-snippet-clipboard-copy-content="mv /var/lib/docker /run/media/user/some_drive/docker
ln -s /run/media/user/some_drive/docker /var/lib/docker

# now check if /var/lib/docker is working still
ls /var/lib/docker"><pre>mv /var/lib/docker /run/media/user/some_drive/docker
ln -s /run/media/user/some_drive/docker /var/lib/docker

<span><span>#</span> now check if /var/lib/docker is working still</span>
ls /var/lib/docker</pre></div>
<p dir="auto">If you see folders, then it worked. You can restart Docker, or just reboot if you want to be sure.</p>
<p dir="auto"><h2 tabindex="-1" dir="auto">Important notices:</h2><a id="user-content-important-notices" aria-label="Permalink: Important notices:" href="#important-notices"></a></p>
<p dir="auto"><strong>2021-11-14</strong> - Added High Sierra, Mojave</p>
<p dir="auto">Pick one of these while <strong>building</strong>, irrelevant when using docker pull:</p>
<div data-snippet-clipboard-copy-content="--build-arg SHORTNAME=high-sierra 
--build-arg SHORTNAME=mojave
--build-arg SHORTNAME=catalina
--build-arg SHORTNAME=big-sur
--build-arg SHORTNAME=monterey
--build-arg SHORTNAME=ventura
--build-arg SHORTNAME=sonoma"><pre><code>--build-arg SHORTNAME=high-sierra 
--build-arg SHORTNAME=mojave
--build-arg SHORTNAME=catalina
--build-arg SHORTNAME=big-sur
--build-arg SHORTNAME=monterey
--build-arg SHORTNAME=ventura
--build-arg SHORTNAME=sonoma
</code></pre></div>
<p dir="auto"><h2 tabindex="-1" dir="auto">Technical details</h2><a id="user-content-technical-details" aria-label="Permalink: Technical details" href="#technical-details"></a></p>
<p dir="auto">There are currently multiple images, each with different use cases (explained <a href="#container-images">below</a>):</p>
<ul dir="auto">
<li>High Sierra</li>
<li>Mojave</li>
<li>Catalina</li>
<li>Big Sur</li>
<li>Monterey</li>
<li>Ventura</li>
<li>Sonoma</li>
<li>Auto (pre-made Catalina)</li>
<li>Naked (use your own .img)</li>
<li>Naked-Auto (user your own .img and SSH in)</li>
</ul>
<p dir="auto">High Sierra:</p>
<p dir="auto"><a href="https://hub.docker.com/r/sickcodes/docker-osx/tags?page=1&amp;ordering=last_updated" rel="nofollow"><img src="https://camo.githubusercontent.com/9a31843e25f47091192eb461f3312da533152aac69f963507efa139c4c88c58f/68747470733a2f2f696d672e736869656c64732e696f2f646f636b65722f696d6167652d73697a652f7369636b636f6465732f646f636b65722d6f73782f686967682d7369657272613f6c6162656c3d7369636b636f646573253246646f636b65722d6f7378253341686967682d736965727261" alt="https://img.shields.io/docker/image-size/sickcodes/docker-osx/high-sierra?label=sickcodes%2Fdocker-osx%3Ahigh-sierra" data-canonical-src="https://img.shields.io/docker/image-size/sickcodes/docker-osx/high-sierra?label=sickcodes%2Fdocker-osx%3Ahigh-sierra"></a></p>
<p dir="auto">Mojave:</p>
<p dir="auto"><a href="https://hub.docker.com/r/sickcodes/docker-osx/tags?page=1&amp;ordering=last_updated" rel="nofollow"><img src="https://camo.githubusercontent.com/13bdf6e99e80c5b166024ade608e0ac2466f506884dd65edba64b04144074006/68747470733a2f2f696d672e736869656c64732e696f2f646f636b65722f696d6167652d73697a652f7369636b636f6465732f646f636b65722d6f73782f6d6f6a6176653f6c6162656c3d7369636b636f646573253246646f636b65722d6f73782533416d6f6a617665" alt="https://img.shields.io/docker/image-size/sickcodes/docker-osx/mojave?label=sickcodes%2Fdocker-osx%3Amojave" data-canonical-src="https://img.shields.io/docker/image-size/sickcodes/docker-osx/mojave?label=sickcodes%2Fdocker-osx%3Amojave"></a></p>
<p dir="auto">Catalina:</p>
<p dir="auto"><a href="https://hub.docker.com/r/sickcodes/docker-osx/tags?page=1&amp;ordering=last_updated" rel="nofollow"><img src="https://camo.githubusercontent.com/800ac0f5869ed01e2fa3eaa86a829f4ea97bfab5660efec131e32c69fd5a79f1/68747470733a2f2f696d672e736869656c64732e696f2f646f636b65722f696d6167652d73697a652f7369636b636f6465732f646f636b65722d6f73782f6c61746573743f6c6162656c3d7369636b636f646573253246646f636b65722d6f73782533416c6174657374" alt="https://img.shields.io/docker/image-size/sickcodes/docker-osx/latest?label=sickcodes%2Fdocker-osx%3Alatest" data-canonical-src="https://img.shields.io/docker/image-size/sickcodes/docker-osx/latest?label=sickcodes%2Fdocker-osx%3Alatest"></a></p>
<p dir="auto">Big-Sur:</p>
<p dir="auto"><a href="https://hub.docker.com/r/sickcodes/docker-osx/tags?page=1&amp;ordering=last_updated" rel="nofollow"><img src="https://camo.githubusercontent.com/e85e5f2ef4f14005a66b133a9100e4c02d0e6b49b5eebc178d310fc06f3f0a6e/68747470733a2f2f696d672e736869656c64732e696f2f646f636b65722f696d6167652d73697a652f7369636b636f6465732f646f636b65722d6f73782f6269672d7375723f6c6162656c3d7369636b636f646573253246646f636b65722d6f73782533416269672d737572" alt="https://img.shields.io/docker/image-size/sickcodes/docker-osx/big-sur?label=sickcodes%2Fdocker-osx%3Abig-sur" data-canonical-src="https://img.shields.io/docker/image-size/sickcodes/docker-osx/big-sur?label=sickcodes%2Fdocker-osx%3Abig-sur"></a></p>
<p dir="auto">Monterey make your own image:</p>
<p dir="auto"><a href="https://hub.docker.com/r/sickcodes/docker-osx/tags?page=1&amp;ordering=last_updated" rel="nofollow"><img src="https://camo.githubusercontent.com/c971a2c633cfd64b8ad87f02d0b4cf930a9995630e46d08a10292b184a632f02/68747470733a2f2f696d672e736869656c64732e696f2f646f636b65722f696d6167652d73697a652f7369636b636f6465732f646f636b65722d6f73782f6d6f6e74657265793f6c6162656c3d7369636b636f646573253246646f636b65722d6f73782533416d6f6e7465726579" alt="https://img.shields.io/docker/image-size/sickcodes/docker-osx/monterey?label=sickcodes%2Fdocker-osx%3Amonterey" data-canonical-src="https://img.shields.io/docker/image-size/sickcodes/docker-osx/monterey?label=sickcodes%2Fdocker-osx%3Amonterey"></a></p>
<p dir="auto">Ventura make your own image:</p>
<p dir="auto"><a href="https://hub.docker.com/r/sickcodes/docker-osx/tags?page=1&amp;ordering=last_updated" rel="nofollow"><img src="https://camo.githubusercontent.com/0191c41f0e53e834e55a977cc0ee5f6ac98e4e2a2a0580190c8f96f34441cc18/68747470733a2f2f696d672e736869656c64732e696f2f646f636b65722f696d6167652d73697a652f7369636b636f6465732f646f636b65722d6f73782f76656e747572613f6c6162656c3d7369636b636f646573253246646f636b65722d6f737825334176656e74757261" alt="https://img.shields.io/docker/image-size/sickcodes/docker-osx/ventura?label=sickcodes%2Fdocker-osx%3Aventura" data-canonical-src="https://img.shields.io/docker/image-size/sickcodes/docker-osx/ventura?label=sickcodes%2Fdocker-osx%3Aventura"></a></p>
<p dir="auto">Sonoma make your own image:</p>
<p dir="auto"><a href="https://hub.docker.com/r/sickcodes/docker-osx/tags?page=1&amp;ordering=last_updated" rel="nofollow"><img src="https://camo.githubusercontent.com/ee50b5efe3f58f87263a527d444e405f197349b0429fba1039f871161486d685/68747470733a2f2f696d672e736869656c64732e696f2f646f636b65722f696d6167652d73697a652f7369636b636f6465732f646f636b65722d6f73782f736f6e6f6d613f6c6162656c3d7369636b636f646573253246646f636b65722d6f7378253341736f6e6f6d61" alt="https://img.shields.io/docker/image-size/sickcodes/docker-osx/sonoma?label=sickcodes%2Fdocker-osx%3Asonoma" data-canonical-src="https://img.shields.io/docker/image-size/sickcodes/docker-osx/sonoma?label=sickcodes%2Fdocker-osx%3Asonoma"></a></p>
<p dir="auto">Pre-made <strong>Catalina</strong> system by <a href="https://sick.codes/" rel="nofollow">Sick.Codes</a>: username: <code>user</code>, password: <code>alpine</code></p>
<p dir="auto"><a href="https://hub.docker.com/r/sickcodes/docker-osx/tags?page=1&amp;ordering=last_updated" rel="nofollow"><img src="https://camo.githubusercontent.com/95a8f30ec42cff4f909e34a85cd8ecccce74926271a1832380c1e8c2b4f506b5/68747470733a2f2f696d672e736869656c64732e696f2f646f636b65722f696d6167652d73697a652f7369636b636f6465732f646f636b65722d6f73782f6175746f3f6c6162656c3d7369636b636f646573253246646f636b65722d6f73782533416175746f" alt="https://img.shields.io/docker/image-size/sickcodes/docker-osx/auto?label=sickcodes%2Fdocker-osx%3Aauto" data-canonical-src="https://img.shields.io/docker/image-size/sickcodes/docker-osx/auto?label=sickcodes%2Fdocker-osx%3Aauto"></a></p>
<p dir="auto">Naked: Bring-your-own-image setup (use any of the above first):</p>
<p dir="auto"><a href="https://hub.docker.com/r/sickcodes/docker-osx/tags?page=1&amp;ordering=last_updated" rel="nofollow"><img src="https://camo.githubusercontent.com/18ebff76cdd5b97ba8c4f154fc69ce16aab9850f3a57dfae97f2e06e6d1a37cc/68747470733a2f2f696d672e736869656c64732e696f2f646f636b65722f696d6167652d73697a652f7369636b636f6465732f646f636b65722d6f73782f6e616b65643f6c6162656c3d7369636b636f646573253246646f636b65722d6f73782533416e616b6564" alt="https://img.shields.io/docker/image-size/sickcodes/docker-osx/naked?label=sickcodes%2Fdocker-osx%3Anaked" data-canonical-src="https://img.shields.io/docker/image-size/sickcodes/docker-osx/naked?label=sickcodes%2Fdocker-osx%3Anaked"></a></p>
<p dir="auto">Naked Auto: same as above but with <code>-e USERNAME</code> &amp; <code>-e PASSWORD</code> and <code>-e OSX_COMMANDS="put your commands here"</code></p>
<p dir="auto"><a href="https://hub.docker.com/r/sickcodes/docker-osx/tags?page=1&amp;ordering=last_updated" rel="nofollow"><img src="https://camo.githubusercontent.com/f79b81264c3f053603393cea79957ba913a1c75b7ed13dc9ef4e681013336ce6/68747470733a2f2f696d672e736869656c64732e696f2f646f636b65722f696d6167652d73697a652f7369636b636f6465732f646f636b65722d6f73782f6e616b65642d6175746f3f6c6162656c3d7369636b636f646573253246646f636b65722d6f73782533416e616b65642d6175746f" alt="https://img.shields.io/docker/image-size/sickcodes/docker-osx/naked-auto?label=sickcodes%2Fdocker-osx%3Anaked-auto" data-canonical-src="https://img.shields.io/docker/image-size/sickcodes/docker-osx/naked-auto?label=sickcodes%2Fdocker-osx%3Anaked-auto"></a></p>
<p dir="auto"><h2 tabindex="-1" dir="auto">Capabilities</h2><a id="user-content-capabilities" aria-label="Permalink: Capabilities" href="#capabilities"></a></p>
<ul dir="auto">
<li>use iPhone OSX KVM on Linux using <a href="https://github.com/corellium/usbfluxd">usbfluxd</a>!</li>
<li>macOS Monterey VM on Linux!</li>
<li>Folder sharing-</li>
<li>USB passthrough (hotplug too)</li>
<li>SSH enabled (<code>localhost:50922</code>)</li>
<li>VNC enabled (<code>localhost:8888</code>) if using ./vnc version</li>
<li>iMessage security research via <a href="https://github.com/sickcodes/osx-serial-generator">serial number generator!</a></li>
<li>X11 forwarding is enabled</li>
<li>runs on top of QEMU + KVM</li>
<li>supports Big Sur, custom images, Xvfb headless mode</li>
<li>you can clone your container with <code>docker commit</code></li>
</ul>
<p dir="auto"><h3 tabindex="-1" dir="auto">Requirements</h3><a id="user-content-requirements" aria-label="Permalink: Requirements" href="#requirements"></a></p>
<ul dir="auto">
<li>20GB+++ disk space for bare minimum installation (50GB if using Xcode)</li>
<li>virtualization should be enabled in your BIOS settings</li>
<li>a x86_64 kvm-capable host</li>
<li>at least 50 GBs for <code>:auto</code> (half for the base image, half for your runtime image</li>
</ul>
<p dir="auto"><h3 tabindex="-1" dir="auto">TODO</h3><a id="user-content-todo" aria-label="Permalink: TODO" href="#todo"></a></p>
<ul dir="auto">
<li>documentation for security researchers</li>
<li>gpu acceleration</li>
<li>support for virt-manager</li>
</ul>
<p dir="auto"><h2 tabindex="-1" dir="auto">Docker</h2><a id="user-content-docker" aria-label="Permalink: Docker" href="#docker"></a></p>
<p dir="auto">Images built on top of the contents of this repository are also available on <strong>Docker Hub</strong> for convenience: <a href="https://hub.docker.com/r/sickcodes/docker-osx" rel="nofollow">https://hub.docker.com/r/sickcodes/docker-osx</a></p>
<p dir="auto">A comprehensive list of the available Docker images and their intended purpose can be found in the <a href="#instructions">Instructions</a>.</p>
<p dir="auto"><h2 tabindex="-1" dir="auto">Kubernetes</h2><a id="user-content-kubernetes" aria-label="Permalink: Kubernetes" href="#kubernetes"></a></p>
<p dir="auto">Docker-OSX supports Kubernetes.</p>
<p dir="auto">Kubernetes Helm Chart &amp; Documentation can be found under the <a href="https://github.com/sickcodes/Docker-OSX/blob/master/helm/README.md">helm directory</a>.</p>
<p dir="auto">Thanks <a href="https://github.com/cephasara">cephasara</a> for contributing this major contribution.</p>
<p dir="auto"><a href="https://artifacthub.io/packages/search?repo=docker-osx" rel="nofollow"><img src="https://camo.githubusercontent.com/049a10bf953328bd6a4fe7a2628ca0aae05b165d1e22fad2201b3fc23cfca453/68747470733a2f2f696d672e736869656c64732e696f2f656e64706f696e743f75726c3d68747470733a2f2f61727469666163746875622e696f2f62616467652f7265706f7369746f72792f646f636b65722d6f7378" alt="Artifact HUB" data-canonical-src="https://img.shields.io/endpoint?url=https://artifacthub.io/badge/repository/docker-osx"></a></p>
<p dir="auto"><h2 tabindex="-1" dir="auto">Support</h2><a id="user-content-support" aria-label="Permalink: Support" href="#support"></a></p>
<p dir="auto"><h3 tabindex="-1" dir="auto">Small questions &amp; issues</h3><a id="user-content-small-questions--issues" aria-label="Permalink: Small questions &amp; issues" href="#small-questions--issues"></a></p>
<p dir="auto">Feel free to open an <a href="https://github.com/sickcodes/Docker-OSX/issues/new/choose">issue</a>, should you come across minor issues with running Docker-OSX or have any questions.</p>
<p dir="auto"><h4 tabindex="-1" dir="auto">Resolved issues</h4><a id="user-content-resolved-issues" aria-label="Permalink: Resolved issues" href="#resolved-issues"></a></p>
<p dir="auto">Before you open an issue, however, please check the <a href="https://github.com/sickcodes/Docker-OSX/issues?q=is%3Aissue+is%3Aclosed">closed issues</a> and confirm that you're using the latest version of this repository — your issues may have already been resolved! You might also see your answer in our questions and answers section <a href="#more-questions-and-answers">below</a>.</p>
<p dir="auto"><h3 tabindex="-1" dir="auto">Feature requests and updates</h3><a id="user-content-feature-requests-and-updates" aria-label="Permalink: Feature requests and updates" href="#feature-requests-and-updates"></a></p>
<p dir="auto">Follow <a href="https://twitter.com/sickcodes" rel="nofollow">@sickcodes</a>!</p>
<p dir="auto"><h3 tabindex="-1" dir="auto">Professional support</h3><a id="user-content-professional-support" aria-label="Permalink: Professional support" href="#professional-support"></a></p>
<p dir="auto">For more sophisticated endeavours, we offer the following support services:</p>
<ul dir="auto">
<li>Enterprise support, business support, or casual support.</li>
<li>Custom images, custom scripts, consulting (per hour available!)</li>
<li>One-on-one conversations with you or your development team.</li>
</ul>
<p dir="auto">In case you're interested, contact <a href="https://twitter.com/sickcodes" rel="nofollow">@sickcodes on Twitter</a> or click <a href="https://sick.codes/contact" rel="nofollow">here</a>.</p>
<p dir="auto"><h2 tabindex="-1" dir="auto">License/Contributing</h2><a id="user-content-licensecontributing" aria-label="Permalink: License/Contributing" href="#licensecontributing"></a></p>
<p dir="auto">Docker-OSX is licensed under the <a href="https://github.com/sickcodes/Docker-OSX/blob/master/LICENSE">GPL v3+</a>. Contributions are welcomed and immensely appreciated. You are in fact permitted to use Docker-OSX as a tool to create proprietary software.</p>
<p dir="auto"><h3 tabindex="-1" dir="auto">Other cool Docker/QEMU based projects</h3><a id="user-content-other-cool-dockerqemu-based-projects" aria-label="Permalink: Other cool Docker/QEMU based projects" href="#other-cool-dockerqemu-based-projects"></a></p>
<ul dir="auto">
<li><a href="https://github.com/sickcodes/dock-droid">Run Android in a Docker Container with Dock Droid</a></li>
<li><a href="https://github.com/sickcodes/droid-native">Run Android fully native on the host!</a></li>
<li><a href="https://github.com/sickcodes/Docker-eyeOS">Run iOS 12 in a Docker container with Docker-eyeOS</a> - <a href="https://github.com/sickcodes/Docker-eyeOS">https://github.com/sickcodes/Docker-eyeOS</a></li>
<li><a href="https://bluebubbles.app/" rel="nofollow">Run iMessage relayer in Docker with Bluebubbles.app</a> - <a href="https://github.com/BlueBubblesApp/BlueBubbles-Server/wiki/Running-via-Docker">Getting started wiki</a></li>
</ul>
<p dir="auto"><h2 tabindex="-1" dir="auto">Disclaimer</h2><a id="user-content-disclaimer" aria-label="Permalink: Disclaimer" href="#disclaimer"></a></p>
<p dir="auto">If you are serious about Apple Security, and possibly finding 6-figure bug bounties within the Apple Bug Bounty Program, then you're in the right place! Further notes: <a href="https://sick.codes/is-hackintosh-osx-kvm-or-docker-osx-legal/" rel="nofollow">Is Hackintosh, OSX-KVM, or Docker-OSX legal?</a></p>
<p dir="auto">Product names, logos, brands and other trademarks referred to within this project are the property of their respective trademark holders. These trademark holders are not affiliated with our repository in any capacity. They do not sponsor or endorse this project in any way.</p>
<p dir="auto"><h2 tabindex="-1" dir="auto">Instructions</h2><a id="user-content-instructions" aria-label="Permalink: Instructions" href="#instructions"></a></p>
<p dir="auto"><h2 tabindex="-1" dir="auto">Container images</h2><a id="user-content-container-images" aria-label="Permalink: Container images" href="#container-images"></a></p>
<p dir="auto"><h3 tabindex="-1" dir="auto">Already set up or just looking to make a container quickly? Check out our <a href="#quick-start-docker-osx">quick start</a> or see a bunch more use cases under our <a href="#container-creation-examples">container creation examples</a> section.</h3><a id="user-content-already-set-up-or-just-looking-to-make-a-container-quickly-check-out-our-quick-start-or-see-a-bunch-more-use-cases-under-our-container-creation-examples-section" aria-label="Permalink: Already set up or just looking to make a container quickly? Check out our quick start or see a bunch more use cases under our container creation examples section." href="#already-set-up-or-just-looking-to-make-a-container-quickly-check-out-our-quick-start-or-see-a-bunch-more-use-cases-under-our-container-creation-examples-section"></a></p>
<p dir="auto">There are several different Docker-OSX images available that are suitable for different purposes.</p>
<ul dir="auto">
<li><code>sickcodes/docker-osx:latest</code> - <a href="#quick-start-docker-osx">I just want to try it out.</a></li>
<li><code>sickcodes/docker-osx:latest</code> - <a href="#quick-start-your-own-image-naked-container-image">I want to use Docker-OSX to develop/secure apps in Xcode (sign into Xcode, Transporter)</a></li>
<li><code>sickcodes/docker-osx:naked</code> - <a href="#building-a-headless-container-from-a-custom-image">I want to use Docker-OSX for CI/CD-related purposes (sign into Xcode, Transporter)</a></li>
</ul>
<p dir="auto">Create your personal image using <code>:latest</code> or <code>big-sur</code>. Then, pull the image out the image. Afterwards, you will be able to duplicate that image and import it to the <code>:naked</code> container, in order to revert the container to a previous state repeatedly.</p>
<ul dir="auto">
<li>
<p dir="auto"><code>sickcodes/docker-osx:auto</code> - <a href="#prebuilt-image-with-arbitrary-command-line-arguments">I'm only interested in using the command line (useful for compiling software or using Homebrew headlessly).</a></p>
</li>
<li>
<p dir="auto"><code>sickcodes/docker-osx:naked</code> - <a href="#generating-serial-numbers">I need iMessage/iCloud for security research.</a></p>
</li>
<li>
<p dir="auto"><code>sickcodes/docker-osx:big-sur</code> - <a href="#quick-start-docker-osx">I want to run Big Sur.</a></p>
</li>
<li>
<p dir="auto"><code>sickcodes/docker-osx:monterey</code> - <a href="#quick-start-docker-osx">I want to run Monterey.</a></p>
</li>
<li>
<p dir="auto"><code>sickcodes/docker-osx:ventura</code> - <a href="#quick-start-docker-osx">I want to run Ventura.</a></p>
</li>
<li>
<p dir="auto"><code>sickcodes/docker-osx:sonoma</code> - <a href="#quick-start-docker-osx">I want to run Sonoma.</a></p>
</li>
<li>
<p dir="auto"><code>sickcodes/docker-osx:high-sierra</code> - I want to run High Sierra.</p>
</li>
<li>
<p dir="auto"><code>sickcodes/docker-osx:mojave</code> - I want to run Mojave.</p>
</li>
</ul>
<p dir="auto"><h2 tabindex="-1" dir="auto">Initial setup</h2><a id="user-content-initial-setup" aria-label="Permalink: Initial setup" href="#initial-setup"></a></p>
<p dir="auto">Before you do anything else, you will need to turn on hardware virtualization in your BIOS. Precisely how will depend on your particular machine (and BIOS), but it should be straightforward.</p>
<p dir="auto">Then, you'll need QEMU and some other dependencies on your host:</p>
<div dir="auto" data-snippet-clipboard-copy-content="# ARCH
sudo pacman -S qemu libvirt dnsmasq virt-manager bridge-utils flex bison iptables-nft edk2-ovmf

# UBUNTU DEBIAN
sudo apt install qemu qemu-kvm libvirt-clients libvirt-daemon-system bridge-utils virt-manager libguestfs-tools

# CENTOS RHEL FEDORA
sudo yum install libvirt qemu-kvm"><pre><span><span>#</span> ARCH</span>
sudo pacman -S qemu libvirt dnsmasq virt-manager bridge-utils flex bison iptables-nft edk2-ovmf

<span><span>#</span> UBUNTU DEBIAN</span>
sudo apt install qemu qemu-kvm libvirt-clients libvirt-daemon-system bridge-utils virt-manager libguestfs-tools

<span><span>#</span> CENTOS RHEL FEDORA</span>
sudo yum install libvirt qemu-kvm</pre></div>
<p dir="auto">Then, enable libvirt and load the KVM kernel module:</p>
<div dir="auto" data-snippet-clipboard-copy-content="sudo systemctl enable --now libvirtd
sudo systemctl enable --now virtlogd

echo 1 | sudo tee /sys/module/kvm/parameters/ignore_msrs

sudo modprobe kvm"><pre>sudo systemctl <span>enable</span> --now libvirtd
sudo systemctl <span>enable</span> --now virtlogd

<span>echo</span> 1 <span>|</span> sudo tee /sys/module/kvm/parameters/ignore_msrs

sudo modprobe kvm</pre></div>
<p dir="auto"><h3 tabindex="-1" dir="auto">I'd like to run Docker-OSX on Windows</h3><a id="user-content-id-like-to-run-docker-osx-on-windows" aria-label="Permalink: I'd like to run Docker-OSX on Windows" href="#id-like-to-run-docker-osx-on-windows"></a></p>
<p dir="auto">Running Docker-OSX on Windows is possible using WSL2 (Windows 11 + Windows Subsystem for Linux).</p>
<p dir="auto">You must have Windows 11 installed with build 22000+ (21H2 or higher).</p>
<p dir="auto">First, install WSL on your computer by running this command in an administrator powershell. For more info, look <a href="https://docs.microsoft.com/en-us/windows/wsl/install" rel="nofollow">here</a>.</p>
<p dir="auto">This will install Ubuntu by default.</p>

<p dir="auto">You can confirm WSL2 is enabled using <code>wsl -l -v</code> in PowerShell. To see other distributions that are available, use <code>wsl -l -o</code>.</p>
<p dir="auto">If you have previously installed WSL1, upgrade to WSL 2. Check <a href="https://docs.microsoft.com/en-us/windows/wsl/install#upgrade-version-from-wsl-1-to-wsl-2" rel="nofollow">this link to upgrade from WSL1 to WSL2</a>.</p>
<p dir="auto">After WSL installation, go to <code>C:/Users/&lt;Your_Name&gt;/.wslconfig</code> and add <code>nestedVirtualization=true</code> to the end of the file (If the file doesn't exist, create it). For more information about the <code>.wslconfig</code> file check <a href="https://docs.microsoft.com/en-us/windows/wsl/wsl-config#wslconfig" rel="nofollow">this link</a>. Verify that you have selected "Show Hidden Files" and "Show File Extensions" in File Explorer options.
The result should be like this:</p>
<div data-snippet-clipboard-copy-content="[wsl2]
nestedVirtualization=true"><pre><code>[wsl2]
nestedVirtualization=true
</code></pre></div>
<p dir="auto">Go into your WSL distro (Run <code>wsl</code> in powershell) and check if KVM is enabled by using the <code>kvm-ok</code> command. The output should look like this:</p>
<div data-snippet-clipboard-copy-content="INFO: /dev/kvm exists
KVM acceleration can be used"><pre><code>INFO: /dev/kvm exists
KVM acceleration can be used
</code></pre></div>
<p dir="auto">Use the command <code>sudo apt -y install bridge-utils cpu-checker libvirt-clients libvirt-daemon qemu qemu-kvm</code> to install it if it isn't.</p>
<p dir="auto">Now download and install <a href="https://docs.docker.com/desktop/windows/install/" rel="nofollow">Docker for Windows</a> if it is not already installed.</p>
<p dir="auto">After installation, go into Settings and check these 2 boxes:</p>
<div data-snippet-clipboard-copy-content="General -> &quot;Use the WSL2 based engine&quot;;
Resources -> WSL Integration -> &quot;Enable integration with my default WSL distro&quot;, "><pre><code>General -&gt; "Use the WSL2 based engine";
Resources -&gt; WSL Integration -&gt; "Enable integration with my default WSL distro", 
</code></pre></div>
<p dir="auto">Ensure <code>x11-apps</code> is installed. Use the command <code>sudo apt install x11-apps -y</code> to install it if it isn't.</p>
<p dir="auto">Finally, there are 3 ways to get video output:</p>
<ul dir="auto">
<li>WSLg: This is the simplest and easiest option to use. There may be some issues such as the keyboard not being fully passed through or seeing a second mouse on the desktop - <a href="https://github.com/microsoft/wslg/issues/376" data-hovercard-type="issue" data-hovercard-url="/microsoft/wslg/issues/376/hovercard">Issue on WSLg</a> - but this option is recommended.</li>
</ul>
<p dir="auto">To use WSLg's built-in X-11 server, change these two lines in the docker run command to point Docker-OSX to WSLg.</p>
<div data-snippet-clipboard-copy-content="-e &quot;DISPLAY=${DISPLAY:-:0.0}&quot; \
-v /mnt/wslg/.X11-unix:/tmp/.X11-unix \"><pre><code>-e "DISPLAY=${DISPLAY:-:0.0}" \
-v /mnt/wslg/.X11-unix:/tmp/.X11-unix \
</code></pre></div>
<p dir="auto">Or try:</p>
<div data-snippet-clipboard-copy-content="-e &quot;DISPLAY=${DISPLAY:-:0}&quot; \
-v /mnt/wslg/.X11-unix:/tmp/.X11-unix \"><pre><code>-e "DISPLAY=${DISPLAY:-:0}" \
-v /mnt/wslg/.X11-unix:/tmp/.X11-unix \
</code></pre></div>
<p dir="auto">For Ubuntu 20.x on Windows, see <a data-error-text="Failed to load title" data-id="3908501" data-permission-text="Title is private" data-url="https://github.com/sickcodes/Docker-OSX/discussions/458" data-hovercard-type="discussion" data-hovercard-url="/sickcodes/Docker-OSX/discussions/458/hovercard" href="https://github.com/sickcodes/Docker-OSX/discussions/458">#458</a></p>
<ul dir="auto">
<li>VNC: See the <a href="#building-a-headless-container-which-allows-insecure-vnc-on-localhost-for-local-use-only">VNC section</a> for more information. You could also add -vnc argument to qemu. Connect to your mac VM via a VNC Client. <a href="https://wiki.archlinux.org/title/QEMU#VNC" rel="nofollow">Here is a how to</a></li>
<li>Desktop Environment: This will give you a full desktop linux experience but it will use a bit more of the computer's resources. Here is an example guide, but there are other guides that help set up a desktop environment. <a href="https://www.makeuseof.com/tag/linux-desktop-windows-subsystem/" rel="nofollow">DE Example</a></li>
</ul>
<p dir="auto"><h2 tabindex="-1" dir="auto">Additional boot instructions for when you are <a href="#container-creation-examples">creating your container</a></h2><a id="user-content-additional-boot-instructions-for-when-you-are-creating-your-container" aria-label="Permalink: Additional boot instructions for when you are creating your container" href="#additional-boot-instructions-for-when-you-are-creating-your-container"></a></p>
<ul dir="auto">
<li>
<p dir="auto">Boot the macOS Base System (Press Enter)</p>
</li>
<li>
<p dir="auto">Click <code>Disk Utility</code></p>
</li>
<li>
<p dir="auto">Erase the BIGGEST disk (around 200gb default), DO NOT MODIFY THE SMALLER DISKS.
-- if you can't click <code>erase</code>, you may need to reduce the disk size by 1kb</p>
</li>
<li>
<p dir="auto">(optional) Create a partition using the unused space to house the OS and your files if you want to limit the capacity. (For Xcode 12 partition at least 60gb.)</p>
</li>
<li>
<p dir="auto">Click <code>Reinstall macOS</code></p>
</li>
<li>
<p dir="auto">The system may require multiple reboots during installation</p>
</li>
</ul>
<p dir="auto"><h2 tabindex="-1" dir="auto">Troubleshooting</h2><a id="user-content-troubleshooting" aria-label="Permalink: Troubleshooting" href="#troubleshooting"></a></p>
<p dir="auto"><h3 tabindex="-1" dir="auto">Routine checks</h3><a id="user-content-routine-checks" aria-label="Permalink: Routine checks" href="#routine-checks"></a></p>
<p dir="auto">This is a great place to start if you are having trouble getting going, especially if you're not that familiar with Docker just yet.</p>
<p dir="auto">Just looking to make a container quickly? Check out our <a href="#container-creation-examples">container creation examples</a> section.</p>
<p dir="auto">More specific/advanced troubleshooting questions and answers may be found in <a href="#more-questions-and-answers">More Questions and Answers</a>. You should also check out the <a href="https://github.com/sickcodes/Docker-OSX/issues?q=is%3Aissue+is%3Aclosed">closed issues</a>. Someone else might have gotten a question like yours answered already even if you can't find it in this document!</p>
<p dir="auto"><h4 tabindex="-1" dir="auto">Confirm that your CPU supports virtualization</h4><a id="user-content-confirm-that-your-cpu-supports-virtualization" aria-label="Permalink: Confirm that your CPU supports virtualization" href="#confirm-that-your-cpu-supports-virtualization"></a></p>
<p dir="auto">See <a href="#initial-setup">initial setup</a>.</p>
<p dir="auto"><h4 tabindex="-1" dir="auto">Docker Unknown Server OS error</h4><a id="user-content-docker-unknown-server-os-error" aria-label="Permalink: Docker Unknown Server OS error" href="#docker-unknown-server-os-error"></a></p>
<div dir="auto" data-snippet-clipboard-copy-content="docker: unknown server OS: .
See 'docker run --help'."><pre><span>docker: unknown server OS: .</span>
<span>See 'docker run --help'.</span></pre></div>
<p dir="auto">This means your docker daemon is not running.</p>
<p dir="auto"><code>pgrep dockerd</code> should return nothing</p>
<p dir="auto">Therefore, you have a few choices.</p>
<p dir="auto"><code>sudo dockerd</code> for foreground Docker usage. I use this.</p>
<p dir="auto">Or</p>
<p dir="auto"><code>sudo systemctl --start dockerd</code> to start dockerd this now.</p>
<p dir="auto">Or</p>
<p dir="auto"><code>sudo systemctl --enable --now dockerd</code> for start dockerd on every reboot, and now.</p>
<p dir="auto"><h4 tabindex="-1" dir="auto">Use more CPU Cores/SMP</h4><a id="user-content-use-more-cpu-coressmp" aria-label="Permalink: Use more CPU Cores/SMP" href="#use-more-cpu-coressmp"></a></p>
<p dir="auto">Examples:</p>
<p dir="auto"><code>-e EXTRA='-smp 6,sockets=3,cores=2'</code></p>
<p dir="auto"><code>-e EXTRA='-smp 8,sockets=4,cores=2'</code></p>
<p dir="auto"><code>-e EXTRA='-smp 16,sockets=8,cores=2'</code></p>
<p dir="auto">Note, unlike memory, CPU usage is shared. so you can allocate all of your CPU's to the container.</p>
<p dir="auto"><h3 tabindex="-1" dir="auto">Confirm your user is part of the Docker group, KVM group, libvirt group</h3><a id="user-content-confirm-your-user-is-part-of-the-docker-group-kvm-group-libvirt-group" aria-label="Permalink: Confirm your user is part of the Docker group, KVM group, libvirt group" href="#confirm-your-user-is-part-of-the-docker-group-kvm-group-libvirt-group"></a></p>
<p dir="auto"><h4 tabindex="-1" dir="auto">Add yourself to the Docker group</h4><a id="user-content-add-yourself-to-the-docker-group" aria-label="Permalink: Add yourself to the Docker group" href="#add-yourself-to-the-docker-group"></a></p>
<p dir="auto">If you use <code>sudo dockerd</code> or dockerd is controlled by systemd/systemctl, then you must be in the Docker group.
If you are not in the Docker group:</p>
<div dir="auto" data-snippet-clipboard-copy-content="sudo usermod -aG docker &quot;${USER}&quot;"><pre>sudo usermod -aG docker <span><span>"</span><span>${USER}</span><span>"</span></span></pre></div>
<p dir="auto">and also add yourself to the kvm and libvirt groups if needed:</p>
<div dir="auto" data-snippet-clipboard-copy-content="sudo usermod -aG libvirt &quot;${USER}&quot;
sudo usermod -aG kvm &quot;${USER}&quot;"><pre>sudo usermod -aG libvirt <span><span>"</span><span>${USER}</span><span>"</span></span>
sudo usermod -aG kvm <span><span>"</span><span>${USER}</span><span>"</span></span></pre></div>
<p dir="auto">See also: <a href="#initial-setup">initial setup</a>.</p>
<p dir="auto"><h4 tabindex="-1" dir="auto">Is the docker daemon enabled?</h4><a id="user-content-is-the-docker-daemon-enabled" aria-label="Permalink: Is the docker daemon enabled?" href="#is-the-docker-daemon-enabled"></a></p>
<div dir="auto" data-snippet-clipboard-copy-content="# run ad hoc
sudo dockerd

# or daemonize it
sudo nohup dockerd &amp;

# enable it in systemd (it will persist across reboots this way)
sudo systemctl enable --now docker

# or just start it as your user with systemd instead of enabling it
systemctl start docker"><pre><span><span>#</span> run ad hoc</span>
sudo dockerd

<span><span>#</span> or daemonize it</span>
sudo nohup dockerd <span>&amp;</span>

<span><span>#</span> enable it in systemd (it will persist across reboots this way)</span>
sudo systemctl <span>enable</span> --now docker

<span><span>#</span> or just start it as your user with systemd instead of enabling it</span>
systemctl start docker</pre></div>
<p dir="auto"><h2 tabindex="-1" dir="auto">More Questions and Answers</h2><a id="user-content-more-questions-and-answers" aria-label="Permalink: More Questions and Answers" href="#more-questions-and-answers"></a></p>
<p dir="auto">Big thank you to our contributors who have worked out almost every conceivable issue so far!</p>
<p dir="auto"><a href="https://github.com/sickcodes/Docker-OSX/blob/master/CREDITS.md">https://github.com/sickcodes/Docker-OSX/blob/master/CREDITS.md</a></p>
<p dir="auto"><h3 tabindex="-1" dir="auto">Start the same container later (persistent disk)</h3><a id="user-content-start-the-same-container-later-persistent-disk" aria-label="Permalink: Start the same container later (persistent disk)" href="#start-the-same-container-later-persistent-disk"></a></p>
<p dir="auto">Created a container with <code>docker run</code> and want to reuse the underlying image again later?</p>
<p dir="auto">NB: see <a href="#container-creation-examples">container creation examples</a> first for how to get to the point where this is applicable.</p>
<p dir="auto">This is for when you want to run the SAME container again later. You may need to use <code>docker commit</code> to save your container before you can reuse it. Check if your container is persisted with <code>docker ps --all</code>.</p>
<p dir="auto">If you don't run this you will have a new image every time.</p>
<div dir="auto" data-snippet-clipboard-copy-content="# look at your recent containers and copy the CONTAINER ID
docker ps --all

# docker start the container ID
docker start -ai abc123xyz567

# if you have many containers, you can try automate it with filters like this
# docker ps --all --filter &quot;ancestor=sickcodes/docker-osx&quot;
# for locally tagged/built containers
# docker ps --all --filter &quot;ancestor=docker-osx&quot;
"><pre><span><span>#</span> look at your recent containers and copy the CONTAINER ID</span>
docker ps --all

<span><span>#</span> docker start the container ID</span>
docker start -ai abc123xyz567

<span><span>#</span> if you have many containers, you can try automate it with filters like this</span>
<span><span>#</span> docker ps --all --filter "ancestor=sickcodes/docker-osx"</span>
<span><span>#</span> for locally tagged/built containers</span>
<span><span>#</span> docker ps --all --filter "ancestor=docker-osx"</span>
</pre></div>
<p dir="auto">You can also pull the <code>.img</code> file out of the container, which is stored in <code>/var/lib/docker</code>, and supply it as a runtime argument to the <code>:naked</code> Docker image.</p>
<p dir="auto">See also: <a href="https://github.com/sickcodes/Docker-OSX/issues/197" data-hovercard-type="issue" data-hovercard-url="/sickcodes/Docker-OSX/issues/197/hovercard">here</a>.</p>
<p dir="auto"><h3 tabindex="-1" dir="auto">I have used Docker-OSX before and want to restart a container that starts automatically</h3><a id="user-content-i-have-used-docker-osx-before-and-want-to-restart-a-container-that-starts-automatically" aria-label="Permalink: I have used Docker-OSX before and want to restart a container that starts automatically" href="#i-have-used-docker-osx-before-and-want-to-restart-a-container-that-starts-automatically"></a></p>
<p dir="auto">Containers that use <code>sickcodes/docker-osx:auto</code> can be stopped while being started.</p>
<div dir="auto" data-snippet-clipboard-copy-content="# find last container
docker ps -a

# docker start old container with -i for interactive, -a for attach STDIN/STDOUT
docker start -ai -i <Replace this with your ID>"><pre><span><span>#</span> find last container</span>
docker ps -a

<span><span>#</span> docker start old container with -i for interactive, -a for attach STDIN/STDOUT</span>
docker start -ai -i <span>&lt;</span>Replace this with your ID<span>&gt;</span></pre></div>
<p dir="auto"><h3 tabindex="-1" dir="auto">LibGTK errors "connection refused"</h3><a id="user-content-libgtk-errors-connection-refused" aria-label="Permalink: LibGTK errors &quot;connection refused&quot;" href="#libgtk-errors-connection-refused"></a></p>
<p dir="auto">You may see one or more libgtk-related errors if you do not have everything set up for hardware virtualisation yet. If you have not yet done so, check out the <a href="#initial-setup">initial setup</a> section and the <a href="#routine-checks">routine checks</a> section as you may have missed a setup step or may not have all the needed Docker dependencies ready to go.</p>
<p dir="auto">See also: <a href="https://github.com/sickcodes/Docker-OSX/issues/174" data-hovercard-type="issue" data-hovercard-url="/sickcodes/Docker-OSX/issues/174/hovercard">here</a>.</p>
<p dir="auto"><h4 tabindex="-1" dir="auto">Permissions denied error</h4><a id="user-content-permissions-denied-error" aria-label="Permalink: Permissions denied error" href="#permissions-denied-error"></a></p>
<p dir="auto">If you have not yet set up xhost, try the following:</p>
<div dir="auto" data-snippet-clipboard-copy-content="echo $DISPLAY

# ARCH
sudo pacman -S xorg-xhost

# UBUNTU DEBIAN
sudo apt install x11-xserver-utils

# CENTOS RHEL FEDORA
sudo yum install xorg-x11-server-utils

# then run
xhost +
"><pre><span>echo</span> <span>$DISPLAY</span>

<span><span>#</span> ARCH</span>
sudo pacman -S xorg-xhost

<span><span>#</span> UBUNTU DEBIAN</span>
sudo apt install x11-xserver-utils

<span><span>#</span> CENTOS RHEL FEDORA</span>
sudo yum install xorg-x11-server-utils

<span><span>#</span> then run</span>
xhost +
</pre></div>
<p dir="auto"><h3 tabindex="-1" dir="auto">RAM over-allocation</h3><a id="user-content-ram-over-allocation" aria-label="Permalink: RAM over-allocation" href="#ram-over-allocation"></a></p>
<p dir="auto">You cannot allocate more RAM than your machine has. The default is 3 Gigabytes: <code>-e RAM=3</code>.</p>
<p dir="auto">If you are trying to allocate more RAM to the container than you currently have available, you may see an error like the following: <code>cannot set up guest memory 'pc.ram': Cannot allocate memory</code>. See also: <a href="https://github.com/sickcodes/Docker-OSX/issues/188" data-hovercard-type="issue" data-hovercard-url="/sickcodes/Docker-OSX/issues/188/hovercard">here</a>, <a href="https://github.com/sickcodes/Docker-OSX/pull/189" data-hovercard-type="pull_request" data-hovercard-url="/sickcodes/Docker-OSX/pull/189/hovercard">here</a>.</p>
<p dir="auto">For example (below) the <code>buff/cache</code> already contains 20 Gigabytes of allocated RAM:</p>
<div dir="auto" data-snippet-clipboard-copy-content="[user@hostname ~]$ free -mh
               total        used        free      shared  buff/cache   available
Mem:            30Gi       3.5Gi       7.0Gi       728Mi        20Gi        26Gi
Swap:           11Gi          0B        11Gi"><pre><span>[user@hostname ~]</span>$ <span>free -mh</span>
<span>               total        used        free      shared  buff/cache   available</span>
<span>Mem:            30Gi       3.5Gi       7.0Gi       728Mi        20Gi        26Gi</span>
<span>Swap:           11Gi          0B        11Gi</span></pre></div>
<p dir="auto">Clear the buffer and the cache:</p>
<div dir="auto" data-snippet-clipboard-copy-content="sudo tee /proc/sys/vm/drop_caches <<< 3"><pre>sudo tee /proc/sys/vm/drop_caches <span>&lt;&lt;&lt;</span> <span>3</span></pre></div>
<p dir="auto">Now check the RAM again:</p>
<div dir="auto" data-snippet-clipboard-copy-content="[user@hostname ~]$ free -mh
               total        used        free      shared  buff/cache   available
Mem:            30Gi       3.3Gi        26Gi       697Mi       1.5Gi        26Gi
Swap:           11Gi          0B        11Gi"><pre><span>[user@hostname ~]</span>$ <span>free -mh</span>
<span>               total        used        free      shared  buff/cache   available</span>
<span>Mem:            30Gi       3.3Gi        26Gi       697Mi       1.5Gi        26Gi</span>
<span>Swap:           11Gi          0B        11Gi</span></pre></div>
<p dir="auto"><h3 tabindex="-1" dir="auto">PulseAudio</h3><a id="user-content-pulseaudio" aria-label="Permalink: PulseAudio" href="#pulseaudio"></a></p>
<p dir="auto"><h4 tabindex="-1" dir="auto">Use PulseAudio for sound</h4><a id="user-content-use-pulseaudio-for-sound" aria-label="Permalink: Use PulseAudio for sound" href="#use-pulseaudio-for-sound"></a></p>
<p dir="auto">Note: <a href="https://github.com/acidanthera/AppleALC">AppleALC</a>, <a href="https://dortania.github.io/OpenCore-Post-Install/universal/audio.html" rel="nofollow"><code>alcid</code></a> and <a href="https://github.com/chris1111/VoodooHDA-OC">VoodooHDA-OC</a> do not have <a href="https://osy.gitbook.io/hac-mini-guide/details/hda-fix#hda-codec" rel="nofollow">codec support</a>. However, <a href="https://github.com/vulgo/IORegistryExplorer">IORegistryExplorer</a> does show the controller component working.</p>
<div dir="auto" data-snippet-clipboard-copy-content="docker run \
    --device /dev/kvm \
    -e AUDIO_DRIVER=pa,server=unix:/tmp/pulseaudio.socket \
    -v &quot;/run/user/$(id -u)/pulse/native:/tmp/pulseaudio.socket&quot; \
    -v /tmp/.X11-unix:/tmp/.X11-unix \
    sickcodes/docker-osx"><pre>docker run \
    --device /dev/kvm \
    -e AUDIO_DRIVER=pa,server=unix:/tmp/pulseaudio.socket \
    -v <span><span>"</span>/run/user/<span><span>$(</span>id -u<span>)</span></span>/pulse/native:/tmp/pulseaudio.socket<span>"</span></span> \
    -v /tmp/.X11-unix:/tmp/.X11-unix \
    sickcodes/docker-osx</pre></div>
<p dir="auto"><h4 tabindex="-1" dir="auto">PulseAudio debugging</h4><a id="user-content-pulseaudio-debugging" aria-label="Permalink: PulseAudio debugging" href="#pulseaudio-debugging"></a></p>
<div dir="auto" data-snippet-clipboard-copy-content="docker run \
    --device /dev/kvm \
    -e AUDIO_DRIVER=pa,server=unix:/tmp/pulseaudio.socket \
    -v &quot;/run/user/$(id -u)/pulse/native:/tmp/pulseaudio.socket&quot; \
    -v /tmp/.X11-unix:/tmp/.X11-unix \
    -e PULSE_SERVER=unix:/tmp/pulseaudio.socket \
    sickcodes/docker-osx pactl list"><pre>docker run \
    --device /dev/kvm \
    -e AUDIO_DRIVER=pa,server=unix:/tmp/pulseaudio.socket \
    -v <span><span>"</span>/run/user/<span><span>$(</span>id -u<span>)</span></span>/pulse/native:/tmp/pulseaudio.socket<span>"</span></span> \
    -v /tmp/.X11-unix:/tmp/.X11-unix \
    -e PULSE_SERVER=unix:/tmp/pulseaudio.socket \
    sickcodes/docker-osx pactl list</pre></div>
<p dir="auto"><h4 tabindex="-1" dir="auto">PulseAudio with WSLg</h4><a id="user-content-pulseaudio-with-wslg" aria-label="Permalink: PulseAudio with WSLg" href="#pulseaudio-with-wslg"></a></p>
<div dir="auto" data-snippet-clipboard-copy-content="docker run \
    --device /dev/kvm \
    -e AUDIO_DRIVER=pa,server=unix:/tmp/pulseaudio.socket \
    -v /mnt/wslg/runtime-dir/pulse/native:/tmp/pulseaudio.socket \
    -v /mnt/wslg/.X11-unix:/tmp/.X11-unix \
    sickcodes/docker-osx"><pre>docker run \
    --device /dev/kvm \
    -e AUDIO_DRIVER=pa,server=unix:/tmp/pulseaudio.socket \
    -v /mnt/wslg/runtime-dir/pulse/native:/tmp/pulseaudio.socket \
    -v /mnt/wslg/.X11-unix:/tmp/.X11-unix \
    sickcodes/docker-osx</pre></div>
<p dir="auto"><h3 tabindex="-1" dir="auto">Forward additional ports (nginx hosting example)</h3><a id="user-content-forward-additional-ports-nginx-hosting-example" aria-label="Permalink: Forward additional ports (nginx hosting example)" href="#forward-additional-ports-nginx-hosting-example"></a></p>
<p dir="auto">It's possible to forward additional ports depending on your needs. In this example, we'll use Mac OSX to host nginx:</p>
<div data-snippet-clipboard-copy-content="host:10023 <-> 10023:container:10023 <-> 80:guest"><pre><code>host:10023 &lt;-&gt; 10023:container:10023 &lt;-&gt; 80:guest
</code></pre></div>
<p dir="auto">On the host machine, run:</p>
<div dir="auto" data-snippet-clipboard-copy-content="docker run -it \
    --device /dev/kvm \
    -p 50922:10022 \
    -e ADDITIONAL_PORTS='hostfwd=tcp::10023-:80,' \
    -p 10023:10023 \
    sickcodes/docker-osx:auto"><pre>docker run -it \
    --device /dev/kvm \
    -p 50922:10022 \
    -e ADDITIONAL_PORTS=<span><span>'</span>hostfwd=tcp::10023-:80,<span>'</span></span> \
    -p 10023:10023 \
    sickcodes/docker-osx:auto</pre></div>
<p dir="auto">In a Terminal session running the container, run:</p>
<div dir="auto" data-snippet-clipboard-copy-content="/bin/bash -c &quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)&quot;

brew install nginx
sudo sed -i -e 's/8080/80/' /usr/local/etc/nginx/nginx.confcd
# sudo nginx -s stop
sudo nginx"><pre>/bin/bash -c <span><span>"</span><span><span>$(</span>curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh<span>)</span></span><span>"</span></span>

brew install nginx
sudo sed -i -e <span><span>'</span>s/8080/80/<span>'</span></span> /usr/local/etc/nginx/nginx.confcd
<span><span>#</span> sudo nginx -s stop</span>
sudo nginx</pre></div>
<p dir="auto"><strong>nginx should now be reachable on port 10023.</strong></p>
<p dir="auto">Additionally, you can string multiple statements together, for example:</p>
<div dir="auto" data-snippet-clipboard-copy-content="    -e ADDITIONAL_PORTS='hostfwd=tcp::10023-:80,hostfwd=tcp::10043-:443,'
    -p 10023:10023 \
    -p 10043:10043 \"><pre>    -e ADDITIONAL_PORTS=<span><span>'</span>hostfwd=tcp::10023-:80,hostfwd=tcp::10043-:443,<span>'</span></span>
    -p 10023:10023 \
    -p 10043:10043 \</pre></div>
<p dir="auto"><h3 tabindex="-1" dir="auto">Bridged networking</h3><a id="user-content-bridged-networking" aria-label="Permalink: Bridged networking" href="#bridged-networking"></a></p>
<p dir="auto">You might not need to do anything with the default setup to enable internet connectivity from inside the container. Additionally, <code>curl</code> may work even if <code>ping</code> doesn't.</p>
<p dir="auto">See discussion <a href="https://github.com/sickcodes/Docker-OSX/issues/177" data-hovercard-type="issue" data-hovercard-url="/sickcodes/Docker-OSX/issues/177/hovercard">here</a> and <a href="https://github.com/sickcodes/Docker-OSX/issues/72" data-hovercard-type="issue" data-hovercard-url="/sickcodes/Docker-OSX/issues/72/hovercard">here</a> and <a href="https://github.com/sickcodes/Docker-OSX/issues/88" data-hovercard-type="issue" data-hovercard-url="/sickcodes/Docker-OSX/issues/88/hovercard">here</a>.</p>
<p dir="auto"><h3 tabindex="-1" dir="auto">Enable IPv4 forwarding for bridged network connections for remote installations</h3><a id="user-content-enable-ipv4-forwarding-for-bridged-network-connections-for-remote-installations" aria-label="Permalink: Enable IPv4 forwarding for bridged network connections for remote installations" href="#enable-ipv4-forwarding-for-bridged-network-connections-for-remote-installations"></a></p>
<p dir="auto">This is not required for LOCAL installations.</p>
<p dir="auto">Additionally note it may <a href="https://sick.codes/cve-2020-15590/" rel="nofollow">cause the host to leak your IP, even if you're using a VPN in the container</a>.</p>
<p dir="auto">However, if you're trying to connect to an instance of Docker-OSX remotely (e.g. an instance of Docker-OSX hosted in a datacenter), this may improve your performance:</p>
<div dir="auto" data-snippet-clipboard-copy-content="# enable for current session
sudo sysctl -w net.ipv4.ip_forward=1

# OR
# sudo tee /proc/sys/net/ipv4/ip_forward <<< 1

# enable permanently
sudo touch /etc/sysctl.conf
sudo tee -a /etc/sysctl.conf <<EOF
net.ipv4.ip_forward = 1
EOF

# or edit manually with the editor of your choice
nano /etc/sysctl.conf || vi /etc/sysctl.conf || vim /etc/sysctl.conf

# now reboot"><pre><span><span>#</span> enable for current session</span>
sudo sysctl -w net.ipv4.ip_forward=1

<span><span>#</span> OR</span>
<span><span>#</span> sudo tee /proc/sys/net/ipv4/ip_forward &lt;&lt;&lt; 1</span>

<span><span>#</span> enable permanently</span>
sudo touch /etc/sysctl.conf
sudo tee -a /etc/sysctl.conf <span><span>&lt;&lt;</span><span>EOF</span></span>
<span>net.ipv4.ip_forward = 1</span>
<span><span>EOF</span></span>

<span><span>#</span> or edit manually with the editor of your choice</span>
nano /etc/sysctl.conf <span>||</span> vi /etc/sysctl.conf <span>||</span> vim /etc/sysctl.conf

<span><span>#</span> now reboot</span></pre></div>
<p dir="auto"><h2 tabindex="-1" dir="auto">Share folder with Docker-OSX QEMU macOS</h2></p>
<p dir="auto">Sharing a folder with guest is quite simple.</p>
<p dir="auto">Your folder, will go to /mnt/hostshare inside the Arch container which is then passed over QEMU.</p>
<p dir="auto">Then mount using <code>sudo -S mount_9p hostshare</code> from inside the mac.</p>
<p dir="auto">For example,</p>

<div dir="auto" data-snippet-clipboard-copy-content="    -v &quot;${FOLDER}:/mnt/hostshare&quot; \
    -e EXTRA=&quot;-virtfs local,path=/mnt/hostshare,mount_tag=hostshare,security_model=passthrough,id=hostshare&quot; \"><pre>    -v <span><span>"</span><span>${FOLDER}</span>:/mnt/hostshare<span>"</span></span> \
    -e EXTRA=<span><span>"</span>-virtfs local,path=/mnt/hostshare,mount_tag=hostshare,security_model=passthrough,id=hostshare<span>"</span></span> \</pre></div>
<p dir="auto">Full example:</p>
<div dir="auto" data-snippet-clipboard-copy-content="# stat mac_hdd_ng.img
SHARE=~/somefolder

docker run -it \
    --device /dev/kvm \
    -p 50922:10022 \
    -v /tmp/.X11-unix:/tmp/.X11-unix \
    -e &quot;DISPLAY=${DISPLAY:-:0.0}&quot; \
    -v &quot;${PWD}/mac_hdd_ng.img:/home/arch/OSX-KVM/mac_hdd_ng.img&quot; \
    -v &quot;${SHARE}:/mnt/hostshare&quot; \
    -e EXTRA=&quot;-virtfs local,path=/mnt/hostshare,mount_tag=hostshare,security_model=passthrough,id=hostshare&quot; \
    sickcodes/docker-osx:latest

# !!! Open Terminal inside macOS and run the following command to mount the virtual file system
# sudo -S mount_9p hostshare
"><pre><span><span>#</span> stat mac_hdd_ng.img</span>
SHARE=<span>~</span>/somefolder

docker run -it \
    --device /dev/kvm \
    -p 50922:10022 \
    -v /tmp/.X11-unix:/tmp/.X11-unix \
    -e <span><span>"</span>DISPLAY=<span>${DISPLAY<span>:-:</span>0.0}</span><span>"</span></span> \
    -v <span><span>"</span><span>${PWD}</span>/mac_hdd_ng.img:/home/arch/OSX-KVM/mac_hdd_ng.img<span>"</span></span> \
    -v <span><span>"</span><span>${SHARE}</span>:/mnt/hostshare<span>"</span></span> \
    -e EXTRA=<span><span>"</span>-virtfs local,path=/mnt/hostshare,mount_tag=hostshare,security_model=passthrough,id=hostshare<span>"</span></span> \
    sickcodes/docker-osx:latest

<span><span>#</span> !!! Open Terminal inside macOS and run the following command to mount the virtual file system</span>
<span><span>#</span> sudo -S mount_9p hostshare</span>
</pre></div>
<p dir="auto"><h3 tabindex="-1" dir="auto">Share Linux NFS Drive into macOS</h3></p>
<p dir="auto">To share a folder using NFS, setup a folder for on the host machine, for example, <code>/srv/nfs/share</code> and then append to <code>/etc/exports</code>:</p>
<div dir="auto" data-snippet-clipboard-copy-content="/srv/nfs/share      127.0.0.1/0(insecure,rw,all_squash,anonuid=1000,anongid=985,no_subtree_check)"><pre>/srv/nfs/share      127.0.0.1/0(insecure,rw,all_squash,anonuid=1000,anongid=985,no_subtree_check)</pre></div>
<p dir="auto">You may need to reload exports now, which will begin sharing that directory.</p>
<div dir="auto" data-snippet-clipboard-copy-content="# reload shared folders
sudo exportfs -arv"><pre><span><span>#</span> reload shared folders</span>
sudo exportfs -arv</pre></div>
<p dir="auto"><a href="https://serverfault.com/questions/716350/mount-nfs-volume-on-ubuntu-linux-server-from-macos-client" rel="nofollow">Source &amp; Explanation</a></p>
<p dir="auto">Give permissions on the shared folder for the <code>anonuid</code> and <code>anongid</code>, where <code>anonuid</code> and <code>anongid</code> matches that of your linux user; <code>id -u</code></p>
<p dir="auto"><code>id -u ; id -g</code> will print <code>userid:groupid</code></p>
<div data-snippet-clipboard-copy-content="chown 1000:985 /srv/nfs/share
chmod u+rwx /srv/nfs/share"><pre><code>chown 1000:985 /srv/nfs/share
chmod u+rwx /srv/nfs/share
</code></pre></div>
<p dir="auto">Start the Docker-OSX container with the additional flag <code>--network host</code></p>
<p dir="auto">Create and mount the nfs folder from the mac terminal:</p>
<div data-snippet-clipboard-copy-content="mkdir -p ~/mnt
sudo mount_nfs -o locallocks 10.0.2.2:/srv/nfs/share ~/mnt"><pre><code>mkdir -p ~/mnt
sudo mount_nfs -o locallocks 10.0.2.2:/srv/nfs/share ~/mnt
</code></pre></div>
<p dir="auto"><h3 tabindex="-1" dir="auto">Share USB Drive into macOS over QEMU</h3></p>
<p dir="auto"><h2 tabindex="-1" dir="auto">Mount USB Drive (Hotplug/Hot Plug USB)</h2><a id="user-content-mount-usb-drive-hotplughot-plug-usb" aria-label="Permalink: Mount USB Drive (Hotplug/Hot Plug USB)" href="#mount-usb-drive-hotplughot-plug-usb"></a></p>
<p dir="auto">Start your container.</p>
<p dir="auto">Pick a port, for example, <code>7700</code>.</p>
<p dir="auto"><code>lsusb</code> to get <code>vid:pid</code></p>
<p dir="auto">On Linux:
<code>sudo usbredirserver -p 7700 1e3d:2096</code></p>
<p dir="auto">Now, in the Docker window hit Enter to see the <code>(qemu)</code> console.</p>
<p dir="auto">You can add/remove the disk using commands like this, even once the machine is started:</p>
<p dir="auto"><code>chardev-add socket,id=usbredirchardev1,port=7700,host=172.17.0.1</code></p>
<p dir="auto"><code>device_add usb-redir,chardev=usbredirchardev1,id=usbredirdev1,debug=4</code></p>
<p dir="auto"><h2 tabindex="-1" dir="auto">Mount USB Drive inside macOS at boot Docker OSX</h2><a id="user-content-mount-usb-drive-inside-macos-at-boot-docker-osx" aria-label="Permalink: Mount USB Drive inside macOS at boot Docker OSX" href="#mount-usb-drive-inside-macos-at-boot-docker-osx"></a></p>
<div dir="auto" data-snippet-clipboard-copy-content="PORT=7700
IP_ADDRESS=172.17.0.1

-e EXTRA=&quot;-chardev socket,id=usbredirchardev1,port=${PORT},host=${IP_ADDRESS} -device usb-redir,chardev=usbredirchardev1,id=usbredirdev1,debug=4&quot; \`"><pre>PORT=7700
IP_ADDRESS=172.17.0.1

-e EXTRA=<span><span>"</span>-chardev socket,id=usbredirchardev1,port=<span>${PORT}</span>,host=<span>${IP_ADDRESS}</span> -device usb-redir,chardev=usbredirchardev1,id=usbredirdev1,debug=4<span>"</span></span> <span>\`</span></pre></div>
<p dir="auto"><h3 tabindex="-1" dir="auto">Fedora: enable internet connectivity with a bridged network</h3><a id="user-content-fedora-enable-internet-connectivity-with-a-bridged-network" aria-label="Permalink: Fedora: enable internet connectivity with a bridged network" href="#fedora-enable-internet-connectivity-with-a-bridged-network"></a></p>
<p dir="auto">Fedora's default firewall settings may prevent Docker's network interface from reaching the internet. In order to resolve this, you will need to whitelist the interface in your firewall:</p>
<div dir="auto" data-snippet-clipboard-copy-content="# Set the docker0 bridge to the trusted zone
sudo firewall-cmd --permanent --zone=trusted --add-interface=docker0
sudo firewall-cmd --reload"><pre><span><span>#</span> Set the docker0 bridge to the trusted zone</span>
sudo firewall-cmd --permanent --zone=trusted --add-interface=docker0
sudo firewall-cmd --reload</pre></div>
<p dir="auto"><h3 tabindex="-1" dir="auto">Nested Hardware Virtualization</h3><a id="user-content-nested-hardware-virtualization" aria-label="Permalink: Nested Hardware Virtualization" href="#nested-hardware-virtualization"></a></p>
<p dir="auto">Check if your machine has hardware virtualization enabled:</p>
<div dir="auto" data-snippet-clipboard-copy-content="sudo tee /sys/module/kvm/parameters/ignore_msrs <<< 1

egrep -c '(svm|vmx)' /proc/cpuinfo"><pre>sudo tee /sys/module/kvm/parameters/ignore_msrs <span>&lt;&lt;&lt;</span> <span>1</span>

egrep -c <span><span>'</span>(svm|vmx)<span>'</span></span> /proc/cpuinfo</pre></div>
<p dir="auto"><h3 tabindex="-1" dir="auto">Virtual network adapters</h3><a id="user-content-virtual-network-adapters" aria-label="Permalink: Virtual network adapters" href="#virtual-network-adapters"></a></p>
<p dir="auto"><h4 tabindex="-1" dir="auto">Fast internet connectivity</h4><a id="user-content-fast-internet-connectivity" aria-label="Permalink: Fast internet connectivity" href="#fast-internet-connectivity"></a></p>
<p dir="auto"><code>-e NETWORKING=vmxnet3</code></p>
<p dir="auto"><h4 tabindex="-1" dir="auto">Slow internet connectivity</h4><a id="user-content-slow-internet-connectivity" aria-label="Permalink: Slow internet connectivity" href="#slow-internet-connectivity"></a></p>
<p dir="auto"><code>-e NETWORKING=e1000-82545em</code></p>
<p dir="auto"><h3 tabindex="-1" dir="auto">CI/CD Related Improvements</h3><a id="user-content-cicd-related-improvements" aria-label="Permalink: CI/CD Related Improvements" href="#cicd-related-improvements"></a></p>
<p dir="auto"><h4 tabindex="-1" dir="auto">Tips for reducing the size of the image</h4><a id="user-content-tips-for-reducing-the-size-of-the-image" aria-label="Permalink: Tips for reducing the size of the image" href="#tips-for-reducing-the-size-of-the-image"></a></p>
<ul dir="auto">
<li>Start the container as usual, and remove unnecessary files. A useful way
to do this is to use <code>du -sh *</code> starting from the <code>/</code> directory, and find
large directories where files can be removed. E.g. unnecessary cached files,
Xcode platforms, etc.</li>
<li>Once you are satisfied with the amount of free space, enable trim with <code>sudo trimforce enable</code>, and reboot.</li>
<li>Zero out the empty space on the disk with <code>dd if=/dev/zero of=./empty &amp;&amp; rm -f empty</code></li>
<li>Shut down the VM and copy out the qcow image with <code>docker cp stoppedcontainer:/home/arch/OSX-KVM/mac_hdd_ng.img .</code></li>
<li>Run <code>qemu-img check -r all mac_hdd_ng.img</code> to fix any errors.</li>
<li>Run <code>qemu-img convert -O qcow2 mac_hdd_ng.img deduped.img</code> and check for errors again</li>
<li><strong>OPTIONAL:</strong> Run <code>qemu-img convert -c -O qcow2 deduped.img compressed.img</code> to further compress the image. This may reduce the runtime speed though, but it should reduce the size by roughly 25%.</li>
<li>Check for errors again, and build a fresh docker image. E.g. with this Dockerfile</li>
</ul>
<div data-snippet-clipboard-copy-content="FROM sickcodes/docker-osx
USER arch
COPY --chown=arch ./deduped.img /home/arch/OSX-KVM/mac_hdd_ng.img"><pre><code>FROM sickcodes/docker-osx
USER arch
COPY --chown=arch ./deduped.img /home/arch/OSX-KVM/mac_hdd_ng.img
</code></pre></div>
<p dir="auto"><h3 tabindex="-1" dir="auto">Run Docker-OSX headlessly with Telnet</h3><a id="user-content-run-docker-osx-headlessly-with-telnet" aria-label="Permalink: Run Docker-OSX headlessly with Telnet" href="#run-docker-osx-headlessly-with-telnet"></a></p>
<p dir="auto">First make sure <a href="#autoboot-into-osx-after-youve-installed-everything">autoboot is enabled</a></p>
<p dir="auto">Next, you will want to set up SSH to be automatically started.</p>
<div dir="auto" data-snippet-clipboard-copy-content="sudo systemsetup -setremotelogin on"><pre>sudo systemsetup -setremotelogin on</pre></div>
<p dir="auto">Make sure to commit the new docker image and save it, or rebuild as described in the <a href="#how-to-reduce-the-size-of-the-image">section on reducing disk space</a>.</p>
<p dir="auto">Then run it with these arguments.</p>
<div dir="auto" data-snippet-clipboard-copy-content="# Run with the -nographic flag, and enable a telnet interface
  docker run \
    --device /dev/kvm \
    -p 50922:10022 \
    -e &quot;DISPLAY=${DISPLAY:-:0.0}&quot; \
    -e EXTRA=&quot;-monitor telnet::45454,server,nowait -nographic -serial null&quot; \
    mycustomimage"><pre><span><span>#</span> Run with the -nographic flag, and enable a telnet interface</span>
  docker run \
    --device /dev/kvm \
    -p 50922:10022 \
    -e <span><span>"</span>DISPLAY=<span>${DISPLAY<span>:-:</span>0.0}</span><span>"</span></span> \
    -e EXTRA=<span><span>"</span>-monitor telnet::45454,server,nowait -nographic -serial null<span>"</span></span> \
    mycustomimage</pre></div>
<p dir="auto"><h3 tabindex="-1" dir="auto">What mirrors are appropriate to use to build Docker-OSX locally?</h3><a id="user-content-what-mirrors-are-appropriate-to-use-to-build-docker-osx-locally" aria-label="Permalink: What mirrors are appropriate to use to build Docker-OSX locally?" href="#what-mirrors-are-appropriate-to-use-to-build-docker-osx-locally"></a></p>
<p dir="auto">If you are building Docker-OSX locally, you'll probably want to use Arch Linux's mirrors.</p>
<p dir="auto">Mirror locations can be found here (uses two-letter country codes): <a href="https://archlinux.org/mirrorlist/all/" rel="nofollow">https://archlinux.org/mirrorlist/all/</a></p>
<div dir="auto" data-snippet-clipboard-copy-content="docker build -t docker-osx:latest \
    --build-arg RANKMIRRORS=true \
    --build-arg MIRROR_COUNTRY=US \
    --build-arg MIRROR_COUNT=10 \
    --build-arg SHORTNAME=catalina \
    --build-arg SIZE=200G ."><pre>docker build -t docker-osx:latest \
    --build-arg RANKMIRRORS=true \
    --build-arg MIRROR_COUNTRY=US \
    --build-arg MIRROR_COUNT=10 \
    --build-arg SHORTNAME=catalina \
    --build-arg SIZE=200G <span>.</span></pre></div>
<p dir="auto"><h3 tabindex="-1" dir="auto">Custom QEMU Arguments (passthrough devices)</h3><a id="user-content-custom-qemu-arguments-passthrough-devices" aria-label="Permalink: Custom QEMU Arguments (passthrough devices)" href="#custom-qemu-arguments-passthrough-devices"></a></p>
<p dir="auto">Pass any devices/directories to the Docker container &amp; the QEMU arguments using the handy runtime argument provider option <code>-e EXTRA=</code>.</p>
<div dir="auto" data-snippet-clipboard-copy-content="# example customizations
docker run \
    -e RAM=4 \
    -e SMP=4 \
    -e CORES=4 \
    -e EXTRA='-usb -device usb-host,hostbus=1,hostaddr=8' \
    -e INTERNAL_SSH_PORT=23 \
    -e MAC_ADDRESS=&quot;$(xxd -c1 -p -l 6 /dev/urandom | tr '\n' ':' | cut -c1-17)&quot; \
    -e AUDIO_DRIVER=alsa \
    -e IMAGE_PATH=/image \
    -e SCREEN_SHARE_PORT=5900 \
    -e DISPLAY=:0 \
    -e NETWORKING=vmxnet3 \
    --device /dev/kvm \
    --device /dev/snd \
    -v /tmp/.X11-unix:/tmp/.X11-unix \
    docker-osx:latest"><pre><span><span>#</span> example customizations</span>
docker run \
    -e RAM=4 \
    -e SMP=4 \
    -e CORES=4 \
    -e EXTRA=<span><span>'</span>-usb -device usb-host,hostbus=1,hostaddr=8<span>'</span></span> \
    -e INTERNAL_SSH_PORT=23 \
    -e MAC_ADDRESS=<span><span>"</span><span><span>$(</span>xxd -c1 -p -l 6 /dev/urandom <span>|</span> tr <span><span>'</span>\n<span>'</span></span> <span><span>'</span>:<span>'</span></span> <span>|</span> cut -c1-17<span>)</span></span><span>"</span></span> \
    -e AUDIO_DRIVER=alsa \
    -e IMAGE_PATH=/image \
    -e SCREEN_SHARE_PORT=5900 \
    -e DISPLAY=:0 \
    -e NETWORKING=vmxnet3 \
    --device /dev/kvm \
    --device /dev/snd \
    -v /tmp/.X11-unix:/tmp/.X11-unix \
    docker-osx:latest</pre></div>
<p dir="auto"><h3 tabindex="-1" dir="auto">Generating serial numbers</h3><a id="user-content-generating-serial-numbers" aria-label="Permalink: Generating serial numbers" href="#generating-serial-numbers"></a></p>
<p dir="auto">Generate serial numbers in <code>./custom</code> OR make docker generate them at runtime (see below).</p>
<p dir="auto">At any time, verify your serial number before logging into iCloud, etc.</p>
<div dir="auto" data-snippet-clipboard-copy-content="# this is a quick way to check your serial number via cli inside OSX
ioreg -l | grep IOPlatformSerialNumber

# test some commands
sshpass -p 'alpine' ssh user@localhost -p 50922 'ping google.com'

# check your serial number
sshpass -p 'alpine' ssh user@localhost -p 50922 'ioreg -l | grep IOPlatformSerialNumber'"><pre><span><span>#</span> this is a quick way to check your serial number via cli inside OSX</span>
ioreg -l <span>|</span> grep IOPlatformSerialNumber

<span><span>#</span> test some commands</span>
sshpass -p <span><span>'</span>alpine<span>'</span></span> ssh user@localhost -p 50922 <span><span>'</span>ping google.com<span>'</span></span>

<span><span>#</span> check your serial number</span>
sshpass -p <span><span>'</span>alpine<span>'</span></span> ssh user@localhost -p 50922 <span><span>'</span>ioreg -l | grep IOPlatformSerialNumber<span>'</span></span></pre></div>
<p dir="auto"><h4 tabindex="-1" dir="auto">Getting started with serial numbers</h4><a id="user-content-getting-started-with-serial-numbers" aria-label="Permalink: Getting started with serial numbers" href="#getting-started-with-serial-numbers"></a></p>
<div dir="auto" data-snippet-clipboard-copy-content="# ARCH
pacman -S libguestfs

# UBUNTU DEBIAN
apt install libguestfs -y

# RHEL FEDORA CENTOS
yum install libguestfs -y"><pre><span><span>#</span> ARCH</span>
pacman -S libguestfs

<span><span>#</span> UBUNTU DEBIAN</span>
apt install libguestfs -y

<span><span>#</span> RHEL FEDORA CENTOS</span>
yum install libguestfs -y</pre></div>
<p dir="auto">Inside the <code>./custom</code> folder you will find <code>4</code> scripts.</p>
<ul dir="auto">
<li><code>config-nopicker-custom.plist</code></li>
<li><code>opencore-image-ng.sh</code></li>
</ul>
<p dir="auto">These two files are from OSX-KVM.</p>
<p dir="auto">You don't need to touch these two files.</p>
<p dir="auto">The config.plist has 5 values replaced with placeholders. <a href="https://github.com/sickcodes/Docker-OSX/blob/master/custom/config-nopicker-custom.plist#L705">Click here to see those values for no reason.</a></p>
<ul dir="auto">
<li><code>generate-unique-machine-values.sh</code>
This script will generate serial numbers, with Mac Addresses, plus output to CSV/TSV, plus make a <code>bootdisk image</code>.</li>
</ul>
<p dir="auto">You can create hundreds, <code>./custom/generate-unique-machine-values.sh --help</code></p>
<div dir="auto" data-snippet-clipboard-copy-content="./custom/generate-unique-machine-values.sh \
    --count 1 \
    --tsv ./serial.tsv \
    --bootdisks \
    --output-bootdisk OpenCore.qcow2 \
    --output-env source.env.sh"><pre>./custom/generate-unique-machine-values.sh \
    --count 1 \
    --tsv ./serial.tsv \
    --bootdisks \
    --output-bootdisk OpenCore.qcow2 \
    --output-env source.env.sh</pre></div>
<p dir="auto">Or if you have some specific serial numbers...</p>
<ul dir="auto">
<li><code>generate-specific-bootdisk.sh</code></li>
</ul>
<div dir="auto" data-snippet-clipboard-copy-content="generate-specific-bootdisk.sh \
    --model &quot;${DEVICE_MODEL}&quot; \
    --serial &quot;${SERIAL}&quot; \
    --board-serial &quot;${BOARD_SERIAL}&quot; \
    --uuid &quot;${UUID}&quot; \
    --mac-address &quot;${MAC_ADDRESS}&quot; \
    --output-bootdisk OpenCore-nopicker.qcow2"><pre>generate-specific-bootdisk.sh \
    --model <span><span>"</span><span>${DEVICE_MODEL}</span><span>"</span></span> \
    --serial <span><span>"</span><span>${SERIAL}</span><span>"</span></span> \
    --board-serial <span><span>"</span><span>${BOARD_SERIAL}</span><span>"</span></span> \
    --uuid <span><span>"</span><span>${UUID}</span><span>"</span></span> \
    --mac-address <span><span>"</span><span>${MAC_ADDRESS}</span><span>"</span></span> \
    --output-bootdisk OpenCore-nopicker.qcow2</pre></div>
<p dir="auto"><h4 tabindex="-1" dir="auto">This example generates a random set of serial numbers at runtime, headlessly</h4><a id="user-content-this-example-generates-a-random-set-of-serial-numbers-at-runtime-headlessly" aria-label="Permalink: This example generates a random set of serial numbers at runtime, headlessly" href="#this-example-generates-a-random-set-of-serial-numbers-at-runtime-headlessly"></a></p>
<div dir="auto" data-snippet-clipboard-copy-content="# proof of concept only, generates random serial numbers, headlessly, and quits right after.
docker run --rm -it \
    --device /dev/kvm \
    -p 50922:10022 \
    -e NOPICKER=true \
    -e GENERATE_UNIQUE=true \
    -e DEVICE_MODEL=&quot;iMacPro1,1&quot; \
    sickcodes/docker-osx:auto

# -e OSX_COMMANDS='ioreg -l | grep IOPlatformSerialNumber' \"><pre><span><span>#</span> proof of concept only, generates random serial numbers, headlessly, and quits right after.</span>
docker run --rm -it \
    --device /dev/kvm \
    -p 50922:10022 \
    -e NOPICKER=true \
    -e GENERATE_UNIQUE=true \
    -e DEVICE_MODEL=<span><span>"</span>iMacPro1,1<span>"</span></span> \
    sickcodes/docker-osx:auto

<span><span>#</span> -e OSX_COMMANDS='ioreg -l | grep IOPlatformSerialNumber' \</span></pre></div>
<p dir="auto"><h4 tabindex="-1" dir="auto">This example generates a specific set of serial numbers at runtime</h4><a id="user-content-this-example-generates-a-specific-set-of-serial-numbers-at-runtime" aria-label="Permalink: This example generates a specific set of serial numbers at runtime" href="#this-example-generates-a-specific-set-of-serial-numbers-at-runtime"></a></p>
<div dir="auto" data-snippet-clipboard-copy-content="# run the same as above 17gb auto image, with SSH, with nopicker, and save the bootdisk for later.
# you don't need to save the bootdisk IF you supply specific serial numbers!

docker run -it \
    --device /dev/kvm \
    -p 50922:10022 \
    -e NOPICKER=true \
    -e GENERATE_SPECIFIC=true \
    -e DEVICE_MODEL=&quot;iMacPro1,1&quot; \
    -e SERIAL=&quot;C02TW0WAHX87&quot; \
    -e BOARD_SERIAL=&quot;C027251024NJG36UE&quot; \
    -e UUID=&quot;5CCB366D-9118-4C61-A00A-E5BAF3BED451&quot; \
    -e MAC_ADDRESS=&quot;A8:5C:2C:9A:46:2F&quot; \
    -e OSX_COMMANDS='ioreg -l | grep IOPlatformSerialNumber' \
    sickcodes/docker-osx:auto"><pre><span><span>#</span> run the same as above 17gb auto image, with SSH, with nopicker, and save the bootdisk for later.</span>
<span><span>#</span> you don't need to save the bootdisk IF you supply specific serial numbers!</span>

docker run -it \
    --device /dev/kvm \
    -p 50922:10022 \
    -e NOPICKER=true \
    -e GENERATE_SPECIFIC=true \
    -e DEVICE_MODEL=<span><span>"</span>iMacPro1,1<span>"</span></span> \
    -e SERIAL=<span><span>"</span>C02TW0WAHX87<span>"</span></span> \
    -e BOARD_SERIAL=<span><span>"</span>C027251024NJG36UE<span>"</span></span> \
    -e UUID=<span><span>"</span>5CCB366D-9118-4C61-A00A-E5BAF3BED451<span>"</span></span> \
    -e MAC_ADDRESS=<span><span>"</span>A8:5C:2C:9A:46:2F<span>"</span></span> \
    -e OSX_COMMANDS=<span><span>'</span>ioreg -l | grep IOPlatformSerialNumber<span>'</span></span> \
    sickcodes/docker-osx:auto</pre></div>
<p dir="auto"><h4 tabindex="-1" dir="auto">This example generates a specific set of serial numbers at runtime, with your existing image, at 1000x1000 display resolution</h4><a id="user-content-this-example-generates-a-specific-set-of-serial-numbers-at-runtime-with-your-existing-image-at-1000x1000-display-resolution" aria-label="Permalink: This example generates a specific set of serial numbers at runtime, with your existing image, at 1000x1000 display resolution" href="#this-example-generates-a-specific-set-of-serial-numbers-at-runtime-with-your-existing-image-at-1000x1000-display-resolution"></a></p>
<div dir="auto" data-snippet-clipboard-copy-content="# run an existing image in current directory, with a screen, with SSH, with nopicker.

stat mac_hdd_ng.img # make sure you have an image if you're using :naked

docker run -it \
    -v &quot;${PWD}/mac_hdd_ng.img:/image&quot; \
    --device /dev/kvm \
    -e &quot;DISPLAY=${DISPLAY:-:0.0}&quot; \
    -v /tmp/.X11-unix:/tmp/.X11-unix \
    -p 50922:10022 \
    -e NOPICKER=true \
    -e GENERATE_SPECIFIC=true \
    -e DEVICE_MODEL=&quot;iMacPro1,1&quot; \
    -e SERIAL=&quot;C02TW0WAHX87&quot; \
    -e BOARD_SERIAL=&quot;C027251024NJG36UE&quot; \
    -e UUID=&quot;5CCB366D-9118-4C61-A00A-E5BAF3BED451&quot; \
    -e MAC_ADDRESS=&quot;A8:5C:2C:9A:46:2F&quot; \
    -e WIDTH=1000 \
    -e HEIGHT=1000 \
    sickcodes/docker-osx:naked"><pre><span><span>#</span> run an existing image in current directory, with a screen, with SSH, with nopicker.</span>

stat mac_hdd_ng.img <span><span>#</span> make sure you have an image if you're using :naked</span>

docker run -it \
    -v <span><span>"</span><span>${PWD}</span>/mac_hdd_ng.img:/image<span>"</span></span> \
    --device /dev/kvm \
    -e <span><span>"</span>DISPLAY=<span>${DISPLAY<span>:-:</span>0.0}</span><span>"</span></span> \
    -v /tmp/.X11-unix:/tmp/.X11-unix \
    -p 50922:10022 \
    -e NOPICKER=true \
    -e GENERATE_SPECIFIC=true \
    -e DEVICE_MODEL=<span><span>"</span>iMacPro1,1<span>"</span></span> \
    -e SERIAL=<span><span>"</span>C02TW0WAHX87<span>"</span></span> \
    -e BOARD_SERIAL=<span><span>"</span>C027251024NJG36UE<span>"</span></span> \
    -e UUID=<span><span>"</span>5CCB366D-9118-4C61-A00A-E5BAF3BED451<span>"</span></span> \
    -e MAC_ADDRESS=<span><span>"</span>A8:5C:2C:9A:46:2F<span>"</span></span> \
    -e WIDTH=1000 \
    -e HEIGHT=1000 \
    sickcodes/docker-osx:naked</pre></div>
<p dir="auto">If you want to generate serial numbers, either make them at runtime using
<code>    -e GENERATE_UNIQUE=true \</code></p>
<p dir="auto">Or you can generate them inside the <code>./custom</code> folder. And then use:</p>
<div dir="auto" data-snippet-clipboard-copy-content="    -e GENERATE_SPECIFIC=true \
    -e SERIAL=&quot;&quot; \
    -e BOARD_SERIAL=&quot;&quot; \
    -e UUID=&quot;&quot; \
    -e MAC_ADDRESS=&quot;&quot; \"><pre>    -e GENERATE_SPECIFIC=true \
    -e SERIAL=<span><span>"</span><span>"</span></span> \
    -e BOARD_SERIAL=<span><span>"</span><span>"</span></span> \
    -e UUID=<span><span>"</span><span>"</span></span> \
    -e MAC_ADDRESS=<span><span>"</span><span>"</span></span> \</pre></div>
<p dir="auto"><h4 tabindex="-1" dir="auto">Making serial numbers persist across reboots</h4><a id="user-content-making-serial-numbers-persist-across-reboots" aria-label="Permalink: Making serial numbers persist across reboots" href="#making-serial-numbers-persist-across-reboots"></a></p>
<div dir="auto" data-snippet-clipboard-copy-content="
stat mac_hdd_ng_testing.img
touch ./output.env

# generate fresh random serial numbers, with a screen, using your own image, and save env file with your new serial numbers for later.

docker run -it \
    --device /dev/kvm \
    -e &quot;DISPLAY=${DISPLAY:-:0.0}&quot; \
    -v /tmp/.X11-unix:/tmp/.X11-unix \
    -p 50922:10022 \
    -e NOPICKER=true \
    -e GENERATE_UNIQUE=true \
    -e GENERATE_SPECIFIC=true \
    -e DEVICE_MODEL=&quot;iMacPro1,1&quot; \
    -v &quot;${PWD}/output.env:/env&quot; \
    -v &quot;${PWD}/mac_hdd_ng_testing.img:/image&quot; \
    sickcodes/docker-osx:naked"><pre>stat mac_hdd_ng_testing.img
touch ./output.env

<span><span>#</span> generate fresh random serial numbers, with a screen, using your own image, and save env file with your new serial numbers for later.</span>

docker run -it \
    --device /dev/kvm \
    -e <span><span>"</span>DISPLAY=<span>${DISPLAY<span>:-:</span>0.0}</span><span>"</span></span> \
    -v /tmp/.X11-unix:/tmp/.X11-unix \
    -p 50922:10022 \
    -e NOPICKER=true \
    -e GENERATE_UNIQUE=true \
    -e GENERATE_SPECIFIC=true \
    -e DEVICE_MODEL=<span><span>"</span>iMacPro1,1<span>"</span></span> \
    -v <span><span>"</span><span>${PWD}</span>/output.env:/env<span>"</span></span> \
    -v <span><span>"</span><span>${PWD}</span>/mac_hdd_ng_testing.img:/image<span>"</span></span> \
    sickcodes/docker-osx:naked</pre></div>
<p dir="auto">To use iMessage or iCloud you need to change <code>5</code> values.</p>
<ul dir="auto">
<li><code>SERIAL</code></li>
<li><code>BOARD_SERIAL</code></li>
<li><code>UUID</code></li>
<li><code>MAC_ADDRESS</code></li>
</ul>
<p dir="auto"><em><code>ROM</code> is just the lowercased mac address, without <code>:</code> between each word.</em></p>
<p dir="auto">You can tell the container to generate them for you using <code>-e GENERATE_UNIQUE=true</code></p>
<p dir="auto">Or tell the container to use specific ones using <code>-e GENERATE_SPECIFIC=true</code></p>
<div dir="auto" data-snippet-clipboard-copy-content="    -e GENERATE_SPECIFIC=true \
    -e DEVICE_MODEL=&quot;iMacPro1,1&quot; \
    -e SERIAL=&quot;C02TW0WAHX87&quot; \
    -e BOARD_SERIAL=&quot;C027251024NJG36UE&quot; \
    -e UUID=&quot;5CCB366D-9118-4C61-A00A-E5BAF3BED451&quot; \
    -e MAC_ADDRESS=&quot;A8:5C:2C:9A:46:2F&quot; \"><pre>    -e GENERATE_SPECIFIC=true \
    -e DEVICE_MODEL=<span><span>"</span>iMacPro1,1<span>"</span></span> \
    -e SERIAL=<span><span>"</span>C02TW0WAHX87<span>"</span></span> \
    -e BOARD_SERIAL=<span><span>"</span>C027251024NJG36UE<span>"</span></span> \
    -e UUID=<span><span>"</span>5CCB366D-9118-4C61-A00A-E5BAF3BED451<span>"</span></span> \
    -e MAC_ADDRESS=<span><span>"</span>A8:5C:2C:9A:46:2F<span>"</span></span> \</pre></div>
<p dir="auto"><h3 tabindex="-1" dir="auto">Changing display resolution</h3><a id="user-content-changing-display-resolution" aria-label="Permalink: Changing display resolution" href="#changing-display-resolution"></a></p>
<p dir="auto">The display resolution is controlled by this line:</p>
<p dir="auto"><a href="https://github.com/sickcodes/Docker-OSX/blob/master/custom/config-nopicker-custom.plist#L819">https://github.com/sickcodes/Docker-OSX/blob/master/custom/config-nopicker-custom.plist#L819</a></p>
<p dir="auto">Instead of mounting that disk, Docker-OSX will generate a new <code>OpenCore.qcow2</code> by using this one cool trick:</p>
<div dir="auto" data-snippet-clipboard-copy-content="-e GENERATE_UNIQUE=true \
-e WIDTH=800 \
-e HEIGHT=600 \"><pre>-e GENERATE_UNIQUE=true \
-e WIDTH=800 \
-e HEIGHT=600 \</pre></div>
<p dir="auto">To use <code>WIDTH</code>/<code>HEIGHT</code>, you must use with either <code>-e GENERATE_UNIQUE=true</code> or <code>-e GENERATE_SPECIFIC=true</code>.</p>
<p dir="auto">It will take around 30 seconds longer to boot because it needs to make a new boot partition using <code>libguestfs</code>.</p>
<div dir="auto" data-snippet-clipboard-copy-content="-e GENERATE_SPECIFIC=true \
-e WIDTH=1920 \
-e HEIGHT=1080 \
-e SERIAL=&quot;&quot; \
-e BOARD_SERIAL=&quot;&quot; \
-e UUID=&quot;&quot; \
-e MAC_ADDRESS=&quot;&quot; \"><pre>-e GENERATE_SPECIFIC=true \
-e WIDTH=1920 \
-e HEIGHT=1080 \
-e SERIAL=<span><span>"</span><span>"</span></span> \
-e BOARD_SERIAL=<span><span>"</span><span>"</span></span> \
-e UUID=<span><span>"</span><span>"</span></span> \
-e MAC_ADDRESS=<span><span>"</span><span>"</span></span> \</pre></div>
<p dir="auto"><h4 tabindex="-1" dir="auto">Change Docker-OSX Resolution Examples</h4><a id="user-content-change-docker-osx-resolution-examples" aria-label="Permalink: Change Docker-OSX Resolution Examples" href="#change-docker-osx-resolution-examples"></a></p>
<div dir="auto" data-snippet-clipboard-copy-content="# using an image in your current directory
stat mac_hdd_ng.img

docker run -it \
    --device /dev/kvm \
    -p 50922:10022 \
    -v &quot;${PWD}/mac_hdd_ng.img:/image&quot; \
    -v /tmp/.X11-unix:/tmp/.X11-unix \
    -e &quot;DISPLAY=${DISPLAY:-:0.0}&quot; \
    -e GENERATE_SPECIFIC=true \
    -e DEVICE_MODEL=&quot;iMacPro1,1&quot; \
    -e SERIAL=&quot;C02TW0WAHX87&quot; \
    -e BOARD_SERIAL=&quot;C027251024NJG36UE&quot; \
    -e UUID=&quot;5CCB366D-9118-4C61-A00A-E5BAF3BED451&quot; \
    -e MAC_ADDRESS=&quot;A8:5C:2C:9A:46:2F&quot; \
    -e MASTER_PLIST_URL=https://raw.githubusercontent.com/sickcodes/Docker-OSX/master/custom/config-nopicker-custom.plist \
    -e WIDTH=1600 \
    -e HEIGHT=900 \
    sickcodes/docker-osx:naked"><pre><span><span>#</span> using an image in your current directory</span>
stat mac_hdd_ng.img

docker run -it \
    --device /dev/kvm \
    -p 50922:10022 \
    -v <span><span>"</span><span>${PWD}</span>/mac_hdd_ng.img:/image<span>"</span></span> \
    -v /tmp/.X11-unix:/tmp/.X11-unix \
    -e <span><span>"</span>DISPLAY=<span>${DISPLAY<span>:-:</span>0.0}</span><span>"</span></span> \
    -e GENERATE_SPECIFIC=true \
    -e DEVICE_MODEL=<span><span>"</span>iMacPro1,1<span>"</span></span> \
    -e SERIAL=<span><span>"</span>C02TW0WAHX87<span>"</span></span> \
    -e BOARD_SERIAL=<span><span>"</span>C027251024NJG36UE<span>"</span></span> \
    -e UUID=<span><span>"</span>5CCB366D-9118-4C61-A00A-E5BAF3BED451<span>"</span></span> \
    -e MAC_ADDRESS=<span><span>"</span>A8:5C:2C:9A:46:2F<span>"</span></span> \
    -e MASTER_PLIST_URL=https://raw.githubusercontent.com/sickcodes/Docker-OSX/master/custom/config-nopicker-custom.plist \
    -e WIDTH=1600 \
    -e HEIGHT=900 \
    sickcodes/docker-osx:naked</pre></div>
<div dir="auto" data-snippet-clipboard-copy-content="# generating random serial numbers, using the DIY installer, along with the screen resolution changes.
docker run -it \
    --device /dev/kvm \
    -p 50922:10022 \
    -v /tmp/.X11-unix:/tmp/.X11-unix \
    -e &quot;DISPLAY=${DISPLAY:-:0.0}&quot; \
    -e GENERATE_UNIQUE=true \
    -e WIDTH=800 \
    -e HEIGHT=600 \
    sickcodes/docker-osx:latest"><pre><span><span>#</span> generating random serial numbers, using the DIY installer, along with the screen resolution changes.</span>
docker run -it \
    --device /dev/kvm \
    -p 50922:10022 \
    -v /tmp/.X11-unix:/tmp/.X11-unix \
    -e <span><span>"</span>DISPLAY=<span>${DISPLAY<span>:-:</span>0.0}</span><span>"</span></span> \
    -e GENERATE_UNIQUE=true \
    -e WIDTH=800 \
    -e HEIGHT=600 \
    sickcodes/docker-osx:latest</pre></div>
<p dir="auto">Here's a few other resolutions! If your resolution is invalid, it will default to 800x600.</p>
<div data-snippet-clipboard-copy-content="    -e WIDTH=800 \
    -e HEIGHT=600 \"><pre><code>    -e WIDTH=800 \
    -e HEIGHT=600 \
</code></pre></div>
<div data-snippet-clipboard-copy-content="    -e WIDTH=1280 \
    -e HEIGHT=768 \"><pre><code>    -e WIDTH=1280 \
    -e HEIGHT=768 \
</code></pre></div>
<div data-snippet-clipboard-copy-content="    -e WIDTH=1600 \
    -e HEIGHT=900 \"><pre><code>    -e WIDTH=1600 \
    -e HEIGHT=900 \
</code></pre></div>
<div data-snippet-clipboard-copy-content="    -e WIDTH=1920 \
    -e HEIGHT=1080 \"><pre><code>    -e WIDTH=1920 \
    -e HEIGHT=1080 \
</code></pre></div>
<div data-snippet-clipboard-copy-content="    -e WIDTH=2560 \
    -e HEIGHT=1600 \"><pre><code>    -e WIDTH=2560 \
    -e HEIGHT=1600 \
</code></pre></div>
<p dir="auto"><h4 tabindex="-1" dir="auto">This example shows how to change resolution after the container is created.</h4><a id="user-content-this-example-shows-how-to-change-resolution-after-the-container-is-created" aria-label="Permalink: This example shows how to change resolution after the container is created." href="#this-example-shows-how-to-change-resolution-after-the-container-is-created"></a></p>
<p dir="auto">First step is to stop the docker daemon</p>
<div data-snippet-clipboard-copy-content="sudo systemctl stop docker"><pre><code>sudo systemctl stop docker
</code></pre></div>
<p dir="auto">The second step is to change container config in</p>
<div data-snippet-clipboard-copy-content="/var/lib/docker/containers/[container-id]/config.v2.json"><pre><code>/var/lib/docker/containers/[container-id]/config.v2.json
</code></pre></div>
<p dir="auto">(Suppose your original WIDTH is 1024 and HEIGHT is 768, you can search 1024 and replace it with the new value. Same for 768.)</p>
<p dir="auto">The last step is to restart the docker daemon</p>
<div data-snippet-clipboard-copy-content="sudo systemctl restart docker"><pre><code>sudo systemctl restart docker
</code></pre></div>
<p dir="auto"><h3 tabindex="-1" dir="auto">Mounting physical disks in Mac OSX</h3><a id="user-content-mounting-physical-disks-in-mac-osx" aria-label="Permalink: Mounting physical disks in Mac OSX" href="#mounting-physical-disks-in-mac-osx"></a></p>
<p dir="auto">Pass the disk into the container as a volume and then pass the disk again into QEMU command line extras with.</p>
<p dir="auto">Use the <code>config-custom.plist</code> because you probably want to see the boot menu, otherwise omit the first line:</p>
<div dir="auto" data-snippet-clipboard-copy-content="DISK_TWO=&quot;${PWD}/mount_me.img&quot;"><pre>DISK_TWO=<span><span>"</span><span>${PWD}</span>/mount_me.img<span>"</span></span></pre></div>
<div dir="auto" data-snippet-clipboard-copy-content="-e MASTER_PLIST_URL='https://raw.githubusercontent.com/sickcodes/osx-serial-generator/master/config-custom.plist' \
-v &quot;${DISK_TWO}:/disktwo&quot; \
-e EXTRA='-device ide-hd,bus=sata.5,drive=DISK-TWO -drive id=DISK-TWO,if=none,file=/disktwo,format=qcow2' \"><pre>-e MASTER_PLIST_URL=<span>'https://raw.githubusercontent.com/sickcodes/osx-serial-generator/master/config-custom.plist'</span> \
-v <span>"${DISK_TWO}:/disktwo"</span> \
-e EXTRA=<span>'-device ide-hd,bus=sata.5,drive=DISK-TWO -drive id=DISK-TWO,if=none,file=/disktwo,format=qcow2'</span> \</pre></div>
<p dir="auto"><h4 tabindex="-1" dir="auto">Physical disk mounting example</h4><a id="user-content-physical-disk-mounting-example" aria-label="Permalink: Physical disk mounting example" href="#physical-disk-mounting-example"></a></p>
<div dir="auto" data-snippet-clipboard-copy-content="OSX_IMAGE=&quot;${PWD}/mac_hdd_ng_xcode_bigsur.img&quot;
DISK_TWO=&quot;${PWD}/mount_me.img&quot;

docker run -it \
    --device /dev/kvm \
    -e &quot;DISPLAY=${DISPLAY:-:0.0}&quot; \
    -v /tmp/.X11-unix:/tmp/.X11-unix \
    -e MASTER_PLIST_URL='https://raw.githubusercontent.com/sickcodes/osx-serial-generator/master/config-custom.plist' \
    -v &quot;${OSX_IMAGE}&quot;:/image \
    -v &quot;${DISK_TWO}&quot;:/disktwo \
    -e EXTRA='-device ide-hd,bus=sata.5,drive=DISK-TWO -drive id=DISK-TWO,if=none,file=/disktwo,format=qcow2' \
    sickcodes/docker-osx:naked"><pre>OSX_IMAGE=<span><span>"</span><span>${PWD}</span>/mac_hdd_ng_xcode_bigsur.img<span>"</span></span>
DISK_TWO=<span><span>"</span><span>${PWD}</span>/mount_me.img<span>"</span></span>

docker run -it \
    --device /dev/kvm \
    -e <span><span>"</span>DISPLAY=<span>${DISPLAY<span>:-:</span>0.0}</span><span>"</span></span> \
    -v /tmp/.X11-unix:/tmp/.X11-unix \
    -e MASTER_PLIST_URL=<span><span>'</span>https://raw.githubusercontent.com/sickcodes/osx-serial-generator/master/config-custom.plist<span>'</span></span> \
    -v <span><span>"</span><span>${OSX_IMAGE}</span><span>"</span></span>:/image \
    -v <span><span>"</span><span>${DISK_TWO}</span><span>"</span></span>:/disktwo \
    -e EXTRA=<span><span>'</span>-device ide-hd,bus=sata.5,drive=DISK-TWO -drive id=DISK-TWO,if=none,file=/disktwo,format=qcow2<span>'</span></span> \
    sickcodes/docker-osx:naked</pre></div>
<p dir="auto">See also: <a href="https://github.com/sickcodes/Docker-OSX/issues/222" data-hovercard-type="issue" data-hovercard-url="/sickcodes/Docker-OSX/issues/222/hovercard">here</a>.</p>
<p dir="auto"><h4 tabindex="-1" dir="auto">Extracting the APFS disk on Linux</h4><a id="user-content-extracting-the-apfs-disk-on-linux" aria-label="Permalink: Extracting the APFS disk on Linux" href="#extracting-the-apfs-disk-on-linux"></a></p>
<p dir="auto">In Docker-OSX, we are using <code>qcow2</code> images.</p>
<p dir="auto">This means the image grows as you use it, but the guest OS thinks you have 200GB available.</p>
<p dir="auto"><strong>READ ONLY</strong></p>
<div dir="auto" data-snippet-clipboard-copy-content="# mount the qemu image like a real disk
sudo modprobe nbd max_part=8
sudo qemu-nbd --connect=/dev/nbd0 ./image.img
sudo fdisk /dev/nbd0 -l

mkdir -p ./mnt
sudo mount /dev/nbd0p1 ./mnt

# inspect partitions (2 partitions)
sudo fdisk /dev/nbd0 -l

# mount using apfs-linux-rw OR apfs-fuse
mkdir -p ./part

sudo mount /dev/nbd0p2 ./part
sudo apfs-fuse -o allow_other /dev/nbd0p2 ./part
"><pre><span><span>#</span> mount the qemu image like a real disk</span>
sudo modprobe nbd max_part=8
sudo qemu-nbd --connect=/dev/nbd0 ./image.img
sudo fdisk /dev/nbd0 -l

mkdir -p ./mnt
sudo mount /dev/nbd0p1 ./mnt

<span><span>#</span> inspect partitions (2 partitions)</span>
sudo fdisk /dev/nbd0 -l

<span><span>#</span> mount using apfs-linux-rw OR apfs-fuse</span>
mkdir -p ./part

sudo mount /dev/nbd0p2 ./part
sudo apfs-fuse -o allow_other /dev/nbd0p2 ./part
</pre></div>
<p dir="auto">When you are finishing looking at your disk, you can unmount the partition, the disk, and remove the loopback device:</p>
<div dir="auto" data-snippet-clipboard-copy-content="sudo umount ./part
sudo umount ./mnt
sudo qemu-nbd --disconnect /dev/nbd0
sudo rmmod nbd"><pre>sudo umount ./part
sudo umount ./mnt
sudo qemu-nbd --disconnect /dev/nbd0
sudo rmmod nbd</pre></div>
<p dir="auto"><h3 tabindex="-1" dir="auto">USB Passthrough</h3><a id="user-content-usb-passthrough" aria-label="Permalink: USB Passthrough" href="#usb-passthrough"></a></p>
<p dir="auto">Firstly, QEMU must be started as root.</p>
<p dir="auto">It is also potentially possible to accomplish USB passthrough by changing the permissions of the device in the container.
See <a href="https://www.linuxquestions.org/questions/slackware-14/qemu-usb-permissions-744557/#post3628691" rel="nofollow">here</a>.</p>
<p dir="auto">For example, create a new Dockerfile with the following</p>
<div dir="auto" data-snippet-clipboard-copy-content="FROM sickcodes/docker-osx
USER arch
RUN sed -i -e s/exec\ qemu/exec\ sudo\ qemu/ ./Launch.sh
COPY --chown=arch ./new_image.img /home/arch/OSX-KVM/mac_hdd_ng.img"><pre>FROM sickcodes/docker-osx
USER arch
RUN sed -i -e s/exec<span>\ </span>qemu/exec<span>\ </span>sudo<span>\ </span>qemu/ ./Launch.sh
COPY --chown=arch ./new_image.img /home/arch/OSX-KVM/mac_hdd_ng.img</pre></div>
<p dir="auto">Where <code>new_image.img</code> is the qcow2 image you extracted. Then rebuild with <code>docker build .</code></p>
<p dir="auto">Next we need to find out the bus and port numbers of the USB device we want to pass through to the VM:</p>
<div dir="auto" data-snippet-clipboard-copy-content="lsusb -t
/:  Bus 02.Port 1: Dev 1, Class=root_hub, Driver=xhci_hcd/6p, 5000M
/:  Bus 01.Port 1: Dev 1, Class=root_hub, Driver=xhci_hcd/12p, 480M
    |__ Port 2: Dev 5, If 0, Class=Human Interface Device, Driver=usbhid, 12M
    |__ Port 2: Dev 5, If 1, Class=Chip/SmartCard, Driver=, 12M
    |__ Port 3: Dev 2, If 0, Class=Wireless, Driver=, 12M
    |__ Port 3: Dev 2, If 1, Class=Wireless, Driver=, 12M
    |__ Port 5: Dev 3, If 0, Class=Video, Driver=uvcvideo, 480M
    |__ Port 5: Dev 3, If 1, Class=Video, Driver=uvcvideo, 480M"><pre>lsusb -t
/:  Bus 02.Port 1: Dev 1, Class=root_hub, Driver=xhci_hcd/6p, 5000M
/:  Bus 01.Port 1: Dev 1, Class=root_hub, Driver=xhci_hcd/12p, 480M
    <span>|</span>__ Port 2: Dev 5, If 0, Class=Human Interface Device, Driver=usbhid, 12M
    <span>|</span>__ Port 2: Dev 5, If 1, Class=Chip/SmartCard, Driver=, 12M
    <span>|</span>__ Port 3: Dev 2, If 0, Class=Wireless, Driver=, 12M
    <span>|</span>__ Port 3: Dev 2, If 1, Class=Wireless, Driver=, 12M
    <span>|</span>__ Port 5: Dev 3, If 0, Class=Video, Driver=uvcvideo, 480M
    <span>|</span>__ Port 5: Dev 3, If 1, Class=Video, Driver=uvcvideo, 480M</pre></div>
<p dir="auto">In this example, we want to pass through a smartcard device. The device we want is on bus 1 and port 2.</p>
<p dir="auto">There may also be differences if your device is usb 2.0 (ehci) vs usb 3.0 (xhci).
See <a href="https://unix.stackexchange.com/a/452946/101044" rel="nofollow">here</a> for more details.</p>
<div dir="auto" data-snippet-clipboard-copy-content="# hostbus and hostport correspond to the numbers from lsusb
# runs in privileged mode to enable access to the usb devices.
docker run \
  --privileged \
  --device /dev/kvm \
  -e RAM=4 \
  -p 50922:10022 \
  -e &quot;DISPLAY=${DISPLAY:-:0.0}&quot; \
  -e EXTRA=&quot;-device virtio-serial-pci -device usb-host,hostbus=1,hostport=2&quot; \
  mycustomimage"><pre><span><span>#</span> hostbus and hostport correspond to the numbers from lsusb</span>
<span><span>#</span> runs in privileged mode to enable access to the usb devices.</span>
docker run \
  --privileged \
  --device /dev/kvm \
  -e RAM=4 \
  -p 50922:10022 \
  -e <span><span>"</span>DISPLAY=<span>${DISPLAY<span>:-:</span>0.0}</span><span>"</span></span> \
  -e EXTRA=<span><span>"</span>-device virtio-serial-pci -device usb-host,hostbus=1,hostport=2<span>"</span></span> \
  mycustomimage</pre></div>
<p dir="auto">You should see the device show up when you do <code>system_profiler SPUSBDataType</code> in the MacOS shell.</p>
<p dir="auto">Important Note: this will cause the host system to lose access to the USB device while the VM is running!</p>
<p dir="auto"><h2 tabindex="-1" dir="auto">Container creation examples</h2><a id="user-content-container-creation-examples" aria-label="Permalink: Container creation examples" href="#container-creation-examples"></a></p>
<p dir="auto"><h4 tabindex="-1" dir="auto">Quick Start your own image (naked container image)</h4><a id="user-content-quick-start-your-own-image-naked-container-image" aria-label="Permalink: Quick Start your own image (naked container image)" href="#quick-start-your-own-image-naked-container-image"></a></p>
<p dir="auto">This is my favourite container. You can supply an existing disk image as a Docker command line argument.</p>
<ul dir="auto">
<li>
<p dir="auto">Pull images out using <code>sudo find /var/lib/docker -name mac_hdd_ng.img -size +10G</code></p>
</li>
<li>
<p dir="auto">Supply your own local image with the command argument <code>-v "${PWD}/mac_hdd_ng.img:/image"</code> and use <code>sickcodes/docker-osx:naked</code> when instructing Docker to create your container.</p>
<ul dir="auto">
<li>
<p dir="auto">Naked image is for booting any existing .img file, e.g in the current working directory (<code>$PWD</code>)</p>
</li>
<li>
<p dir="auto">By default, this image has a variable called <code>NOPICKER</code> which is <code>"true"</code>. This skips the disk selection menu. Use <code>-e NOPICKER=false</code> or any other string than the word <code>true</code> to enter the boot menu.</p>
<p dir="auto">This lets you use other disks instead of skipping the boot menu, e.g. recovery disk or disk utility.</p>
</li>
</ul>
</li>
</ul>
<div dir="auto" data-snippet-clipboard-copy-content="docker pull sickcodes/docker-osx:naked

# run your own image + SSH
# change mac_hdd_ng.img
docker run -it \
    --device /dev/kvm \
    -p 50922:10022 \
    -v &quot;${PWD}/mac_hdd_ng.img:/image&quot; \
    -v /tmp/.X11-unix:/tmp/.X11-unix \
    -e &quot;DISPLAY=${DISPLAY:-:0.0}&quot; \
    sickcodes/docker-osx:naked

# run local copy of the auto image + SSH + Boot menu
docker run -it \
    --device /dev/kvm \
    -p 50922:10022 \
    -v &quot;${PWD}/mac_hdd_ng_auto.img:/image&quot; \
    -v /tmp/.X11-unix:/tmp/.X11-unix \
    -e &quot;DISPLAY=${DISPLAY:-:0.0}&quot; \
    -e &quot;NOPICKER=false&quot; \
    sickcodes/docker-osx:naked"><pre>docker pull sickcodes/docker-osx:naked

<span><span>#</span> run your own image + SSH</span>
<span><span>#</span> change mac_hdd_ng.img</span>
docker run -it \
    --device /dev/kvm \
    -p 50922:10022 \
    -v <span><span>"</span><span>${PWD}</span>/mac_hdd_ng.img:/image<span>"</span></span> \
    -v /tmp/.X11-unix:/tmp/.X11-unix \
    -e <span><span>"</span>DISPLAY=<span>${DISPLAY<span>:-:</span>0.0}</span><span>"</span></span> \
    sickcodes/docker-osx:naked

<span><span>#</span> run local copy of the auto image + SSH + Boot menu</span>
docker run -it \
    --device /dev/kvm \
    -p 50922:10022 \
    -v <span><span>"</span><span>${PWD}</span>/mac_hdd_ng_auto.img:/image<span>"</span></span> \
    -v /tmp/.X11-unix:/tmp/.X11-unix \
    -e <span><span>"</span>DISPLAY=<span>${DISPLAY<span>:-:</span>0.0}</span><span>"</span></span> \
    -e <span><span>"</span>NOPICKER=false<span>"</span></span> \
    sickcodes/docker-osx:naked</pre></div>
<p dir="auto"><h3 tabindex="-1" dir="auto">Building an OSX container with video output</h3><a id="user-content-building-an-osx-container-with-video-output" aria-label="Permalink: Building an OSX container with video output" href="#building-an-osx-container-with-video-output"></a></p>
<p dir="auto">The Quick Start command should work out of the box, provided that you keep the following lines. Works in <code>auto</code> &amp; <code>naked</code> machines:</p>
<div data-snippet-clipboard-copy-content="    -v /tmp/.X11-unix:/tmp/.X11-unix \
    -e &quot;DISPLAY=${DISPLAY:-:0.0}&quot; \"><pre><code>    -v /tmp/.X11-unix:/tmp/.X11-unix \
    -e "DISPLAY=${DISPLAY:-:0.0}" \
</code></pre></div>
<p dir="auto"><h4 tabindex="-1" dir="auto">Prebuilt image with arbitrary command line arguments</h4><a id="user-content-prebuilt-image-with-arbitrary-command-line-arguments" aria-label="Permalink: Prebuilt image with arbitrary command line arguments" href="#prebuilt-image-with-arbitrary-command-line-arguments"></a></p>
<p dir="auto"><a href="https://hub.docker.com/r/sickcodes/docker-osx/tags?page=1&amp;ordering=last_updated" rel="nofollow"><img src="https://camo.githubusercontent.com/95a8f30ec42cff4f909e34a85cd8ecccce74926271a1832380c1e8c2b4f506b5/68747470733a2f2f696d672e736869656c64732e696f2f646f636b65722f696d6167652d73697a652f7369636b636f6465732f646f636b65722d6f73782f6175746f3f6c6162656c3d7369636b636f646573253246646f636b65722d6f73782533416175746f" alt="https://img.shields.io/docker/image-size/sickcodes/docker-osx/auto?label=sickcodes%2Fdocker-osx%3Aauto" data-canonical-src="https://img.shields.io/docker/image-size/sickcodes/docker-osx/auto?label=sickcodes%2Fdocker-osx%3Aauto"></a></p>
<p dir="auto"><code>-e OSX_COMMANDS</code> lets you run any commands inside the container</p>
<div dir="auto" data-snippet-clipboard-copy-content="docker pull sickcodes/docker-osx:auto

# boot to OS X shell + display + specify commands to run inside OS X!
docker run -it \
    --device /dev/kvm \
    -p 50922:10022 \
    -v /tmp/.X11-unix:/tmp/.X11-unix \
    -e &quot;DISPLAY=${DISPLAY:-:0.0}&quot; \
    -e &quot;OSX_COMMANDS=/bin/bash -c \&quot;put your commands here\&quot;&quot; \
    sickcodes/docker-osx:auto

# Boots in a minute or two!"><pre>docker pull sickcodes/docker-osx:auto

<span><span>#</span> boot to OS X shell + display + specify commands to run inside OS X!</span>
docker run -it \
    --device /dev/kvm \
    -p 50922:10022 \
    -v /tmp/.X11-unix:/tmp/.X11-unix \
    -e <span><span>"</span>DISPLAY=<span>${DISPLAY<span>:-:</span>0.0}</span><span>"</span></span> \
    -e <span><span>"</span>OSX_COMMANDS=/bin/bash -c <span>\"</span>put your commands here<span>\"</span><span>"</span></span> \
    sickcodes/docker-osx:auto

<span><span>#</span> Boots in a minute or two!</span></pre></div>
<p dir="auto">OR if you have an image already and just want to log in and execute arbitrary commands:</p>
<div dir="auto" data-snippet-clipboard-copy-content="docker pull sickcodes/docker-osx:naked-auto

# boot to OS X shell + display + specify commands to run inside OS X!
docker run -it \
    --device /dev/kvm \
    -p 50922:10022 \
    -v /tmp/.X11-unix:/tmp/.X11-unix \
    -e &quot;DISPLAY=${DISPLAY:-:0.0}&quot; \
    -e USERNAME=yourusername \
    -e PASSWORD=yourpassword \
    -e &quot;OSX_COMMANDS=/bin/bash -c \&quot;put your commands here\&quot;&quot; \
    sickcodes/docker-osx:naked-auto

# Boots in a minute or two!
"><pre>docker pull sickcodes/docker-osx:naked-auto

<span><span>#</span> boot to OS X shell + display + specify commands to run inside OS X!</span>
docker run -it \
    --device /dev/kvm \
    -p 50922:10022 \
    -v /tmp/.X11-unix:/tmp/.X11-unix \
    -e <span><span>"</span>DISPLAY=<span>${DISPLAY<span>:-:</span>0.0}</span><span>"</span></span> \
    -e USERNAME=yourusername \
    -e PASSWORD=yourpassword \
    -e <span><span>"</span>OSX_COMMANDS=/bin/bash -c <span>\"</span>put your commands here<span>\"</span><span>"</span></span> \
    sickcodes/docker-osx:naked-auto

<span><span>#</span> Boots in a minute or two!</span>
</pre></div>
<p dir="auto"><h3 tabindex="-1" dir="auto">Further examples</h3><a id="user-content-further-examples" aria-label="Permalink: Further examples" href="#further-examples"></a></p>
<p dir="auto">There's a myriad of other potential use cases that can work perfectly with Docker-OSX, some of which you'll see below!</p>
<p dir="auto"><h3 tabindex="-1" dir="auto">Building a headless OSX container</h3><a id="user-content-building-a-headless-osx-container" aria-label="Permalink: Building a headless OSX container" href="#building-a-headless-osx-container"></a></p>
<p dir="auto">For a headless container, <strong>remove</strong> the following two lines from your <code>docker run</code> command:</p>
<div data-snippet-clipboard-copy-content="    # -v /tmp/.X11-unix:/tmp/.X11-unix \
    # -e &quot;DISPLAY=${DISPLAY:-:0.0}&quot; \"><pre><code>    # -v /tmp/.X11-unix:/tmp/.X11-unix \
    # -e "DISPLAY=${DISPLAY:-:0.0}" \
</code></pre></div>
<p dir="auto"><h4 tabindex="-1" dir="auto">Building a headless container from a custom image</h4><a id="user-content-building-a-headless-container-from-a-custom-image" aria-label="Permalink: Building a headless container from a custom image" href="#building-a-headless-container-from-a-custom-image"></a></p>
<p dir="auto"><a href="https://hub.docker.com/r/sickcodes/docker-osx/tags?page=1&amp;ordering=last_updated" rel="nofollow"><img src="https://camo.githubusercontent.com/18ebff76cdd5b97ba8c4f154fc69ce16aab9850f3a57dfae97f2e06e6d1a37cc/68747470733a2f2f696d672e736869656c64732e696f2f646f636b65722f696d6167652d73697a652f7369636b636f6465732f646f636b65722d6f73782f6e616b65643f6c6162656c3d7369636b636f646573253246646f636b65722d6f73782533416e616b6564" alt="https://img.shields.io/docker/image-size/sickcodes/docker-osx/naked?label=sickcodes%2Fdocker-osx%3Anaked" data-canonical-src="https://img.shields.io/docker/image-size/sickcodes/docker-osx/naked?label=sickcodes%2Fdocker-osx%3Anaked"></a></p>
<p dir="auto">This is particularly helpful for CI/CD pipelines.</p>
<div dir="auto" data-snippet-clipboard-copy-content="# run your own image headless + SSH
docker run -it \
    --device /dev/kvm \
    -p 50922:10022 \
    -v &quot;${PWD}/mac_hdd_ng.img:/image&quot; \
    sickcodes/docker-osx:naked"><pre><span><span>#</span> run your own image headless + SSH</span>
docker run -it \
    --device /dev/kvm \
    -p 50922:10022 \
    -v <span><span>"</span><span>${PWD}</span>/mac_hdd_ng.img:/image<span>"</span></span> \
    sickcodes/docker-osx:naked</pre></div>
<p dir="auto"><h3 tabindex="-1" dir="auto">Building a headless container that allows insecure VNC on localhost (!for local use only!)</h3><a id="user-content-building-a-headless-container-that-allows-insecure-vnc-on-localhost-for-local-use-only" aria-label="Permalink: Building a headless container that allows insecure VNC on localhost (!for local use only!)" href="#building-a-headless-container-that-allows-insecure-vnc-on-localhost-for-local-use-only"></a></p>
<p dir="auto"><strong>Must change -it to -i to be able to interact with the QEMU console</strong></p>
<p dir="auto"><strong>To exit a container using -i you must <code>docker kill &lt;containerid&gt;</code>. For example, to kill everything, <code>docker ps | xargs docker kill</code>.</strong></p>
<p dir="auto">Native QEMU VNC example</p>
<div dir="auto" data-snippet-clipboard-copy-content="docker run -i \
    --device /dev/kvm \
    -p 50922:10022 \
    -p 5999:5999 \
    -v /tmp/.X11-unix:/tmp/.X11-unix \
    -e &quot;DISPLAY=${DISPLAY:-:0.0}&quot; \
    -e EXTRA=&quot;-display none -vnc 0.0.0.0:99,password=on&quot; \
    sickcodes/docker-osx:big-sur

# type `change vnc password myvncusername` into the docker terminal and set a password
# connect to localhost:5999 using VNC
# qemu 6 seems to require a username for vnc now"><pre>docker run -i \
    --device /dev/kvm \
    -p 50922:10022 \
    -p 5999:5999 \
    -v /tmp/.X11-unix:/tmp/.X11-unix \
    -e <span><span>"</span>DISPLAY=<span>${DISPLAY<span>:-:</span>0.0}</span><span>"</span></span> \
    -e EXTRA=<span><span>"</span>-display none -vnc 0.0.0.0:99,password=on<span>"</span></span> \
    sickcodes/docker-osx:big-sur

<span><span>#</span> type `change vnc password myvncusername` into the docker terminal and set a password</span>
<span><span>#</span> connect to localhost:5999 using VNC</span>
<span><span>#</span> qemu 6 seems to require a username for vnc now</span></pre></div>
<p dir="auto"><strong>NOT TLS/HTTPS Encrypted at all!</strong></p>
<p dir="auto">Or <code>ssh -N root@1.1.1.1 -L  5999:127.0.0.1:5999</code>, where <code>1.1.1.1</code> is your remote server IP.</p>
<p dir="auto">(Note: if you close port 5999 and use the SSH tunnel, this becomes secure.)</p>
<p dir="auto"><h3 tabindex="-1" dir="auto">Building a headless container to run remotely with secure VNC</h3><a id="user-content-building-a-headless-container-to-run-remotely-with-secure-vnc" aria-label="Permalink: Building a headless container to run remotely with secure VNC" href="#building-a-headless-container-to-run-remotely-with-secure-vnc"></a></p>
<p dir="auto">Add the following line:</p>
<p dir="auto"><code>-e EXTRA="-display none -vnc 0.0.0.0:99,password=on"</code></p>
<p dir="auto">In the Docker terminal, press <code>enter</code> until you see <code>(qemu)</code>.</p>
<p dir="auto">Type <code>change vnc password someusername</code></p>
<p dir="auto">Enter a password for your new vnc username^.</p>
<p dir="auto">You also need the container IP: <code>docker inspect &lt;containerid&gt; | jq -r '.[0].NetworkSettings.IPAddress'</code></p>
<p dir="auto">Or <code>ip n</code> will usually show the container IP first.</p>
<p dir="auto">Now VNC connects using the Docker container IP, for example <code>172.17.0.2:5999</code></p>
<p dir="auto">Remote VNC over SSH: <code>ssh -N root@1.1.1.1 -L  5999:172.17.0.2:5999</code>, where <code>1.1.1.1</code> is your remote server IP and <code>172.17.0.2</code> is your LAN container IP.</p>
<p dir="auto">Now you can direct connect VNC to any container built with this command!</p>
<p dir="auto"><h3 tabindex="-1" dir="auto">I'd like to use SPICE instead of VNC</h3><a id="user-content-id-like-to-use-spice-instead-of-vnc" aria-label="Permalink: I'd like to use SPICE instead of VNC" href="#id-like-to-use-spice-instead-of-vnc"></a></p>
<p dir="auto">Optionally, you can enable the SPICE protocol, which allows use of <code>remote-viewer</code> to access your OSX container rather than VNC.</p>
<p dir="auto">Note: <code>-disable-ticketing</code> will allow unauthenticated access to the VM. See the <a href="https://www.spice-space.org/spice-user-manual.html" rel="nofollow">spice manual</a> for help setting up authenticated access ("Ticketing").</p>
<div dir="auto" data-snippet-clipboard-copy-content="  docker run \
    --device /dev/kvm \
    -p 3001:3001 \
    -p 50922:10022 \
    -e &quot;DISPLAY=${DISPLAY:-:0.0}&quot; \
    -e EXTRA=&quot;-monitor telnet::45454,server,nowait -nographic -serial null -spice disable-ticketing,port=3001&quot; \
    mycustomimage"><pre>  docker run \
    --device /dev/kvm \
    -p 3001:3001 \
    -p 50922:10022 \
    -e <span><span>"</span>DISPLAY=<span>${DISPLAY<span>:-:</span>0.0}</span><span>"</span></span> \
    -e EXTRA=<span><span>"</span>-monitor telnet::45454,server,nowait -nographic -serial null -spice disable-ticketing,port=3001<span>"</span></span> \
    mycustomimage</pre></div>
<p dir="auto">Then simply do <code>remote-viewer spice://localhost:3001</code> and add <code>--spice-debug</code> for debugging.</p>
<p dir="auto"><h4 tabindex="-1" dir="auto">Creating images based on an already configured and set up container</h4><a id="user-content-creating-images-based-on-an-already-configured-and-set-up-container" aria-label="Permalink: Creating images based on an already configured and set up container" href="#creating-images-based-on-an-already-configured-and-set-up-container"></a></p>
<div dir="auto" data-snippet-clipboard-copy-content="# You can create an image of an already configured and setup container.
# This allows you to effectively duplicate a system.
# To do this, run the following commands

# make note of your container id
docker ps --all
docker commit containerid newImageName

# To run this image do the following
docker run \
    --device /dev/kvm \
    --device /dev/snd \
    -v /tmp/.X11-unix:/tmp/.X11-unix \
    newImageName"><pre><span><span>#</span> You can create an image of an already configured and setup container.</span>
<span><span>#</span> This allows you to effectively duplicate a system.</span>
<span><span>#</span> To do this, run the following commands</span>

<span><span>#</span> make note of your container id</span>
docker ps --all
docker commit containerid newImageName

<span><span>#</span> To run this image do the following</span>
docker run \
    --device /dev/kvm \
    --device /dev/snd \
    -v /tmp/.X11-unix:/tmp/.X11-unix \
    newImageName</pre></div>
<div dir="auto" data-snippet-clipboard-copy-content="docker pull sickcodes/docker-osx:auto

# boot directly into a real OS X shell with no display (Xvfb) [HEADLESS]
docker run -it \
    --device /dev/kvm \
    -p 50922:10022 \
    sickcodes/docker-osx:auto

# username is user
# passsword is alpine
# Wait 2-3 minutes until you drop into the shell."><pre>docker pull sickcodes/docker-osx:auto

<span><span>#</span> boot directly into a real OS X shell with no display (Xvfb) [HEADLESS]</span>
docker run -it \
    --device /dev/kvm \
    -p 50922:10022 \
    sickcodes/docker-osx:auto

<span><span>#</span> username is user</span>
<span><span>#</span> passsword is alpine</span>
<span><span>#</span> Wait 2-3 minutes until you drop into the shell.</span></pre></div>
<p dir="auto"><h4 tabindex="-1" dir="auto">Run the original version of Docker-OSX</h4><a id="user-content-run-the-original-version-of-docker-osx" aria-label="Permalink: Run the original version of Docker-OSX" href="#run-the-original-version-of-docker-osx"></a></p>
<div dir="auto" data-snippet-clipboard-copy-content="
docker pull sickcodes/docker-osx:latest

docker run -it \
    --device /dev/kvm \
    --device /dev/snd \
    -v /tmp/.X11-unix:/tmp/.X11-unix \
    -e &quot;DISPLAY=${DISPLAY:-:0.0}&quot; \
    sickcodes/docker-osx:latest

# press CTRL + G if your mouse gets stuck
# scroll down to troubleshooting if you have problems
# need more RAM and SSH on localhost -p 50922?"><pre>docker pull sickcodes/docker-osx:latest

docker run -it \
    --device /dev/kvm \
    --device /dev/snd \
    -v /tmp/.X11-unix:/tmp/.X11-unix \
    -e <span><span>"</span>DISPLAY=<span>${DISPLAY<span>:-:</span>0.0}</span><span>"</span></span> \
    sickcodes/docker-osx:latest

<span><span>#</span> press CTRL + G if your mouse gets stuck</span>
<span><span>#</span> scroll down to troubleshooting if you have problems</span>
<span><span>#</span> need more RAM and SSH on localhost -p 50922?</span></pre></div>
<p dir="auto"><h4 tabindex="-1" dir="auto">Run but enable SSH in OS X (Original Version)!</h4><a id="user-content-run-but-enable-ssh-in-os-x-original-version" aria-label="Permalink: Run but enable SSH in OS X (Original Version)!" href="#run-but-enable-ssh-in-os-x-original-version"></a></p>
<div dir="auto" data-snippet-clipboard-copy-content="docker run -it \
    --device /dev/kvm \
    --device /dev/snd \
    -p 50922:10022 \
    -v /tmp/.X11-unix:/tmp/.X11-unix \
    -e &quot;DISPLAY=${DISPLAY:-:0.0}&quot; \
    sickcodes/docker-osx:latest

# turn on SSH after you've installed OS X in the &quot;Sharing&quot; settings.
ssh user@localhost -p 50922"><pre>docker run -it \
    --device /dev/kvm \
    --device /dev/snd \
    -p 50922:10022 \
    -v /tmp/.X11-unix:/tmp/.X11-unix \
    -e <span><span>"</span>DISPLAY=<span>${DISPLAY<span>:-:</span>0.0}</span><span>"</span></span> \
    sickcodes/docker-osx:latest

<span><span>#</span> turn on SSH after you've installed OS X in the "Sharing" settings.</span>
ssh user@localhost -p 50922</pre></div>
<p dir="auto"><h4 tabindex="-1" dir="auto">Autoboot into OS X after you've installed everything</h4><a id="user-content-autoboot-into-os-x-after-youve-installed-everything" aria-label="Permalink: Autoboot into OS X after you've installed everything" href="#autoboot-into-os-x-after-youve-installed-everything"></a></p>
<p dir="auto">Add the extra option <code>-e NOPICKER=true</code>.</p>
<p dir="auto">Old machines:</p>
<div dir="auto" data-snippet-clipboard-copy-content="# find your containerID
docker ps

# move the no picker script on top of the Launch script
# NEW CONTAINERS
docker exec containerID mv ./Launch-nopicker.sh ./Launch.sh

# VNC-VERSION-CONTAINER
docker exec containerID mv ./Launch-nopicker.sh ./Launch_custom.sh

# LEGACY CONTAINERS
docker exec containerID bash -c &quot;grep -v InstallMedia ./Launch.sh > ./Launch-nopicker.sh
chmod +x ./Launch-nopicker.sh
sed -i -e s/OpenCore\.qcow2/OpenCore\-nopicker\.qcow2/ ./Launch-nopicker.sh
&quot;"><pre><span><span>#</span> find your containerID</span>
docker ps

<span><span>#</span> move the no picker script on top of the Launch script</span>
<span><span>#</span> NEW CONTAINERS</span>
docker <span>exec</span> containerID mv ./Launch-nopicker.sh ./Launch.sh

<span><span>#</span> VNC-VERSION-CONTAINER</span>
docker <span>exec</span> containerID mv ./Launch-nopicker.sh ./Launch_custom.sh

<span><span>#</span> LEGACY CONTAINERS</span>
docker <span>exec</span> containerID bash -c <span><span>"</span>grep -v InstallMedia ./Launch.sh &gt; ./Launch-nopicker.sh</span>
<span>chmod +x ./Launch-nopicker.sh</span>
<span>sed -i -e s/OpenCore\.qcow2/OpenCore\-nopicker\.qcow2/ ./Launch-nopicker.sh</span>
<span><span>"</span></span></pre></div>
<p dir="auto"><h3 tabindex="-1" dir="auto">The big-sur image starts slowly after installation. Is this expected?</h3><a id="user-content-the-big-sur-image-starts-slowly-after-installation-is-this-expected" aria-label="Permalink: The big-sur image starts slowly after installation. Is this expected?" href="#the-big-sur-image-starts-slowly-after-installation-is-this-expected"></a></p>
<p dir="auto">Automatic updates are still on in the container's settings. You may wish to turn them off. <a href="https://github.com/sickcodes/Docker-OSX/issues/227" data-hovercard-type="issue" data-hovercard-url="/sickcodes/Docker-OSX/issues/227/hovercard">We have future plans for development around this.</a></p>
<p dir="auto"><h3 tabindex="-1" dir="auto">What is <code>${DISPLAY:-:0.0}</code>?</h3><a id="user-content-what-is-display-00" aria-label="Permalink: What is ${DISPLAY:-:0.0}?" href="#what-is-display-00"></a></p>
<p dir="auto"><code>$DISPLAY</code> is the shell variable that refers to your X11 display server.</p>
<p dir="auto"><code>${DISPLAY}</code> is the same, but allows you to join variables like this:</p>
<ul dir="auto">
<li>e.g. <code>${DISPLAY}_${DISPLAY}</code> would print <code>:0.0_:0.0</code></li>
<li>e.g. <code>$DISPLAY_$DISPLAY</code>     would print <code>:0.0</code></li>
</ul>
<p dir="auto">...because <code>$DISPLAY_</code> is not <code>$DISPLAY</code></p>
<p dir="auto"><code>${variable:-fallback}</code> allows you to set a "fallback" variable to be substituted if <code>$variable</code> is not set.</p>
<p dir="auto">You can also use <code>${variable:=fallback}</code> to set that variable (in your current terminal).</p>
<p dir="auto">In Docker-OSX, we assume, <code>:0.0</code> is your default <code>$DISPLAY</code> variable.</p>
<p dir="auto">You can see what yours is</p>

<p dir="auto">That way, <code>${DISPLAY:-:0.0}</code> will use whatever variable your X11 server has set for you, else <code>:0.0</code></p>
<p dir="auto"><h3 tabindex="-1" dir="auto">What is <code>-v /tmp/.X11-unix:/tmp/.X11-unix</code>?</h3><a id="user-content-what-is--v-tmpx11-unixtmpx11-unix" aria-label="Permalink: What is -v /tmp/.X11-unix:/tmp/.X11-unix?" href="#what-is--v-tmpx11-unixtmpx11-unix"></a></p>
<p dir="auto"><code>-v</code> is a Docker command-line option that lets you pass a volume to the container.</p>
<p dir="auto">The directory that we are letting the Docker container use is a X server display socket.</p>
<p dir="auto"><code>/tmp/.X11-unix</code></p>
<p dir="auto">If we let the Docker container use the same display socket as our own environment, then any applications you run inside the Docker container will show up on your screen too! <a href="https://www.x.org/archive/X11R6.8.0/doc/RELNOTES5.html" rel="nofollow">https://www.x.org/archive/X11R6.8.0/doc/RELNOTES5.html</a></p>
<p dir="auto"><h3 tabindex="-1" dir="auto">ALSA errors on startup or container creation</h3><a id="user-content-alsa-errors-on-startup-or-container-creation" aria-label="Permalink: ALSA errors on startup or container creation" href="#alsa-errors-on-startup-or-container-creation"></a></p>
<p dir="auto">You may when initialising or booting into a container see errors from the <code>(qemu)</code> console of the following form:
<code>ALSA lib blahblahblah: (function name) returned error: no such file or directory</code>. These are more or less expected. As long as you are able to boot into the container and everything is working, no reason to worry about these.</p>
<p dir="auto">See also: <a href="https://github.com/sickcodes/Docker-OSX/issues/174" data-hovercard-type="issue" data-hovercard-url="/sickcodes/Docker-OSX/issues/174/hovercard">here</a>.</p>
</article></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[FakeTraveler: Fake where your phone is located (Mock location for Android) (133 pts)]]></title>
            <link>https://github.com/mcastillof/FakeTraveler</link>
            <guid>41116414</guid>
            <pubDate>Wed, 31 Jul 2024 04:30:15 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://github.com/mcastillof/FakeTraveler">https://github.com/mcastillof/FakeTraveler</a>, See on <a href="https://news.ycombinator.com/item?id=41116414">Hacker News</a></p>
<div id="readability-page-1" class="page"><div data-hpc="true"><article itemprop="text"><p dir="auto"><h2 tabindex="-1" dir="auto">FakeTraveler</h2><a id="user-content-faketraveler" aria-label="Permalink: FakeTraveler" href="#faketraveler"></a></p>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="https://github.com/mcastillof/FakeTraveler/blob/master/app/src/main/res/mipmap-xxxhdpi/ic_launcher.png"><img alt="Logo" src="https://github.com/mcastillof/FakeTraveler/raw/master/app/src/main/res/mipmap-xxxhdpi/ic_launcher.png" width="80"></a></p>
<p dir="auto">Fake where your phone is located (Mock location for Android).</p>
<p dir="auto">Sometimes you need to fake the location of your device (for privacy or to test an app). Fake Traveler provides you a map to select the location where you want your phone to be.</p>
<p dir="auto"><a href="https://f-droid.org/app/cl.coders.faketraveler" rel="nofollow"><img src="https://camo.githubusercontent.com/6079bf6adc19d9fc0b1c7b3088a957e0f6f50cfa9a872f7404bb9b67cc57c6be/68747470733a2f2f662d64726f69642e6f72672f62616467652f6765742d69742d6f6e2e706e67" alt="Get it on F-Droid" height="100" data-canonical-src="https://f-droid.org/badge/get-it-on.png"></a></p>
<p dir="auto"><h2 tabindex="-1" dir="auto">How does it work?</h2><a id="user-content-how-does-it-work" aria-label="Permalink: How does it work?" href="#how-does-it-work"></a></p>
<p dir="auto">Long press in the map where you want to be located or type the latitude and longitude, and tap the Apply button. Tapping the "..." button you will be shown two settings to mock the location over a period of time.</p>
<p><a target="_blank" rel="noopener noreferrer" href="https://github.com/mcastillof/FakeTraveler/blob/master/screenshots/Screenshot_Fake_Traveler_20180722-192131.png"><img alt="App image" src="https://github.com/mcastillof/FakeTraveler/raw/master/screenshots/Screenshot_Fake_Traveler_20180722-192131.png" width="30%"></a>
<a target="_blank" rel="noopener noreferrer" href="https://github.com/mcastillof/FakeTraveler/blob/master/screenshots/Screenshot_Fake_Traveler_20180722-192305.png"><img alt="App image" src="https://github.com/mcastillof/FakeTraveler/raw/master/screenshots/Screenshot_Fake_Traveler_20180722-192305.png" width="30%"></a>
</p>
<p dir="auto"><h2 tabindex="-1" dir="auto">Requirements?</h2><a id="user-content-requirements" aria-label="Permalink: Requirements?" href="#requirements"></a></p>
<p dir="auto">In order to work, you need to allow Fake Traveler to mock locations. You have to <a href="https://developer.android.com/studio/debug/dev-options?hl=en-419" rel="nofollow">enable Developer options</a> and select this app in "Settings/System/Developer options/Select mock location app" option.</p>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="https://github.com/mcastillof/FakeTraveler/blob/master/screenshots/Screenshot_Settings_20180722-192328.png"><img alt="App image" src="https://github.com/mcastillof/FakeTraveler/raw/master/screenshots/Screenshot_Settings_20180722-192328.png" width="30%"></a></p>
<p dir="auto"><h2 tabindex="-1" dir="auto">Changelogs</h2><a id="user-content-changelogs" aria-label="Permalink: Changelogs" href="#changelogs"></a></p>
<p dir="auto">See fastlane/metadata/android/en-US/changelogs/</p>
<p dir="auto"><h2 tabindex="-1" dir="auto">License</h2><a id="user-content-license" aria-label="Permalink: License" href="#license"></a></p>
<p dir="auto">Copyright © 2018 Matías Castillo Felmer</p>
<blockquote>
<p dir="auto">This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.</p>
<p dir="auto">This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.</p>
<p dir="auto">You should have received a copy of the GNU General Public License
along with this program.  If not, see <a href="https://www.gnu.org/licenses/" rel="nofollow">https://www.gnu.org/licenses/</a>.</p>
</blockquote>
<p dir="auto">The icon launcher is derivative of <a href="https://www.iconfinder.com/icons/2135924/location_map_navigation_pointer_icon" rel="nofollow">"Location, map, navigation, pointer icon"</a> by First Styles, used under CC 3.0 BY. The icon Launcher was created using <a href="https://jgilfelt.github.io/AndroidAssetStudio/icons-launcher.html" rel="nofollow">Android Asset Studio</a>, and is licensed under CC 3.0 BY, by Matías Castillo Felmer.</p>
</article></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Construction of the AT&T Long Lines "Cheshire" underground site (152 pts)]]></title>
            <link>https://coldwar-ct.com/Home_Page_S1DO.html</link>
            <guid>41116253</guid>
            <pubDate>Wed, 31 Jul 2024 03:47:42 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://coldwar-ct.com/Home_Page_S1DO.html">https://coldwar-ct.com/Home_Page_S1DO.html</a>, See on <a href="https://news.ycombinator.com/item?id=41116253">Hacker News</a></p>
<div id="readability-page-1" class="page"><div id="content1"><div><p><span>The Cheshire ATT facility is an underground complex originally built in 1966. It was an underground terminal and repeater station for the hardened analog L4 carrier cable (coax) that went from Miami to New England carrying general toll circuits and critical military communication circuits.&nbsp;It reportedly&nbsp;housed an AUTOVON 4-wire switch as part of the switching fabric of that critical global military communications network. Cheshire also connected via terrestrial&nbsp;microwave to the major, semi-hardened&nbsp;AT&amp;T Durham station which linked to many other sites including paths to New London (Navy Sub base) and to Green Hill, RI to meet a transatlantic cable to Europe.</span></p>
<p><span><p>

The Official ATT facility description from 1966:<br>
<em>&nbsp;&nbsp;&nbsp;&nbsp; The Cheshire central office is a two-story underground, hardened building owned by Lone Lines and located in Cheshire, CT.<br>
&nbsp;&nbsp;&nbsp;&nbsp; This office is manned 24 hours daily.&nbsp; The Plant Manager has a staff comprising four Plant Supervisors and eighteen Craftsmen.<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Cheshire serves as a metropolitan junction station for Hartford and New Haven and as a junction point and Powercenter for 20L4 coaxial cable on The Boston-Miami route, The 20L3 Chesterfield-New Haven route, the 6L4 Green hill, R.I.-Cheshire, the 12L3 Cheshire-Hartford cable and a TD2 route to Durham via Little City.&nbsp; It also has a #1 ESS Machine on The Autovon Network.</em></p></span></p>
<div><p><span><em>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Located on a mezzanine floor is The Northeastern Area Restoration Center, manned 24 hours daily. It's Plant Manager has a staff comprising six Plant Supervisors and Six Craftsmen.</em><p>

See also:</p></span><a href="http://www1.shore.net/~mfoster/Cheshire.htm"><span color="#ff0000" face="Times New Roman">http://www1.shore.net/~mfoster/Cheshire.htm</span></a></p><p>

<img width="703" height="527" alt="" src="https://img1.wsimg.com/isteam/ip/da3386ad-a465-4e41-834e-354cc46f825a/legacy/att_cheshire_1_sign.jpg"></p></div></div><p><span>Construction Phase, 1965/66:</span></p><p><span></span><span><br>
<img alt="" src="https://img1.wsimg.com/isteam/ip/da3386ad-a465-4e41-834e-354cc46f825a/4e837e697c7010496cce42926bda796f.jpg"><p>


<img alt="" src="https://img1.wsimg.com/isteam/ip/da3386ad-a465-4e41-834e-354cc46f825a/2233ebcdac4a9ec03e9ba011a6ad3fa8.jpg"></p><p>


<img alt="" src="https://img1.wsimg.com/isteam/ip/da3386ad-a465-4e41-834e-354cc46f825a/fa369bd8c40b1f0b4b70fa7b9d230a57.jpg"></p><p>


<img alt="" src="https://img1.wsimg.com/isteam/ip/da3386ad-a465-4e41-834e-354cc46f825a/98af9522e808b0969120ccba673e0a85.jpg"></p><p>



<img alt="" src="https://img1.wsimg.com/isteam/ip/da3386ad-a465-4e41-834e-354cc46f825a/70f80135fcf50a71b06d085b696754fb.jpg"></p><p>



<img alt="" src="https://img1.wsimg.com/isteam/ip/da3386ad-a465-4e41-834e-354cc46f825a/dbc3944b28cf59f462822ad4b9ef13d4.jpg"></p><p>



<img alt="" src="https://img1.wsimg.com/isteam/ip/da3386ad-a465-4e41-834e-354cc46f825a/20420dc1c5dd7ef59468892174f0ebd8.jpg"></p><p>



<img alt="" src="https://img1.wsimg.com/isteam/ip/da3386ad-a465-4e41-834e-354cc46f825a/legacy/b48bc0be0273fc930aebca4a3068bbfc.jpg"></p><p>


<img alt="" src="https://img1.wsimg.com/isteam/ip/da3386ad-a465-4e41-834e-354cc46f825a/36cb00a962f852b4b16245459d5309b5.jpg"><img alt="" src="https://img1.wsimg.com/isteam/ip/da3386ad-a465-4e41-834e-354cc46f825a/9be3e8476e11b8501c6b47e4a40fba14.jpg"></p><p>


<img alt="" src="https://img1.wsimg.com/isteam/ip/da3386ad-a465-4e41-834e-354cc46f825a/3d6401e90232e06cd43a59d96943609f.jpg"></p><p>


<img alt="" src="https://img1.wsimg.com/isteam/ip/da3386ad-a465-4e41-834e-354cc46f825a/9e4ed7660cc6c6bb060372bd8029c7e1.jpg"></p><p>

<img alt="" src="https://img1.wsimg.com/isteam/ip/da3386ad-a465-4e41-834e-354cc46f825a/d806372471cb07bf4c48cb1d08ec0d6d.jpg"></p><p>


<img alt="" src="https://img1.wsimg.com/isteam/ip/da3386ad-a465-4e41-834e-354cc46f825a/178b2a7ec351f0fe548f747eea824f47.jpg"></p><p>


<img alt="" src="https://img1.wsimg.com/isteam/ip/da3386ad-a465-4e41-834e-354cc46f825a/c591196df893a43366dbf0e6cb3c6b19.jpg"></p><p>




<img alt="" src="https://img1.wsimg.com/isteam/ip/da3386ad-a465-4e41-834e-354cc46f825a/ac9c9b3a4c7160358dc528264bcf4fbe.jpg"></p><p>




&nbsp;


<img alt="" width="667" height="508" src="https://img1.wsimg.com/isteam/ip/da3386ad-a465-4e41-834e-354cc46f825a/legacy/att_cheshire_const_2_rqb9.jpg"></p><p>


Construction Phase</p><p>




<img alt="" width="667" height="538" src="https://img1.wsimg.com/isteam/ip/da3386ad-a465-4e41-834e-354cc46f825a/legacy/att_cheshire_const_15_eu8q.jpg"><br>
The circular cut-out on the left in the above photo is for one of several air intake tunnels.</p><p>

<img alt="" width="667" height="495" src="https://img1.wsimg.com/isteam/ip/da3386ad-a465-4e41-834e-354cc46f825a/legacy/att_cheshire_const_16_jaah.jpg"></p><p>


<img alt="" width="667" height="493" src="https://img1.wsimg.com/isteam/ip/da3386ad-a465-4e41-834e-354cc46f825a/legacy/att_cheshire_const_17_s5r1.jpg"></p><p>


<img alt="" width="667" height="500" src="https://img1.wsimg.com/isteam/ip/da3386ad-a465-4e41-834e-354cc46f825a/legacy/att_cheshire_const_20.jpg"></p><p>


<img alt="" width="667" height="500" src="https://img1.wsimg.com/isteam/ip/da3386ad-a465-4e41-834e-354cc46f825a/legacy/att_cheshire_1_const_buldozer.jpg"><br>
The large&nbsp;corregated metal pipes in the above photo are air intake and exhaust tunnels.<br>
(see below).</p><p>

<img alt="" src="https://img1.wsimg.com/isteam/ip/da3386ad-a465-4e41-834e-354cc46f825a/3bbf005f4352c24a5ad7cce01936ff4e.jpg"><br>
Louver type blast valves.</p><p>


<img alt="" src="https://img1.wsimg.com/isteam/ip/da3386ad-a465-4e41-834e-354cc46f825a/b2fc0d22c49805606e50b79e38cfec35.jpg"><br>
Redundant chilled-water system.</p><p>

<img alt="" width="667" height="500" src="https://img1.wsimg.com/isteam/ip/da3386ad-a465-4e41-834e-354cc46f825a/legacy/att_cheshire_1_const_vent_side_2.jpg"></p><p>


<img alt="" src="https://img1.wsimg.com/isteam/ip/da3386ad-a465-4e41-834e-354cc46f825a/legacy/att_cheshire_1_const_walls.jpg"><br>
Massive amounts of rebar were used to reinforce the concrete.&nbsp; <br>
The round penetrations allowed outside air and exhaust to enter/leave the building and supported blast valves on the exterior.</p><p>


<img alt="" width="667" height="500" src="https://img1.wsimg.com/isteam/ip/da3386ad-a465-4e41-834e-354cc46f825a/legacy/att_cheshire_1const_almost_done.jpg"><br>
When the facility was finished it was covered with a minimum of 10 feet of earth.</p><span>The</span><span> next four images show the huge air intake and exhaust tunnels. Also visible in the first photo are the&nbsp;fresh water tanks on the left and the four&nbsp;45,000 gallon generator fuel tanks in the background.</span><br>
<img alt="" width="667" height="536" src="https://img1.wsimg.com/isteam/ip/da3386ad-a465-4e41-834e-354cc46f825a/legacy/att_cheshire_const_19_4jdw.jpg"><br>
In the foreground:&nbsp; the air intake tunnels<br>
On the left, two fresh water tanks.<br>
Generator fuel takes are in the background.<p>


<img alt="" width="667" height="480" src="https://img1.wsimg.com/isteam/ip/da3386ad-a465-4e41-834e-354cc46f825a/legacy/att_cheshire_const_21_s2ja.jpg"><br>
Air intake and exhaust tunnels.</p><p>



<img alt="" width="667" height="534" src="https://img1.wsimg.com/isteam/ip/da3386ad-a465-4e41-834e-354cc46f825a/legacy/att_cheshire_const_42.jpg"><br>
Intake and exhaust.</p><span>&nbsp;</span><img alt="" width="667" height="500" src="https://img1.wsimg.com/isteam/ip/da3386ad-a465-4e41-834e-354cc46f825a/legacy/att_cheshire_const_32_y1vd.jpg"><br>
</span><span lang="EN"><span>Four </span><span><span lang="EN">45,000 fuel gallon tanks with 180,000 gallon capacity to power the huge generators which would&nbsp;provide emergency power during power outages and when the facility was locked down.</span></span></span><br>
<span><img alt="" src="https://img1.wsimg.com/isteam/ip/da3386ad-a465-4e41-834e-354cc46f825a/legacy/att_cheshire_const_18_tfrl.jpg"><br>
Blast valves being installed on the air intake. You can judge the size by <br>
comparing the valves to the two workers in the image.<p>


<img alt="" width="667" height="533" src="https://img1.wsimg.com/isteam/ip/da3386ad-a465-4e41-834e-354cc46f825a/legacy/att_cheshire_const_40.jpg"></p><p>



<img alt="" src="https://img1.wsimg.com/isteam/ip/da3386ad-a465-4e41-834e-354cc46f825a/legacy/att_cheshire_const_41.jpg"><br>
Sewage ejector system.</p><p>


<img alt="" width="667" height="500" src="https://img1.wsimg.com/isteam/ip/da3386ad-a465-4e41-834e-354cc46f825a/legacy/att_cheshire_const_36.jpg"></p><p>



<img alt="" width="667" height="500" src="https://img1.wsimg.com/isteam/ip/da3386ad-a465-4e41-834e-354cc46f825a/legacy/att_cheshire_const_37.jpg"><br>
Two of the huge air handling blowers can be seen in this picture . . . part of the massive <br>
chemical, biological and nuclear air filtration system.</p><p>


<img alt="" width="667" height="472" src="https://img1.wsimg.com/isteam/ip/da3386ad-a465-4e41-834e-354cc46f825a/legacy/att_cheshire_const_39.jpg"></p></span><span><span><img alt="" width="667" height="500" src="https://img1.wsimg.com/isteam/ip/da3386ad-a465-4e41-834e-354cc46f825a/legacy/att_cheshire_1_const_genset.jpg"><br>
One of the three generators ready to be installed. These units were gas-turbine and <br>
manufactured by Solar Crop.</span><p>



<img alt="" width="667" height="421" src="https://img1.wsimg.com/isteam/ip/da3386ad-a465-4e41-834e-354cc46f825a/legacy/att_cheshire_const_25.jpg"><br>
Kitchen facilities were provided as the workers would have to shelter on site for up to 30 days.</p><p>


<img alt="" width="667" height="500" src="https://img1.wsimg.com/isteam/ip/da3386ad-a465-4e41-834e-354cc46f825a/legacy/att_cheshire_const_29.jpg"><br>
Even the plumbing fixtures are on springs and utilize flex joints so that they will still function after the shock wave from&nbsp; a nearby nuclear detonation occurs.</p><p>


<img alt="" width="667" height="500" src="https://img1.wsimg.com/isteam/ip/da3386ad-a465-4e41-834e-354cc46f825a/legacy/att_cheshire_const_30.jpg"></p></span><span><p>

<img alt="" src="https://img1.wsimg.com/isteam/ip/da3386ad-a465-4e41-834e-354cc46f825a/legacy/att_cheshire_1_orig_hanging_rack.jpg"><br>
One of the original racks hanging from the ceiling by springs.</p><p>



<img alt="" width="667" height="476" src="https://img1.wsimg.com/isteam/ip/da3386ad-a465-4e41-834e-354cc46f825a/legacy/att_cheshire_1_orig_fmac_pix.jpg"><br>
1971 image of the Cheshire control room.</p><p>


<img alt="" src="https://img1.wsimg.com/isteam/ip/da3386ad-a465-4e41-834e-354cc46f825a/3ff831178b4bfb615878e49702781ab4.jpg"></p></span></p><p><span><span><span><br>
Interior:</span><span>After checking in with Security and getting buzzed in through two above ground doors it's time to go down the stairs, six flights of them!</span><br>
<img alt="" width="667" height="500" src="https://img1.wsimg.com/isteam/ip/da3386ad-a465-4e41-834e-354cc46f825a/legacy/att_cheshire_stair_2.jpg"><img alt="" src="https://img1.wsimg.com/isteam/ip/da3386ad-a465-4e41-834e-354cc46f825a/legacy/att_cheshire_stairs.jpg"><p>


One of the first things that you'll notice as you go down are the interesting lighting fixtures hanging from the ceiling by springs to provide shock protection.<br>
<img alt="" src="https://img1.wsimg.com/isteam/ip/da3386ad-a465-4e41-834e-354cc46f825a/legacy/att_cheshire_spring_lamp.jpg"></p><p>


Originally these two solid steel blast doors were mechanically interlocked so that only one could be open at a time to provide overpressure protection from a nuclear blast.</p></span><img alt="" width="800" height="600" src="https://img1.wsimg.com/isteam/ip/da3386ad-a465-4e41-834e-354cc46f825a/legacy/att_cheshire_doors.jpg"><img alt="" width="800" height="600" src="https://img1.wsimg.com/isteam/ip/da3386ad-a465-4e41-834e-354cc46f825a/legacy/att_cheshire_doors_intl.jpg"></span><span><span>First stop is the decontamination shower.<br>
</span><img alt="" src="https://img1.wsimg.com/isteam/ip/da3386ad-a465-4e41-834e-354cc46f825a/legacy/att_cheshire_shower.jpg"></span><span><span>Once inside you'll notice that all of the original equipment is mounted<br>
to the structure with large springs.</span><br>
<img alt="" src="https://img1.wsimg.com/isteam/ip/da3386ad-a465-4e41-834e-354cc46f825a/legacy/att_cheshire_door_controller.jpg"><img alt="" width="800" height="600" src="https://img1.wsimg.com/isteam/ip/da3386ad-a465-4e41-834e-354cc46f825a/legacy/att_cheshire_panels.jpg"></span><span><span>The facility's air handling system is immense.&nbsp; The heat load produced by the equipment required that a significant amount of air be moved into the building, filtered, cooled and either humidified or de-humidified.&nbsp; The requirement to remove waste heat was just as stringent.<p>

Air is drawn into the facility via three huge intakes such as the one below.</p></span><br>
<img alt="" width="800" height="600" src="https://img1.wsimg.com/isteam/ip/da3386ad-a465-4e41-834e-354cc46f825a/legacy/att_cheshire_exhaust_ext.jpg"><span>The above ground vents lead into these huge ventilation tunnels.</span><br>
<img alt="" width="800" height="600" src="https://img1.wsimg.com/isteam/ip/da3386ad-a465-4e41-834e-354cc46f825a/legacy/att_cheshire_exh_chamber.jpg"><img alt="" width="800" height="600" src="https://img1.wsimg.com/isteam/ip/da3386ad-a465-4e41-834e-354cc46f825a/legacy/att_cheshire_exhaust_ladder.jpg"><img alt="" width="800" height="600" src="https://img1.wsimg.com/isteam/ip/da3386ad-a465-4e41-834e-354cc46f825a/legacy/att_cheshire_exhaust_tube.jpg"><img alt="" width="800" height="600" src="https://img1.wsimg.com/isteam/ip/da3386ad-a465-4e41-834e-354cc46f825a/legacy/att_cheshire_exhaust_w_rick.jpg"></span><span><span>The tunnels originally had incredibly heavy duty blast valves connecting them to the facilities interior.&nbsp; The valves have been removed and an access passageway has been cut through the exterior wall of the structure. Note the thickness of the outer wall.<br>
</span><img alt="" src="https://img1.wsimg.com/isteam/ip/da3386ad-a465-4e41-834e-354cc46f825a/legacy/att_cheshire_exhaust.jpg"></span><span><span>The facility utilized a sophisticated air filtration system that would filter out<br>
chemical, biological and/or nuclear contamination.<br>
<img alt="" src="https://img1.wsimg.com/isteam/ip/da3386ad-a465-4e41-834e-354cc46f825a/legacy/att_cheshire_filters.jpg"><img alt="" src="https://img1.wsimg.com/isteam/ip/da3386ad-a465-4e41-834e-354cc46f825a/legacy/att_cheshire_filters_2.jpg"><img alt="" src="https://img1.wsimg.com/isteam/ip/da3386ad-a465-4e41-834e-354cc46f825a/legacy/att_cheshire_more_filters.jpg"><br>
</span><p>


<img alt="" width="800" height="600" src="https://img1.wsimg.com/isteam/ip/da3386ad-a465-4e41-834e-354cc46f825a/legacy/att_cheshire_1_batteries.jpg"><br>
Just some of the dozens of battery banks.</p><p>


<img alt="" width="800" height="600" src="https://img1.wsimg.com/isteam/ip/da3386ad-a465-4e41-834e-354cc46f825a/legacy/att_cheshire_1_chillers.jpg"><img alt="" width="800" height="600" src="https://img1.wsimg.com/isteam/ip/da3386ad-a465-4e41-834e-354cc46f825a/legacy/att_cheshire_1_genset_exhaust_thru_wall.jpg"><img alt="" width="800" height="600" src="https://img1.wsimg.com/isteam/ip/da3386ad-a465-4e41-834e-354cc46f825a/legacy/att_cheshire_1_springs.jpg"></p><p>



<img alt="" src="https://img1.wsimg.com/isteam/ip/da3386ad-a465-4e41-834e-354cc46f825a/legacy/att_cheshire_1_toilet_on_springs_1.jpg"><br>
We've seen these spring-mounted toilets at other hardened facilities!</p><p>


<img alt="" width="800" height="600" src="https://img1.wsimg.com/isteam/ip/da3386ad-a465-4e41-834e-354cc46f825a/legacy/att_cheshire_1_tunnel_1.jpg"><br>
Above:&nbsp; Another ventilation tunnel.</p><p>


<img alt="" width="800" height="600" src="https://img1.wsimg.com/isteam/ip/da3386ad-a465-4e41-834e-354cc46f825a/legacy/att_cheshire_14.jpg"></p><p>

<img alt="" width="800" height="600" src="https://img1.wsimg.com/isteam/ip/da3386ad-a465-4e41-834e-354cc46f825a/legacy/att_cheshire_genset_panel.jpg"></p><span size="4">One of three 750kVa gas-turbine gensets.</span><p>


<img alt="" width="800" height="600" src="https://img1.wsimg.com/isteam/ip/da3386ad-a465-4e41-834e-354cc46f825a/legacy/att_cheshire_turbine.jpg"></p><span size="4">The actual turbine engine&nbsp;is surprisingly small.</span><p>


<img alt="" width="800" height="600" src="https://img1.wsimg.com/isteam/ip/da3386ad-a465-4e41-834e-354cc46f825a/legacy/att_cheshire_1_genset_exhaust_thru_wall_gu4t.jpg"><br>
Generator exhaust stacks through wall.</p><p>


<img alt="" width="800" height="600" src="https://img1.wsimg.com/isteam/ip/da3386ad-a465-4e41-834e-354cc46f825a/legacy/att_cheshire_1_exhaust_into_tunnel.jpg"><br>
The gensets exhaust into the HVAC exhaust tunnel.</p><p>


<img alt="" width="800" height="600" src="https://img1.wsimg.com/isteam/ip/da3386ad-a465-4e41-834e-354cc46f825a/legacy/att_cheshire_1_equip_room.jpg"><img alt="" width="800" height="600" src="https://img1.wsimg.com/isteam/ip/da3386ad-a465-4e41-834e-354cc46f825a/legacy/att_cheshire_1_springs_ugmn.jpg"><br>
Spring mounted redundant water pumps.</p><p>





<img alt="" width="800" height="600" src="https://img1.wsimg.com/isteam/ip/da3386ad-a465-4e41-834e-354cc46f825a/legacy/att_cheshire_panels_z5y4.jpg"><img alt="" width="800" height="600" src="https://img1.wsimg.com/isteam/ip/da3386ad-a465-4e41-834e-354cc46f825a/legacy/att_cheshire_pumps_81wl.jpg"><img alt="" src="https://img1.wsimg.com/isteam/ip/da3386ad-a465-4e41-834e-354cc46f825a/legacy/att_cheshire_sewer_ejector_pump_1ovg.jpg"><img alt="" width="800" height="600" src="https://img1.wsimg.com/isteam/ip/da3386ad-a465-4e41-834e-354cc46f825a/legacy/att_cheshire_turb_comb_jv8l.jpg"></p><p>


<img alt="" width="800" height="600" src="https://img1.wsimg.com/isteam/ip/da3386ad-a465-4e41-834e-354cc46f825a/legacy/att_cheshire_cbr_filter_wrvh.jpg"><br>
Part of the "CBR", chemical, biological and radiological air filtration system.</p><p>

<img alt="" width="800" height="600" src="https://img1.wsimg.com/isteam/ip/da3386ad-a465-4e41-834e-354cc46f825a/legacy/att_cheshire_1_hoist_door_ext_11id.jpg"><br>
Extremely heavy blast door leading to the hoist chamber.</p><p>


<img alt="" src="https://img1.wsimg.com/isteam/ip/da3386ad-a465-4e41-834e-354cc46f825a/legacy/att_cheshire_1_hoist_door.jpg"><br>
Note the thickness of this door and the latch mechanism.<br>
Once unlatched it took an immense effort to push the door open<br>
due to its weight even though it was well balanced.</p><p>

<img alt="" src="https://img1.wsimg.com/isteam/ip/da3386ad-a465-4e41-834e-354cc46f825a/legacy/att_cheshire_1_hinge.jpg"><br>
Note the size of the hinge.</p><p>

<img alt="" width="800" height="600" src="https://img1.wsimg.com/isteam/ip/da3386ad-a465-4e41-834e-354cc46f825a/legacy/att_cheshire_const_49_1ohu.jpg"><img alt="" width="800" height="600" src="https://img1.wsimg.com/isteam/ip/da3386ad-a465-4e41-834e-354cc46f825a/legacy/att_cheshire_const_50_3v60.jpg"><br>
Kitchen and cafeteria.</p><p>


<img alt="" width="800" height="600" src="https://img1.wsimg.com/isteam/ip/da3386ad-a465-4e41-834e-354cc46f825a/legacy/att_cheshire_survival_5_qpn7.jpg"><br>
Adjacent to the cafeteria was a room stocked with survival supplies including food, cots, blankets, razors and shaving cream, <br>
radiation survey equipment and survival manuals.</p><p>


<img alt="" width="800" height="600" src="https://img1.wsimg.com/isteam/ip/da3386ad-a465-4e41-834e-354cc46f825a/legacy/att_cheshire_survival__8_6o4c.jpg"><img alt="" src="https://img1.wsimg.com/isteam/ip/da3386ad-a465-4e41-834e-354cc46f825a/legacy/att_cheshire_survival_1_t45m.jpg"><img alt="" width="800" height="556" src="https://img1.wsimg.com/isteam/ip/da3386ad-a465-4e41-834e-354cc46f825a/legacy/att_cheshire_survival_11_01ie.jpg"><img alt="" width="800" height="600" src="https://img1.wsimg.com/isteam/ip/da3386ad-a465-4e41-834e-354cc46f825a/legacy/att_cheshire_survival_12_u6zg.jpg"><img alt="" src="https://img1.wsimg.com/isteam/ip/da3386ad-a465-4e41-834e-354cc46f825a/legacy/att_cheshire_survival_2_0nlm.jpg"><img alt="" src="https://img1.wsimg.com/isteam/ip/da3386ad-a465-4e41-834e-354cc46f825a/legacy/att_cheshire_survival_3_ysfk.jpg"><img alt="" width="800" height="600" src="https://img1.wsimg.com/isteam/ip/da3386ad-a465-4e41-834e-354cc46f825a/legacy/att_cheshire_survival_6_zrub.jpg"><img alt="" width="800" height="600" src="https://img1.wsimg.com/isteam/ip/da3386ad-a465-4e41-834e-354cc46f825a/legacy/att_cheshire_survival_7_arc2.jpg"><img alt="" width="667" height="691" src="https://img1.wsimg.com/isteam/ip/da3386ad-a465-4e41-834e-354cc46f825a/legacy/att_cheshire_survival_9_vbsf.jpg"></p><p>


<img alt="" width="667" height="500" src="https://img1.wsimg.com/isteam/ip/da3386ad-a465-4e41-834e-354cc46f825a/legacy/att_cheshire_survival_10_xrub.jpg"><img alt="" src="https://img1.wsimg.com/isteam/ip/da3386ad-a465-4e41-834e-354cc46f825a/legacy/att_cheshire_survival_4_zcg4.jpg"><br>
Clothing was available for contaminated workers&nbsp;including dozens of boxes of brand new<br>
Converse sneakers, c. 1968!</p><p>



<img alt="" src="https://img1.wsimg.com/isteam/ip/da3386ad-a465-4e41-834e-354cc46f825a/legacy/att_cheshire_chain_w52u.jpg"><br>
These underground facilities generally used hoists to bring equipment into the facility rather<br>
than elevators we assume because it was nearly impossible to harden an elevator.</p><p>


<img alt="" src="https://img1.wsimg.com/isteam/ip/da3386ad-a465-4e41-834e-354cc46f825a/legacy/att_cheshire_corridor.jpg"><br>
Access corridor.</p></span></p><div><p><span>Above ground:<p>


<img alt="" width="800" height="600" src="https://img1.wsimg.com/isteam/ip/da3386ad-a465-4e41-834e-354cc46f825a/legacy/att_cheshire_1_ext_u79r.jpg">This tower used to support AT&amp;T microwave communications antennas that provided a back-up comm path for the underground coaxial cable.</p><p>

<img alt="" src="https://img1.wsimg.com/isteam/ip/da3386ad-a465-4e41-834e-354cc46f825a/legacy/att_cheshire_1_tower.jpg"></p><p>

<img alt="" src="https://img1.wsimg.com/isteam/ip/da3386ad-a465-4e41-834e-354cc46f825a/legacy/att_cheshire_1_tower_2.jpg"></p></span></p><p>


<img alt="" width="800" height="600" src="https://img1.wsimg.com/isteam/ip/da3386ad-a465-4e41-834e-354cc46f825a/legacy/att_cheshire_rad_det_nfjb.jpg"></p><p><span>Gamma ray detector. In the background you can see one of the air exhaust gratings.</span><br>
<img alt="" src="https://img1.wsimg.com/isteam/ip/da3386ad-a465-4e41-834e-354cc46f825a/legacy/att_cheshire__blast_det.jpg">\<br>
<span>A nuclear blast detector located several hundred feet away from the facility.</span></p></div><p>


<img width="800" height="574" alt="" src="https://img1.wsimg.com/isteam/ip/da3386ad-a465-4e41-834e-354cc46f825a/legacy/att_ct_route_map_ch5s.jpg"></p></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[`find` + `mkdir` is Turing complete (307 pts)]]></title>
            <link>https://ogiekako.vercel.app/blog/find_mkdir_tc</link>
            <guid>41115941</guid>
            <pubDate>Wed, 31 Jul 2024 02:22:41 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://ogiekako.vercel.app/blog/find_mkdir_tc">https://ogiekako.vercel.app/blog/find_mkdir_tc</a>, See on <a href="https://news.ycombinator.com/item?id=41115941">Hacker News</a></p>
&lt;Unparsable&gt;]]></description>
        </item>
        <item>
            <title><![CDATA[Call of Duty: Warzone Caldera Data Set for Academic Use (164 pts)]]></title>
            <link>https://blog.activision.com/activision/2024/activision-releases-call-of-duty-warzone-caldera-data-set</link>
            <guid>41115619</guid>
            <pubDate>Wed, 31 Jul 2024 01:06:09 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://blog.activision.com/activision/2024/activision-releases-call-of-duty-warzone-caldera-data-set">https://blog.activision.com/activision/2024/activision-releases-call-of-duty-warzone-caldera-data-set</a>, See on <a href="https://news.ycombinator.com/item?id=41115619">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>
    <h2><b>Announcing the Open-Source Caldera Map Release</b></h2>
<p>With a vision to expand the knowledge base of the gaming industry, Activision is excited to share the release of an open-source data set featuring the map Caldera from <i>Call of Duty®: Warzone™</i> for non-commercial use.</p>
<p>This first-of-its-kind data set release for <i>Call of Duty</i><span>, now available in OpenUSD, contains the near-complete geometry of Caldera as well as a collection of randomly selected anonymized time samples showing how players move around the map. This initiative represents Activision’s commitment to innovation and growth in multiple fields, including AI learning, within the communities of academia and research, while propelling the advancement of game development. It brings to life the colossal and carefully crafted map that was home to many epic brawls in </span><i>Call of Duty: Warzone</i><span> and is production-proven and battle-tested.</span><br>
</p>

</div><div>
    
<h2><b>Why Open-Source Matters</b></h2>
<p>In an era where AI training and the evolution of authoring tools are pivotal, the availability of production-proven maps is crucial. By releasing Caldera as an open-source asset for non-commercial use, the technology teams at Activision aim to empower developers and educators with high-quality, production-validated and accessible resources. This is about collaborating with the gaming and research community to build a foundation for responsible innovation and learning across the industry.</p>

<h2><b>A Resource for Education and Training</b></h2>
<p>Our commitment to open source goes beyond development; Activision envisions these assets as invaluable educational resources. Students, educators, and professionals can utilize Caldera for training, demonstrations, and experimentation. This initiative encourages learning and skill development within the gaming community and beyond.</p>

<h2><b>Supporting AI Development</b></h2>
<p>Open-source assets like Caldera play a vital role in the advancement of artificial intelligence. By providing a rich, diverse environment, we facilitate the training of AI models, enhancing the industry’s understanding of complex geometries and interactions. This can lead to more intelligent systems, paving the way for the next generation of gaming and simulation technologies.</p>

<h2><b>Evolving Authoring Tools</b></h2>
<p>The gaming industry is consistently evolving with new authoring tools emerging regularly. By contributing assets to the open-source community, the Activision technology teams encourage the development of robust tools that can handle complex geometries and environments. This collaborative approach will drive innovation, making it easier for developers to create immersive experiences.</p>
<p>In a brief discussion with Activision’s Chief Technology Officer Natalya Tatarchuk and Senior Vice President, Fellow Software Engineer Michael Vance, the technology team details everything included in the set, the vision for the release, and how providing Caldera to academics and researchers can benefit the <i>Call of Duty</i> Community and positively impact the future of gaming.</p>

<p><b><u>What is the size and scale of the Caldera Data Set?</u></b></p>
<p><b>Michael Vance:</b> The <i>Call of Duty </i>Data Set featuring Caldera represents an extensive, in terms of world-size, scene-graph depth and geometric complexity, production-quality map, used for multiplayer games in <i>Call of Duty:</i> <i>Warzone</i>. The release of this map represents one of the largest production-validated open data set releases from the gaming industry in terms of complexity of geometry and instance counts. It also is one of the largest publicly available <a href="https://openusd.org/release/index.html">OpenUSD</a> data sets, providing an excellent test harness for OpenUSD itself.</p>

</div><div>
    <p><b>Natalya Tatarchuk</b>: We, at Activision, believe that it’s important for the gaming industry to help foster growth and innovation within the industry, to help evolve authoring tools, as well as provide excellent data for AI training and evolution of content generation techniques, and we believe that this data set provides a unique benefit for these goals.</p>
<p>The map's geometry data is approximately 4 GB but is comprised of more than five million meshes, 28 million primitives, and more than one-billion-point instances, which can also represent scene metadata such as volumes that we use for lighting processing. Its complexity is also a testament to the richness and detail that the team at Raven Software built, with help from Beenox, High Moon Studios, and the broader <i>Call of Duty</i> development teams.</p>

</div><div>
    
<p><u><b>Besides the geometry representing the Caldera map, what other data did you include in this data set?</b></u></p>
<p><b>Vance: </b>We have also included in-game character pathing and time samples showing how players behave on the map. For instance, one of the sets shows the paths players take throughout a match. While we have not included specific visualizations of these, the data is easily accessible, allowing different ways to explore and visualize them.</p>

</div><div>
    
<p><b><u>Why was Caldera selected as the map to release as part of this set?</u></b></p>
<p><b>Vance:</b> As our team looked through a variety of scenarios for the best data set, including multiple smaller multi-player maps, our priority was to choose a map that best represents the scale and complexity of our current design philosophy. It’s exciting for us to see Caldera continue to live on and help expand the games industry through academia and research. The hierarchical arrangement of the map also allows users to select sub-sections of the map to limit the scope of analysis or providing multiple smaller areas for comparison, which is useful in avoiding over-fitting issues by leaving other sections of the map for validation.</p>

<p><b><u>What do academics and researchers typically do with data sets such as this?</u></b></p>
<p><b>Tatarchuk:</b> Researchers are constantly in search of data sets that represent the fullness and complexity of modern-day production data, which is difficult for them to approximate in a traditional academic setting.</p>

</div><div>
    <p>The computer graphics industry has a strong legacy of canonical data sets—some may be familiar with for example the <a href="https://graphics.stanford.edu/data/3Dscanrep/">Stanford bunny</a>, <a href="https://casual-effects.com/g3d/data10/index.html#mesh10">Dabrovic Sponza</a>, or more recently <a href="https://www.disneyanimation.com/resources/moana-island-scene/">Disney’s Moana Island</a>, or <a href="https://animallogic.com/alab/">Animal Logic’s ALab</a>. Each of these has become an important part of research in the broader graphics and gaming industries, fostering innovation in areas such as mesh simplification, deferred rendering, and other modern lighting and shading approaches. With the lack of available production data at this scale, Caldera provides researchers an opportunity to explore these types of sets with more rigor.</p>

<p><b><u>What is your vision for what can come from the Caldera Data Set being released publicly?</u></b></p>
<p><b>Tatarchuk: </b>Activision is committed to continuously being innovative in technology and AI space to further the development of video games and to help drive the gaming community forward.</p>
<p>Responsible innovation in AI technologies can help propel industry-wide development of video games forward in a way that creates richer gaming experiences for players in the future.</p>
<p>One element of releasing Caldera is giving back to the community of research that has been so beneficial to the industry over the past decades. One of our goals is to broaden access to production data, allowing researchers to test their approaches in real-world scenarios, which will help accelerate the development of new solutions, as well as provide confidence that solutions can be deployed at production scale. We believe that Caldera’s release will be an impactful and material benefit to that effort.</p>
<p><b>Vance: </b>We are also interested in what new insights the research community will develop around object relationships, scene creation and editing, and other topics related to environmental construction with Caldera. The tabular data and metadata include providing opportunities for richer understanding of how players interact with the game, which can potentially lead to new insights on what makes specific layouts compelling for users.</p>
<p>As we learn what the research and academic community finds useful in the set, we want to create an ongoing dialog with them so we can continuously make updates that are helpful.</p>

<p><b><u>How can new technology or learnings from the Caldera Data Set benefit the Call of Duty community?</u></b></p>
<p><b>Vance:</b> While our game environments are already enormously complex, we feel a constant need to improve the play experience and deliver even more richness and detail. Innovations that come from this data set release could give more freedom and flexibility for our content teams to find the most engaging scenarios for our players. Insights into object relationships, procedural approaches to our world data, and other ideas could lead to more compact data representations on both disk and in memory. We are excited about what the academic community will produce based on Caldera and look forward to seeing new techniques that we could never have imagined.</p>

</div><div>
    
<h3><b>Join the Movement</b></h3>
<p>We believe that the industry can greatly benefit from more open-source contributions. Our motivation stems from a shared desire to inspire creativity and collaboration. We invite everyone—students, studios, vendors, partners, and beyond—to explore, utilize, and contribute to the further growth of our incredible industry.</p>
<p><a href="https://github.com/Activision/caldera"><b>Download the Call of Duty Data Set Now</b></a></p>
<p>Join us in this exciting journey and become part of a vibrant community dedicated to innovation, education, and collaboration.</p>

<p><b>Together, let’s shape the future of gaming and beyond!</b></p>

<p><i>© 2024 Activision Publishing, Inc. ACTIVISION, and CALL OF DUTY are trademarks of Activision Publishing, Inc. All other trademarks and trade names are the property of their respective owner</i></p>

</div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Superconducting Microprocessors? Turns Out They're Ultra-Efficient (2021) (145 pts)]]></title>
            <link>https://spectrum.ieee.org/new-superconductor-microprocessor-yields-a-substantial-boost-in-efficiency</link>
            <guid>41115591</guid>
            <pubDate>Wed, 31 Jul 2024 01:00:26 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://spectrum.ieee.org/new-superconductor-microprocessor-yields-a-substantial-boost-in-efficiency">https://spectrum.ieee.org/new-superconductor-microprocessor-yields-a-substantial-boost-in-efficiency</a>, See on <a href="https://news.ycombinator.com/item?id=41115591">Hacker News</a></p>
<div id="readability-page-1" class="page"><div data-headline="Superconducting Microprocessors? Turns Out They're Ultra-Efficient"><p>Computers&nbsp;use a staggering amount of energy today. According to <a href="https://www.bloomberg.com/news/articles/2020-01-25/cutting-back-on-sending-emails-could-help-fight-global-warming">one recent estimate</a>, data centers alone consume&nbsp;two percent of the world’s electricity, a figure that’s expected to climb to eight percent by the end of the decade. To buck that trend, though, perhaps the microprocessor, at the center of the computer universe, could be streamlined in entirely new ways.&nbsp;</p><p>One group of researchers in Japan have taken this idea to the limit, creating a superconducting&nbsp;microprocessor—one with zero electrical resistance. The new device, the first of its kind, is described in a <a href="https://ieeexplore.ieee.org/document/9295318">study</a> published last month in the&nbsp;<em><a href="https://ieeexplore.ieee.org/xpl/RecentIssue.jsp?punumber=4">IEEE Journal of Solid-State Circuits</a></em>.</p><p>Superconductor&nbsp;microprocessors could offer a potential solution for more energy efficient computing power—but for the fact that, at present, these designs require ultra-cold temperatures&nbsp;below 10 kelvin (or -263 degrees Celsius). The research group in Japan sought to create a superconductor microprocessor that’s adiabatic, meaning that, in principle, energy is not gained or lost from the system during the computing process.</p><p><img id="4df11" data-rm-shortcode-id="5287d04936df71b6e2a3321fb2f9318b" data-rm-shortcode-name="rebelmouse-image" lazy-loadable="true" src="https://spectrum.ieee.org/media-library/probe-and-setup-photos.jpg?id=26144781&amp;width=980" data-runner-src="https://spectrum.ieee.org/media-library/probe-and-setup-photos.jpg?id=26144781&amp;width=980" width="1240" height="655" alt="Probe and Setup photos"><small placeholder="Add Photo Caption...">Left:&nbsp;The chip-end of a custom-built helium immersion probe used to test superconducting chips. Right:&nbsp;The connection-end of the helium immersion probe connected to testing equipment via coaxial cables. The probe is inserted into a liquid helium dewar to achieve a cryogenic temperature of 4.2 Kelvin.</small><small placeholder="Add Photo Credit...">Photos:&nbsp;Christopher Ayala</small></p><p>While adiabatic semiconductor microprocessors <a href="https://ieeexplore.ieee.org/abstract/document/8914699">exist</a>, the new microprocessor prototype, called MANA (Monolithic Adiabatic iNtegration Architecture), is the world’s first adiabatic superconductor microprocessor. It’s composed of <a href="https://en.wikipedia.org/wiki/Niobium">superconducting&nbsp;</a><span><a href="https://en.wikipedia.org/wiki/Niobium">niobium</a> and</span>&nbsp;relies on hardware components called adiabatic quantum-flux-parametrons (AQFPs). <span>Each AQFP is composed of a few fast-acting <a href="https://en.wikipedia.org/wiki/Josephson_effect">Josephson junction</a> switches,&nbsp;which require very little energy to support superconductor electronics. The MANA microprocessor consists of more than 20,000 Josephson junctions (or more than 10,000 AQFPs) in total.</span></p><p>Christopher Ayala is an Associate Professor at the <a href="https://ias.ynu.ac.jp/en/index.html">Institute of Advanced Sciences</a> at Yokohama National University, in Japan, who helped develop the new microprocessor. “The AQFPs used to build the microprocessor have been optimized to operate adiabatically such that the energy drawn from the power supply can be recovered under relatively low clock frequencies up to around 10 GHz,” he explains. “This is low compared to the hundreds&nbsp;of gigahertz typically found in conventional superconductor electronics.”</p><p>This doesn’t mean&nbsp;that the group’s&nbsp;current-generation device hits 10 GHz speeds, however.&nbsp;In a press statement, Ayala added, “<span>We also show on a separate chip that the data processing part of the microprocessor can operate up to a clock frequency of 2.5 GHz making this on par with today’s computing technologies. We even expect this to increase to 5-10 GHz as we make improvements in our design methodology and our experimental setup.”&nbsp;</span></p><p><span>The price of entry for the niobium-based microprocessor is of course the cryogenics and the energy cost for cooling the system down to superconducting temperatures.&nbsp;&nbsp;</span></p><p>“But even when taking this cooling overhead into account,” says Ayala,&nbsp;“The AQFP is still about 80 times more energy-efficient when compared to the state-of-the-art semiconductor electronic device, [such as] 7-nm <a href="https://en.wikipedia.org/wiki/FinFET">FinFET</a>, available today.”</p><p>Since the MANA microprocessor requires liquid helium-level temperatures, it’s better suited for large-scale computing infrastructures like data centers and supercomputers, where cryogenic&nbsp;cooling systems could&nbsp;be used.</p><p>“Most of these hurdles—namely area efficiency and improvement of latency and power clock networks—are research areas we have been heavily investigating, and we already have promising directions to pursue,” he says.</p><p><em>This article appears in the March 2021 print issue as “Superconducting CPUs.”</em></p></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Our Audit of Homebrew (749 pts)]]></title>
            <link>https://blog.trailofbits.com/2024/07/30/our-audit-of-homebrew/</link>
            <guid>41114839</guid>
            <pubDate>Tue, 30 Jul 2024 22:39:21 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://blog.trailofbits.com/2024/07/30/our-audit-of-homebrew/">https://blog.trailofbits.com/2024/07/30/our-audit-of-homebrew/</a>, See on <a href="https://news.ycombinator.com/item?id=41114839">Hacker News</a></p>
<div id="readability-page-1" class="page"><div id="page" role="main">

			
				
<article id="post-107865">
	<!-- .entry-header -->

	<div>
		<p><em>By William Woodruff</em></p>
<p>This is a joint post with the Homebrew maintainers; <a href="https://brew.sh/2024/07/30/homebrew-security-audit/">read their announcement here</a>!</p>
<p>Last summer, we performed an audit of <a href="https://brew.sh/">Homebrew</a>. Our audit’s scope included <a href="https://github.com/Homebrew/brew">Homebrew/brew</a> itself (home of the brew CLI), and three adjacent repositories responsible for various security-relevant aspects of Homebrew’s operation:</p>
<ul>
<li><a href="https://github.com/Homebrew/actions">Homebrew/actions</a>: a repository of custom GitHub Actions used throughout Homebrew’s CI/CD;</li>
<li><a href="https://github.com/Homebrew/formulae.brew.sh">Homebrew/formulae.brew.sh</a>: the codebase responsible for Homebrew’s JSON index of installable packages;</li>
<li><a href="https://github.com/Homebrew/homebrew-test-bot">Homebrew/homebrew-test-bot</a>: Homebrew’s core CI/CD orchestration and lifecycle management routines.</li>
</ul>
<p>We found issues within Homebrew that, while not critical, could allow an attacker to load executable code at unexpected points and undermine the integrity guarantees intended by Homebrew’s use of sandboxing. Similarly, we found issues in Homebrew’s CI/CD that could allow an attacker to surreptitiously modify binary (“<a href="https://docs.brew.sh/Bottles">bottle</a>”) builds of formulae and potentially pivot from triggering CI/CD workflows to controlling the execution of CI/CD workflows and exfiltrating their secrets.</p>
<p>This audit was sponsored by the <a href="https://www.opentech.fund/">Open Tech Fund</a> as part of their larger mission to secure critical pieces of internet infrastructure. You can read the full report in <a href="https://github.com/trailofbits/publications#technology-product-reviews">our publications repository</a>.</p>
<h3>Homebrew</h3>
<p>Homebrew is the self-described “missing package manager for macOS (or Linux).” It serves as the <em>de facto</em> standard package manager for software developers on macOS, and <a href="https://formulae.brew.sh/analytics/install/365d/">serves hundreds of millions of package installs</a> annually. These installations include “keystone” packages such as <a href="https://formulae.brew.sh/formula/go#default">Golang</a>, <a href="https://formulae.brew.sh/formula/node#default">Node.js</a>, and <a href="https://formulae.brew.sh/formula/openssl@3#default">OpenSSL</a>, making Homebrew’s security (and the integrity of its builds) critical to the security of downstream software ecosystems as a whole. Homebrew’s core (not to be confused with <a href="https://github.com/Homebrew/homebrew-core">homebrew-core</a>) is a Ruby monolith responsible for providing the <a href="https://docs.brew.sh/Manpage"><code>brew</code> CLI</a> to users along with an <a href="https://rubydoc.brew.sh/">importable Ruby API</a>.</p>
<p>Since its inception in 2009, Homebrew has undergone several architectural shifts aimed at improving the reliability and usability of packages delivered to users: binary builds (bottles) were implemented, made into the default installation mechanism (replacing local source builds), and subsequently built solely on CI/CD to limit the risk of a compromised developer machine. Despite this increasingly static approach, Homebrew’s core codebase is fundamentally dynamic and, in many places, reflects Homebrew’s historical need for dynamic loading of <a href="https://docs.brew.sh/Formula-Cookbook">DSL-specified formulae</a> via user-controlled Ruby code.</p>
<h3>Scope</h3>
<p>Homebrew is both a user-installable package manager (the <code>brew</code> CLI) and a packaging ecosystem, with an extensive and bespoke CI/CD configuration for reviewing, building, and distributing bottles to end users. Our audit focused on aspects of both of these, and aimed to answer questions like (but not limited to) the following:</p>
<ul>
<li>Can a local actor induce unexpected execution of a formula’s DSL, e.g. without an explicit invocation of <code>brew install</code>?</li>
<li>Can a local actor induce unexpected evaluation of a tap’s formulae, e.g. from just <code>brew tap</code> with no subsequent user actions?</li>
<li>Can a local actor induce namespace confusions or conflicts within brew, resulting in <code>brew install foo</code> installing an unexpected formula?</li>
<li>Can a locally installed formula surreptitiously subvert or bypass Homebrew’s build isolation mechanisms?</li>
<li>Can an unprivileged or low-privilege CI/CD actor (such as a third-party contributor) pivot to a higher privilege in Homebrew’s CI/CD?</li>
<li>Can an unprivileged or low-privilege CI/CD actor surreptitiously taint or compromise a bottle build?</li>
<li>Can an unprivileged or low-privilege CI/CD actor establish persistence in Homebrew’s CI/CD?</li>
</ul>
<h3>Highlighted findings</h3>
<h4>brew</h4>
<p>During our review of the <code>brew</code> CLI’s codebase, we uncovered a number of findings that, while not critical, could potentially undermine Homebrew’s per-formula integrity and isolation properties. We also uncovered findings that could allow loading of formulae (i.e., executable code) from surprising sources, such as remote URLs.</p>
<p>Some findings of interest include:</p>
<ul>
<li>TOB-BREW-2, wherein a formula can influence the construction of its sandbox through string injection, resulting in a sandbox escape.</li>
<li>TOB-BREW-5, wherein Homebrew used a collision-prone hash function (MD5) for a synthetic namespace (<code>FormulaNamespace</code>) could allow an attacker to induce runtime confusion between formulae.</li>
<li>TOB-BREW-8, wherein a formula can surreptitiously include networked resources in its build without explicitly listing them via <code>resource</code> stanzas.</li>
<li>TOB-BREW-11, wherein a formula can potentially use a socket pivot to escape its build sandbox on macOS.</li>
<li>TOB-BREW-12, wherein a formula could opportunistically perform a privilege escalation through a user’s previously activated <code>sudo</code> token.</li>
<li>TOB-BREW-13, wherein <code>brew install</code> can be induced to install formulae from non-local URLs for any protocol supported by the version of <code>curl</code> being used, such as SFTP or SCP.</li>
</ul>
<p>Our overall evaluation of <a href="https://github.com/Homebrew/brew">Homebrew/brew</a> is reflected in our report: while extensively tested, Homebrew’s large API and CLI surface and informal local behavioral contract offer a large variety of avenues for unsandboxed, local code execution to an opportunistic attacker. These avenues do not necessarily violate Homebrew’s core security assumptions (which assume trustworthy formulae), but may be subverted either by malicious formulae or through unexpected sources of formula loading (such as insufficiently sanitized inputs).</p>
<h4>Homebrew’s CI/CD</h4>
<p>Our review of Homebrew’s CI/CD workflows and actions uncovered findings that, while not critical, could undermine the integrity of Homebrew’s CI/CD runs and allow a less-privileged user to pivot to a position of higher privilege or even obtain persistence on Homebrew’s self-hosted GitHub Actions runners.</p>
<p>Some findings of interest include:</p>
<ul>
<li>TOB-BREW-18, wherein multiple CI/CD workflows use the <code>pull_request_target</code> trigger to allow third-party pull requests to run code in the context of Homebrew’s upstream repository, potentially enabling either credential disclosure or tampering with Homebrew’s bottle builds.</li>
<li>TOB-BREW-23, wherein multiple CI/CD workflows inadvertently allow shell injection via unsanitized <code>workflow_dispatch</code> inputs, potentially enabling vertical movement by a less-privileged user (i.e., one who can dispatch workflows but not modify them).</li>
</ul>
<p>Beyond CI/CD-specific findings, many brew findings are also salient in the CI/CD setting:</p>
<ul>
<li>TOB-BREW-6, which describes a lack of sandboxing/isolation during archive extraction, could be used by a less-privileged CI actor to pivot into a higher-privileged context by inducing extraction of a formula or other executable code that gets auto-loaded and executed during the CI’s lifecycle.</li>
<li>TOB-BREW-13, described above, could be used by a less-privileged CI actor to pivot into a higher-privileged context, by inducing arbitrary code execution through <code>brew install</code> of a formula not present in the CI’s pre-configured (presumed trusted) context.</li>
</ul>
<p>Our report concludes that Homebrew’s CI/CD, while mature and effective at reducing the number of human touch-points in Homebrew’s package lifecycle, is complex and relies on misuse-prone patterns common in GitHub Actions workflows (such as dangerous workflow triggers and mixing of configuration, code, and data via template expansion). These patterns do not necessarily enable persistence or pivoting by a fully external actor, but may be leveraged by a lower-privileged insider (such as a rogue maintainer) to undermine the integrity and isolation assumptions made by Homebrew’s CI/CD.</p>
<h3>Takeaways</h3>
<p>Auditing a package management ecosystem such as Homebrew poses unique challenges. Local package management tools install and execute arbitrary third-party code by design and, as such, typically have informal and loosely defined boundaries between expected and unexpected code execution. This is especially true in packaging ecosystems like Homebrew, where the “carrier” format for packages (formulae) is itself executable code (Ruby scripts, in Homebrew’s case).</p>
<p>Throughout the audit, we worked closely with the <a href="https://github.com/Homebrew/brew?tab=readme-ov-file#who-we-are">Homebrew maintainers</a> and the <a href="https://docs.brew.sh/Homebrew-Governance">Homebrew PLC</a> and would like to thank them for sharing their extensive knowledge and expertise. We would also like to thank <a href="https://github.com/p-linnane">Patrick Linnane</a>, Homebrew’s security manager, in particular for his triage and coordination efforts on behalf of Homebrew.</p>

			</div><!-- .entry-content -->

	
</article><!-- #post-107865 -->
						<!-- #nav-below -->
		
					<!-- #comments .comments-area -->

			
			</div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Creativity fundamentally comes from memorization (299 pts)]]></title>
            <link>https://shwin.co/blog/creativity-fundamentally-comes-from-memorization</link>
            <guid>41114825</guid>
            <pubDate>Tue, 30 Jul 2024 22:37:24 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://shwin.co/blog/creativity-fundamentally-comes-from-memorization">https://shwin.co/blog/creativity-fundamentally-comes-from-memorization</a>, See on <a href="https://news.ycombinator.com/item?id=41114825">Hacker News</a></p>
<div id="readability-page-1" class="page"><article id="block-blog-creativity-fundamentally-comes-from-memorization"><p id="block-b294026f0085409aa8083c2ba28086bb">July 2024</p><p id="block-13c08ff8edaa462fb8c83ec3719a40c6">I'm often made fun of for bringing a "system" into creative outlets.</p><p id="block-c048424fee404b37b3b7a95b1d3bc957">Things like:</p><ul><li id="block-6680669f67f645c5aa7a44d5746724db">written-down heuristics on best DJ transitions</li><li id="block-3aee7afa7481460b982a09507f4862f6">breaking down the humor patterns of comedians and memes</li><li id="block-3973a2736bfc486c82eefa8e35488322">or a checklist of best practices for competitive video games (e.g. Rocket League, Call of Duty).</li></ul><p id="block-b5ce1052ad514429b7b2e6b54d2edc4b">But I think this critique misunderstands what creativity truly is: </p><p id="block-17becdb07d9d4765830940e025f7fb80">a flash of inspiration connecting internalized concepts.</p><p id="block-6264bddc13e5415abf9f3248b0ebb897">The inspirational lightning bolt writers and artists experience can't happen unless they know how to write or draw. A pun can't be created unless the author sees the similarity between one word and another they already know. A DJ can't mashup two songs unless they're familiar with both.</p><p id="block-84e00f4ae01b454ba45792c9f4bf6bb6">By definition, you can't even be certain of novelty without familiarity of existing works.</p><p id="block-d75e7185a08b4e798f0ab38112d7367a">Creativity comes to those who have internalized the patterns of their art -- they can see the connection or novelty because it's all in their head.</p><p id="block-63a9acfe180645bf97d0853ddcf1c3ab">Therefore autonomy enables creativity, and a system helps achieve autonomy quicker.</p><span id="e40b61990d524cdc833da032c37b103f"></span><h2 id="block-e40b61990d524cdc833da032c37b103f">It all starts with learning</h2><p id="block-1a59aab06cbb45b795069d6a5b770ce3">Some time back I discovered a method for learning anything quickly.</p><p id="block-9cfd275902ec421db980418a21772263">It involved two steps:</p><ol type="1"><li id="block-75684240e00246ee947a919579aa3174">Memorizing the different classifications/patterns in a concept [1]</li><li id="block-51b5b44c29f240bd9283217c7ff9d2f4">Exposing myself to a breadth of cases so I could match the real-world example to one of the previously learned patterns</li></ol><p id="block-468e43b751dc4a70acbc0127594a2e2e">For many that remember school, this won't sound novel. Yet what's often missed is the application beyond academic subjects:</p><ul><li id="block-9103cf62851048c1893434742f057a23">sports - learning to recognize weaknesses in a defense</li><li id="block-248cb6c7a0e440d08a3ec9aaffde0db5">sales - learning to recognize someone's "conversational type"</li><li id="block-0946c6799975459abbf56d49fdd2866f">humor - recognizing common opportunities for humor in a situation</li></ul><p id="block-a570b4558af044b19a50e6ea03791202">Even academically, while older western curriculums seemed to emphasize memorization, new school teaching seems to have shifted towards understanding-based, which is just a memorization aid. [1]</p><p id="block-d9f9da27b8064bbf9fc0002e19950143">Eastern cultures, on the other hand, have maintained focus on drilling these primitives to unlock autonomy, as shown by popular tutoring services like Kumon -- which involve daily, timed tests to develop speed.</p><p id="block-a0a2ffe5bc5542bdaa16fa3a4de0916c">Growing up with Indian parents in California, I was exposed to both. My mom would write daily Kumon sheets out by hand for me to do, and teach me from Indian textbooks from the same grade (which were much more advanced than the US equivalents). The result was me breezing through the US school system without much thought. [2]</p><p id="block-23ddb919f3d9432587ddf91968620ffb">The key here is memorization's role in learning. We often tout the difference between memorization and true "understanding", which are indeed distinct. Memorizing the different methods of attacking mathematical integrations is different from being able to use the right one in the moment.</p><p id="block-33938c60a47b47c4821fc05d78ab52a9">But I maintain that such pattern recognition is just another form of memorization, though often a more subconscious one. This is learned from repeated exposure, and what I'm attempting to do when I try to see a "breadth" of cases after learning the framework and available patterns to use.</p><p id="block-db98f257a6974f7a988966612384332a">What this is really doing under the hood, is creating a heuristic and... wait for it... memorizing it!</p><p id="block-72ceb407a5b04463a1b49732298cb23d">Once this heuristic is internalized, it becomes a new primitive and we focus our attention to higher-level problems.</p><p id="block-0d1890092d36484f90c9fd2c60088982">Yet even if knowledge is memorized without understanding (as high schoolers so often do) — this creates an opportunity for understanding to manifest at a later date. I’ll never forget the shock I received when working through a proof in college on electromagnetic waves and suddenly ending up with 3e8 — a value I’d memorized blindly as the speed of light.</p><span id="fd8cda833b8b485d8345b1aab87b426b"></span><h2 id="block-fd8cda833b8b485d8345b1aab87b426b">But doesn't this make things mechanical instead of creative and intuitive?</h2><p id="block-885b86d619314dcdb1fefc4775a1bef4">But doesn't this stifle creativity? Making things mechanical instead of creative and intuitive?</p><p id="block-fce16ad752d8478a99274dc9f5afcf67">On the contrary, it enables creativity and intuitiveness by reducing energy needed for the basics, freeing you up to focus on higher-level novelty.</p><p id="block-5a6f30e22974482e93c57f4dc8218007">Once a dancer learns the fundamental movements of their specialization, they're able to improvise. So are pianists once they learn scales, and mathematicians (though sadly many of us never experience the joy of mathematical improvisation -- as Paul Lockhart covers in his <a href="https://worrydream.com/refs/Lockhart_2002_-_A_Mathematician's_Lament.pdf" target="_blank" rel="noopener noreferrer">Mathematician's Lament</a>).</p><p id="block-10abebbfd3c649d88df90feae9396612">The key is understanding that a system doesn't directly <em>make</em> creativity, it just <em>enables</em> it. Memorization’s role is similar.</p><p id="block-9574f3d9f6b442bbb0077ee0afe0a2f6">Another strategy that works well in both humor and famous EDM drops is "violating the expectation", but you need to know the expectation before you can violate it. Once you learn music theory, you're able to violate it in ways that resonate. Avant-garde art requires knowing what the establishment is to push the boundaries as orthogonally as possible.</p><p id="block-e1c59eb2795a4e419601b64a07acd0b4">One of my best personal examples is learning sales (which eventually be another blog post). As a not-intuitively charismatic guy, I had to learn systems for it. Things like tactical delivery skills:</p><ul><li id="block-3d0b3cca2e734e8a8e4b383357a3f649">pause for 2 seconds before responding</li><li id="block-2bddb45f76014d739c80ebac80b69011">don't use too many conditionals in a sentence</li><li id="block-8c3e8ad888ca432485921ea2315d36c4">start with the answer, then go into detail (McKinsey Pyramid Principle)</li></ul><p id="block-76fb363a4e494cacb4cc4e3ec952d78a">As well as what questions to ask (from SPIN selling):</p><ul><li id="block-5516d55a56864f8ab016db873c858c78">situation questions</li><li id="block-eb073e09f82a41e1a492cb92c42d1239">problem questions</li><li id="block-2a33b15957f5401281ea0cf160ccd03d">impact questions</li><li id="block-3478f81fc7ca4d71885b8d178186a0f0">needs-payoff questions</li></ul><p id="block-7bc9c8e3a14d49d283bfd238a7471b3f">While at first calls were clunky, once internalized -- creativity abounds. Recognizing when the convo is naturally jumping straight to the "Impact" section of questions means I don't force us back to the "Problem" questions, we just shift forward.</p><p id="block-065b1194e7584e5c9ef232ad17104fe6">All of a sudden sales calls (and human interactions in general) get fun, life improves.</p><span id="0aed9d6f394e49c19136d90e64a857c2"></span><h2 id="block-0aed9d6f394e49c19136d90e64a857c2">Ramifications</h2><p id="block-bb43b4245463422e8efa20685f1d1ca6">The obvious thing I've taken from this is my learning system: using the steps above I can learn things quickly to accomplish personal/career goals.</p><p id="block-767586cab08944559da65a647bca8c41">Most recently:</p><ul><li id="block-011dd87820b541f5aecf8084b16a755c">how to sell</li><li id="block-4b8745b5876c47d893c46a783a9b8bd5">how to fundraise</li><li id="block-9989bcf871d44f639334364dcd75eed6">how to be wittier</li></ul><p id="block-338f1fd91b3f467e8d267786db568e96">The less obvious thing is a creativity system.</p><p id="block-42576caa39a8496fa27998579d07406d">If creativity is born from autonomy in multiple areas, then one way to become more creative is to become autonomous in many areas!</p><p id="block-a53459bb1f4e46b49639652cea8cdf21">This can be within a single domain, like music. Deeply studying and learning the patterns of hip-hop and country can lead to the creation of a hit fusion like Lil Nas X's Old Town Road.</p><p id="block-33d26ef64bfd4241bf4b50b00e40b85d">But it can also be across domains -- like we see in most startups today. I used to work as a reverse engineer hacking drones at Skysafe, which was a company born of intersecting expertise in information security + radio. Even Dopplio emerged from my understanding of information security exploits, magic tricks, and sales.</p><p id="block-91e726f78d7f4408a4619cfdc22e8c10">As the internet democratizes information and low-hanging fruit is harder to come by, we're seeing that expertise in multiple fields like this is needed to create something novel and valuable (as seen in startups, music).</p><p id="block-4d03755ad2504e19b94345ee5a3dd0c5">"Generalists" these days are more like "repeat specialists".</p><p id="block-d7607d36130e47548a3ab0f0fc60e31c">So if you want to be creative, learn lots of things in-depth, and learn how to learn them fast. Embrace systems to achieve this, and use them to free you up from the basics -- so you can focus on the novel.</p><p id="block-5d2355bf4be04ad0ada7e58f45a8adc8">If you’re interested in more dissections like this you can follow me on <a href="https://x.com/shw1nm" target="_blank" rel="noopener noreferrer">Twitter</a></p><p id="block-268092c36654412da099e07798ebe5e2"><u>Footnotes</u></p><p id="block-6e05ca4f05b94101970d45a23334d3d0">[1] I made both the "memorization" step and "US schools shifting to understanding-based" footnotes point here b/c they touch on something I call the "web of knowledge". Understanding something deeply means fitting into your model of the world and seeing how it connects to other learned patterns. Besides the connections to other subjects, the biggest value in this is ease of recall from having multiple "entryways" via the connected subjects. This is extremely valuable, and I naturally do this during my memorization step, but functionally is just another way to aid recall imo.</p><p id="block-d88538040b004cac87650bb2735d9ef9">[2] Yet America tends to dominate when it comes to creativity, why?</p><p id="block-f56eeb46828e44ec82005801e5020477">My theory is that while eastern students start with a much stronger base from this discipline, many never unlock the exponential gains that come from the joy of learning. Part of this is probably due to more stability in the US, with a more developed safety system, stable (although it may not seem like it) political and financial system relatively, with lots of opportunity -- we can focus on higher Maslow's-hierarchy needs like passion and self actualization.</p><p id="block-a47bc2bdfe74441da9dec316b0a849b0">This is partly why I think we're seeing (and will continue to see) Indians and Asians rise in prominence as kids raised with eastern fundamentals but the US love of learning unlock new levels of creativity. And as generational wealth builds, a branch out from the more traditionally "Asian" fields like STEM and into arts and US politics (we're already seeing this, with Vivek, Nikki Haley, etc.)</p></article></div>]]></description>
        </item>
    </channel>
</rss>