<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0">
    <channel>
        <title>HN100 - Readable Contents</title>
        <link>https://hn.algolia.com/api/v1/search_by_date?tags=%28story,poll%29&amp;numericFilters=points%3E100</link>
        <description>Uses Readability to add bodies to the RSS feed</description>
        <lastBuildDate>Sun, 13 Apr 2025 21:30:01 GMT</lastBuildDate>
        <docs>https://validator.w3.org/feed/docs/rss2.html</docs>
        <generator>https://github.com/jpmonette/feed</generator>
        <language>en</language>
        <item>
            <title><![CDATA[Why Fennel? (146 pts)]]></title>
            <link>https://fennel-lang.org/rationale</link>
            <guid>43673551</guid>
            <pubDate>Sun, 13 Apr 2025 15:37:05 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://fennel-lang.org/rationale">https://fennel-lang.org/rationale</a>, See on <a href="https://news.ycombinator.com/item?id=43673551">Hacker News</a></p>
<div id="readability-page-1" class="page">

<p>Fennel is a programming language that runs on the Lua runtime.</p>
<h2 id="why-lua">Why Lua?</h2>
<p>The Lua programming language is an excellent and very underrated
tool. Is it remarkably powerful yet keeps a very small footprint both
conceptually as a language and in terms of the size of its
implementation. (The reference implementation consists of about nineteen
thousand lines of C and compiles to 278kb.) Partly because it is so
simple, Lua is also extremely fast. But the most important thing about
Lua is that it's specifically designed to be put in other programs to
make them reprogrammable by the end user.</p>
<p>The conceptual simplicity of Lua stands in stark contrast to other
"easy to learn" languages like JavaScript or Python--Lua contains very
close to the minimum number of ideas needed to get the job done; only
Forth and Scheme offer a comparable simplicity. When you combine this
meticulous simplicity with the emphasis on making programs
reprogrammable, the result is a powerful antidote to prevailing trends
in technology of treating programs as black boxes out of the control of
the user.</p>
<h2 id="and-yet">And yet...</h2>
<p>So if Lua is so great, why not just use Lua? In many cases you
should! But there are a handful of shortcomings in Lua which over time
have shown to be error-prone or unclear. Fennel runs on Lua, and the
runtime semantics of Fennel are a subset of Lua's, but you can think of
Fennel as an alternate notation you can use to write Lua programs which
helps you avoid common pitfalls. This allows Fennel to focus on doing
one thing very well and not get dragged down with things like
implementing a virtual machine, a standard library, or profilers and
debuggers. Any library or tool that already works for Lua will work just
as well for Fennel.</p>
<p>The most obvious difference between Lua and Fennel is the
parens-first syntax; Fennel belongs to the Lisp family of programming
languages. You could say that this removes complexity from the grammar;
the paren-based syntax is more regular and has fewer edge cases. Simply
by virtue of being a lisp, Fennel removes from Lua:</p>
<ul>
<li>statements (everything is an expression),</li>
<li>operator precedence (there is no ambiguity about what comes first),
and</li>
<li>early returns (functions always return in tail positions).</li>
</ul>
<h2 id="variables">Variables</h2>
<p>One of the most common legitimate criticisms leveled at Lua is that
it makes it easy to accidentally use globals, either by forgetting to
add a <code>local</code> declaration or by making a typo. Fennel allows
you to use globals in the rare case they are necessary but makes it very
difficult to use them by accident.</p>
<p>Fennel also removes the ability to reassign normal locals. If you
declare a variable that will be reassigned, you must introduce it with
<code>var</code> instead. This encourages cleaner code and makes it
obvious at a glance when reassignment is going to happen. Note that Lua
5.4 introduced a similar idea with <code>&lt;const&gt;</code> variables,
but since Fennel did not have to keep decades of existing code like Lua
it was able to make the cleaner choice be the default rather than
opt-in.</p>
<h2 id="tables-and-loops">Tables and Loops</h2>
<p>Lua's notation for tables (its data structure) feels somewhat dated.
It uses curly brackets for both sequential (array-like) and key/value
(dictionary-like) tables, while Fennel uses the much more familiar
notation of using square brackets for sequential tables and curly
brackets for key/value tables.</p>
<p>In addition Lua overloads the <code>for</code> keyword for both
numeric "count from X to Y" style loops as well as more generic
iterator-based loops. Fennel uses <code>for</code> in the first case and
introduces the <code>each</code> form for the latter.</p>
<h2 id="functions">Functions</h2>
<p>Another common criticism of Lua is that it lacks arity checks; that
is, if you call a function without enough arguments, it will simply
proceed instead of indicating an error. Fennel allows you to write
functions that work this way (<code>fn</code>) when it's needed for
speed, but it also lets you write functions which check for the
arguments they expect using <code>lambda</code>.</p>
<h2 id="other">Other</h2>
<p>If you've been programming in newer languages, you are likely to be
spoiled by pervasive destructuring of data structures when binding
variables, as well as by pattern matching to write more declarative
conditionals. Both these are absent from Lua and included in Fennel.</p>
<p>Finally Fennel includes a macro system so that you can easily extend
the language to include new syntactic forms. This feature is
intentionally listed last because while lisp programmers have
historically made a big deal about how powerful it is, it is relatively
rare to encounter situations where such a powerful construct is
justified.</p>
<p>For a more detailed look at the guiding principles of Fennel from a
design perspective see <a href="https://fennel-lang.org/values">the
Values of Fennel</a>.</p>



</div>]]></description>
        </item>
        <item>
            <title><![CDATA[Skywork-OR1: new SOTA 32B thinking model with open weight (130 pts)]]></title>
            <link>https://github.com/SkyworkAI/Skywork-OR1</link>
            <guid>43673151</guid>
            <pubDate>Sun, 13 Apr 2025 14:42:16 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://github.com/SkyworkAI/Skywork-OR1">https://github.com/SkyworkAI/Skywork-OR1</a>, See on <a href="https://news.ycombinator.com/item?id=43673151">Hacker News</a></p>
<div id="readability-page-1" class="page"><div dir="auto">


<p dir="auto"><h2 tabindex="-1" dir="auto">üî• News</h2><a id="user-content--news" aria-label="Permalink: üî• News" href="#-news"></a></p>
<ul dir="auto">
<li><strong>April 13, 2025</strong>: We release the <strong><code>Skywork-OR1</code></strong> (Open Reasoner 1) series of models, including <strong><code>Skywork-OR1-Math-7B</code></strong>, <strong><code>Skywork-OR1-32B-Preview</code></strong>, and <strong><code>Skywork-OR1-7B-Preview</code></strong>. We open-source
<ul dir="auto">
<li>ü§ó Model weights: <a href="https://huggingface.co/Skywork/Skywork-OR1-Math-7B" rel="nofollow"><code>Skywork-OR1-Math-7B</code></a>,  <a href="https://huggingface.co/Skywork/Skywork-OR1-32B-Preview" rel="nofollow"><code>Skywork-OR1-32B-Preview</code></a>, <a href="https://huggingface.co/Skywork/Skywork-OR1-7B-Preview" rel="nofollow"><code>Skywork-OR1-7B-Preview</code></a></li>
<li>ü§ó Training data: <a href="https://huggingface.co/datasets/Skywork/Skywork-OR1-RL-Data" rel="nofollow"><code>Skywork-OR1-RL-Data</code></a> (Coming Soon)</li>
<li>üßë‚Äçüíª Code: <a href="https://github.com/SkyworkAI/Skywork-OR1"><code>Skywork-OR1</code></a></li>
<li>We also release a <a href="https://capricious-hydrogen-41c.notion.site/Skywork-Open-Reaonser-Series-1d0bc9ae823a80459b46c149e4f51680" rel="nofollow">Notion Blog</a> to share detailed training recipes and extensive experimental results, analysis, and insights, dedicated to helping the community to better research, understand, and push the frontier of open reasoning models.</li>
</ul>
</li>
</ul>
<p dir="auto"><h2 tabindex="-1" dir="auto">üìñ Overview</h2><a id="user-content--overview" aria-label="Permalink: üìñ Overview" href="#-overview"></a></p>
<div dir="auto">
<p><a target="_blank" rel="noopener noreferrer" href="https://github.com/SkyworkAI/Skywork-OR1/blob/main/assets/skywork-or1-math-7b-multi-stage.png"><img src="https://github.com/SkyworkAI/Skywork-OR1/raw/main/assets/skywork-or1-math-7b-multi-stage.png" width="60%"></a></p><p dir="auto"><sub>The AIME24 scores versus training steps of Skywork-OR1-Math-7B in our multi-stage training pipeline.</sub></p>
</div>
<p dir="auto">The <strong><code>Skywork-OR1</code></strong> (Open Reasoner 1) model series consists of powerful math and code reasoning models trained using large-scale rule-based reinforcement learning with carefully designed datasets and training recipes. This series includes two general-purpose reasoning models‚Äî<strong><code>Skywork-OR1-7B-Preview</code></strong> and <strong><code>Skywork-OR1-32B-Preview</code></strong>‚Äîalong with a math-specialized model, <strong><code>Skywork-OR1-Math-7B</code></strong>.</p>
<ul dir="auto">
<li><strong><a href="https://huggingface.co/Skywork/Skywork-OR1-Math-7B" rel="nofollow"><code>Skywork-OR1-Math-7B</code></a></strong> is specifically optimized for mathematical reasoning, scoring <strong>69.8</strong> on AIME24 and <strong>52.3</strong> on AIME25 ‚Äî well ahead of all models of similar size.</li>
<li><strong><a href="https://huggingface.co/Skywork/Skywork-OR1-32B-Preview" rel="nofollow"><code>Skywork-OR1-32B-Preview</code></a></strong> delivers the 671B-parameter Deepseek-R1 performance on math tasks (AIME24 and AIME25) and coding tasks (LiveCodeBench).</li>
<li><strong><a href="https://huggingface.co/Skywork/Skywork-OR1-7B-Preview" rel="nofollow"><code>Skywork-OR1-7B-Preview</code></a></strong> outperforms all similarly sized models in both math and coding scenarios.</li>
</ul>
<p dir="auto">The final release version will be available in two weeks.</p>
<p dir="auto"><h2 tabindex="-1" dir="auto">üìä Evaluation</h2><a id="user-content--evaluation" aria-label="Permalink: üìä Evaluation" href="#-evaluation"></a></p>
<div dir="auto">
<p><a target="_blank" rel="noopener noreferrer" href="https://github.com/SkyworkAI/Skywork-OR1/blob/main/assets/32b_perf.png"><img src="https://github.com/SkyworkAI/Skywork-OR1/raw/main/assets/32b_perf.png" width="75%"></a>
<a target="_blank" rel="noopener noreferrer" href="https://github.com/SkyworkAI/Skywork-OR1/blob/main/assets/7b_perf.png"><img src="https://github.com/SkyworkAI/Skywork-OR1/raw/main/assets/7b_perf.png" width="75%"></a>
</p>
</div>

<p dir="auto">We evaluate our models on AIME24, AIME25, and LiveCodeBench. Instead of using Pass@1, which is common in prior work, we introduce Avg@K as the primary metric. This metric robustly measures a model's average performance across K independent attempts, reducing the impact of randomness and enhancing the reliability of the results. We believe that Avg@K provides a better reflection of a model's stability and reasoning consistency.</p>
<p dir="auto">We include the detailed results in the following table.</p>
<markdown-accessiblity-table><table>
<thead>
<tr>
<th>Model</th>
<th>AIME24 (Avg@32)</th>
<th>AIME25 (Avg@32)</th>
<th>LiveCodeBench (8/1/24-2/1/25) (Avg@4)</th>
</tr>
</thead>
<tbody>
<tr>
<td>DeepSeek-R1-Distill-Qwen-7B</td>
<td>55.5</td>
<td>39.2</td>
<td>37.6</td>
</tr>
<tr>
<td>Light-R1-7B-DS</td>
<td>59.1</td>
<td>44.3</td>
<td>39.5</td>
</tr>
<tr>
<td>DeepSeek-R1-Distill-Qwen-32B</td>
<td>72.9</td>
<td>59.0</td>
<td>57.2</td>
</tr>
<tr>
<td>TinyR1-32B-Preview</td>
<td>78.1</td>
<td>65.3</td>
<td>61.6</td>
</tr>
<tr>
<td>QwQ-32B</td>
<td>79.5</td>
<td>65.3</td>
<td>61.6</td>
</tr>
<tr>
<td>DeepSeek-R1</td>
<td>79.8</td>
<td>70.0</td>
<td>65.9</td>
</tr>
<tr>
<td><strong>Skywork-OR1-Math-7B</strong></td>
<td>69.8</td>
<td>52.3</td>
<td>43.6</td>
</tr>
<tr>
<td><strong>Skywork-OR1-7B-Preview</strong></td>
<td>63.6</td>
<td>45.8</td>
<td>43.9</td>
</tr>
<tr>
<td><strong>Skywork-OR1-32B-Preview</strong></td>
<td>79.7</td>
<td>69.0</td>
<td>63.9</td>
</tr>
</tbody>
</table></markdown-accessiblity-table>
<p dir="auto"><h2 tabindex="-1" dir="auto">üéØ Getting Started</h2><a id="user-content--getting-started" aria-label="Permalink: üéØ Getting Started" href="#-getting-started"></a></p>
<p dir="auto"><h3 tabindex="-1" dir="auto">Installation</h3><a id="user-content-installation" aria-label="Permalink: Installation" href="#installation"></a></p>
<p dir="auto">Docker environment:</p>
<div dir="auto" data-snippet-clipboard-copy-content="docker pull whatcanyousee/verl:vemlp-th2.4.0-cu124-vllm0.6.3-ray2.10-te2.0-megatron0.11.0-v0.0.6

# Launch the desired Docker image:
docker run --runtime=nvidia -it --rm --shm-size=&quot;10g&quot; --cap-add=SYS_ADMIN -v <image:tag>

# Inside the container, install Skywork-OR1
git clone https://github.com/SkyworkAI/Skywork-OR1.git &amp;&amp; cd Skywork-OR1 &amp;&amp; pip3 install -e ."><pre>docker pull whatcanyousee/verl:vemlp-th2.4.0-cu124-vllm0.6.3-ray2.10-te2.0-megatron0.11.0-v0.0.6

<span><span>#</span> Launch the desired Docker image:</span>
docker run --runtime=nvidia -it --rm --shm-size=<span><span>"</span>10g<span>"</span></span> --cap-add=SYS_ADMIN -v <span>&lt;</span>image:tag<span>&gt;</span>

<span><span>#</span> Inside the container, install Skywork-OR1</span>
git clone https://github.com/SkyworkAI/Skywork-OR1.git <span>&amp;&amp;</span> <span>cd</span> Skywork-OR1 <span>&amp;&amp;</span> pip3 install -e <span>.</span></pre></div>
<p dir="auto">Conda environment:</p>
<div dir="auto" data-snippet-clipboard-copy-content="# Installing Python 3.10 Environment.
conda create -n verl python==3.10
conda activate verl

# Installing RLLM dependencies.
pip3 install torch==2.4.0 --index-url https://download.pytorch.org/whl/cu124
pip3 install flash-attn --no-build-isolation
git clone https://github.com/SkyworkAI/Skywork-OR1.git
cd Skywork-OR1
pip3 install -e ."><pre><span><span>#</span> Installing Python 3.10 Environment.</span>
conda create -n verl python==3.10
conda activate verl

<span><span>#</span> Installing RLLM dependencies.</span>
pip3 install torch==2.4.0 --index-url https://download.pytorch.org/whl/cu124
pip3 install flash-attn --no-build-isolation
git clone https://github.com/SkyworkAI/Skywork-OR1.git
<span>cd</span> Skywork-OR1
pip3 install -e <span>.</span></pre></div>
<p dir="auto"><h3 tabindex="-1" dir="auto">Training ‚öôÔ∏è</h3><a id="user-content-training-Ô∏è" aria-label="Permalink: Training ‚öôÔ∏è" href="#training-Ô∏è"></a></p>
<p dir="auto">Training scripts are currently being organized and will be available in 1-2 days. Please stay tuned.</p>
<p dir="auto"><h3 tabindex="-1" dir="auto">Evaluation ‚öñÔ∏è</h3><a id="user-content-evaluation-Ô∏è" aria-label="Permalink: Evaluation ‚öñÔ∏è" href="#evaluation-Ô∏è"></a></p>
<p dir="auto">We provide evaluation scripts to reproduce the results of the <code>Skywork-OR1-Series</code>.</p>
<p dir="auto"><h4 tabindex="-1" dir="auto">AIME24 and AIME25</h4><a id="user-content-aime24-and-aime25" aria-label="Permalink: AIME24 and AIME25" href="#aime24-and-aime25"></a></p>
<p dir="auto">Evaluation data for AIME24 and AIME25 is already available in our GitHub repository.</p>
<div dir="auto" data-snippet-clipboard-copy-content="# Evalation AIME24
MODEL_PATH=Skywork/Skywork-OR1-32B-Preview \
DATA_PATH=or1_data/eval/aime24.parquet \
SAMPLES=32 \
TASK_NAME=Aime24_Avg$SAMPLES-Skywork_OR1_Math_7B \
bash ./or1_script/eval/eval_32b.sh

# Evalation AIME25
MODEL_PATH=Skywork/Skywork-OR1-Math-7B \
DATA_PATH=or1_data/eval/aime25.parquet \
SAMPLES=32 \
TASK_NAME=Aime25_Avg$SAMPLES-Skywork_OR1_Math_7B \
bash ./or1_script/eval/eval_7b.sh"><pre><span><span>#</span> Evalation AIME24</span>
MODEL_PATH=Skywork/Skywork-OR1-32B-Preview \
DATA_PATH=or1_data/eval/aime24.parquet \
SAMPLES=32 \
TASK_NAME=Aime24_Avg<span>$SAMPLES</span>-Skywork_OR1_Math_7B \
bash ./or1_script/eval/eval_32b.sh

<span><span>#</span> Evalation AIME25</span>
MODEL_PATH=Skywork/Skywork-OR1-Math-7B \
DATA_PATH=or1_data/eval/aime25.parquet \
SAMPLES=32 \
TASK_NAME=Aime25_Avg<span>$SAMPLES</span>-Skywork_OR1_Math_7B \
bash ./or1_script/eval/eval_7b.sh</pre></div>
<p dir="auto"><h4 tabindex="-1" dir="auto">LiveCodeBench</h4><a id="user-content-livecodebench" aria-label="Permalink: LiveCodeBench" href="#livecodebench"></a></p>
<p dir="auto">For Livecodebench, please download the data from <a href="https://huggingface.co/datasets/Skywork/LiveCodeBench" rel="nofollow">Hugging Face</a>.</p>
<div dir="auto" data-snippet-clipboard-copy-content="# Download LCB
huggingface-cli download Skywork/LiveCodeBench --repo-type=dataset --local-dir or1_data/eval/livecodebench
unzip or1_data/eval/livecodebench/livecodebench.zip -d or1_data/eval/livecodebench/
mv or1_data/eval/livecodebench/livecodebench/* or1_data/eval/livecodebench/

# Evalation LCB
MODEL_PATH=Skywork/Skywork-OR1-Math-7B \
DATA_PATH=or1_data/eval/livecodebench/livecodebench_2408_2502.parquet \
SAMPLES=4 \
TASK_NAME=LiveCodeBench_Avg$SAMPLES-Skywork_OR1_Math_7B \
bash ./or1_script/eval/eval_7b.sh"><pre><span><span>#</span> Download LCB</span>
huggingface-cli download Skywork/LiveCodeBench --repo-type=dataset --local-dir or1_data/eval/livecodebench
unzip or1_data/eval/livecodebench/livecodebench.zip -d or1_data/eval/livecodebench/
mv or1_data/eval/livecodebench/livecodebench/<span>*</span> or1_data/eval/livecodebench/

<span><span>#</span> Evalation LCB</span>
MODEL_PATH=Skywork/Skywork-OR1-Math-7B \
DATA_PATH=or1_data/eval/livecodebench/livecodebench_2408_2502.parquet \
SAMPLES=4 \
TASK_NAME=LiveCodeBench_Avg<span>$SAMPLES</span>-Skywork_OR1_Math_7B \
bash ./or1_script/eval/eval_7b.sh</pre></div>
<p dir="auto"><h2 tabindex="-1" dir="auto">üìÑ Technical Report</h2><a id="user-content--technical-report" aria-label="Permalink: üìÑ Technical Report" href="#-technical-report"></a></p>
<p dir="auto">Our technical report will be released soon. Stay tuned!</p>
<p dir="auto"><h2 tabindex="-1" dir="auto">üôè Acknowledgements</h2><a id="user-content--acknowledgements" aria-label="Permalink: üôè Acknowledgements" href="#-acknowledgements"></a></p>
<ul dir="auto">
<li>Both of our models are trained on top of <a href="https://huggingface.co/deepseek-ai/DeepSeek-R1-Distill-Qwen-7B" rel="nofollow"><code>DeepSeek-R1-Distill-Qwen-7B</code></a> and <a href="https://huggingface.co/deepseek-ai/DeepSeek-R1-Distill-Qwen-32B" rel="nofollow"><code>DeepSeek-R1-Distill-Qwen-32B</code></a>.</li>
<li>Both models are trained using <a href="https://github.com/SkyworkAI/Skywork-OR1">a custom fork</a> of the wonderful <a href="https://github.com/volcengine/verl"><code>verl</code></a> project.</li>
</ul>
<p dir="auto"><h2 tabindex="-1" dir="auto">üìö Citation</h2><a id="user-content--citation" aria-label="Permalink: üìö Citation" href="#-citation"></a></p>
<p dir="auto">We will update the citation once the technical report is released. In the meantime, please cite the following:</p>
<div dir="auto" data-snippet-clipboard-copy-content="@misc{skywork-or1-2025,
  title={Skywork Open Reaonser Series},
  author = {He, Jujie and Liu, Jiacai and Liu, Chris Yuhao and Yan, Rui and Wang, Chaojie and Cheng, Peng and Zhang, Xiaoyu and Zhang, Fuxiang and Xu, Jiacheng and Shen, Wei and Li, Siyuan and Zeng, Liang and Wei, Tianwen and Cheng, Cheng and An, Bo and Liu, Yang and Zhou, Yahui},
  howpublished={\url{https://capricious-hydrogen-41c.notion.site/Skywork-Open-Reaonser-Series-1d0bc9ae823a80459b46c149e4f51680}},
  note={Notion Blog},
  year={2025}
}"><pre><span>@misc</span>{<span>skywork-or1-2025</span>,
  <span>title</span>=<span><span>{</span>Skywork Open Reaonser Series<span>}</span></span>,
  <span>author</span> = <span><span>{</span>He, Jujie and Liu, Jiacai and Liu, Chris Yuhao and Yan, Rui and Wang, Chaojie and Cheng, Peng and Zhang, Xiaoyu and Zhang, Fuxiang and Xu, Jiacheng and Shen, Wei and Li, Siyuan and Zeng, Liang and Wei, Tianwen and Cheng, Cheng and An, Bo and Liu, Yang and Zhou, Yahui<span>}</span></span>,
  <span>howpublished</span>=<span><span>{</span>\url{https://capricious-hydrogen-41c.notion.site/Skywork-Open-Reaonser-Series-1d0bc9ae823a80459b46c149e4f51680}<span>}</span></span>,
  <span>note</span>=<span><span>{</span>Notion Blog<span>}</span></span>,
  <span>year</span>=<span><span>{</span>2025<span>}</span></span>
}</pre></div>
</div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[The Dark Side of the Moomins (219 pts)]]></title>
            <link>https://www.newstatesman.com/culture/books/2025/04/dark-side-of-the-moomins-tove-jansson</link>
            <guid>43672593</guid>
            <pubDate>Sun, 13 Apr 2025 13:15:57 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.newstatesman.com/culture/books/2025/04/dark-side-of-the-moomins-tove-jansson">https://www.newstatesman.com/culture/books/2025/04/dark-side-of-the-moomins-tove-jansson</a>, See on <a href="https://news.ycombinator.com/item?id=43672593">Hacker News</a></p>
<div id="readability-page-1" class="page"><article id="the-post">

        
<header>
    <div>
        <figure>

        <img width="708" height="945" src="https://dl6pgk4f88hky.cloudfront.net/2025/04/09/202515Moominsmain.jpg" alt="" decoding="async" fetchpriority="high" srcset="https://dl6pgk4f88hky.cloudfront.net/2025/04/09/202515Moominsmain.jpg 708w, https://dl6pgk4f88hky.cloudfront.net/2025/04/09/202515Moominsmain-397x529.jpg 397w, https://dl6pgk4f88hky.cloudfront.net/2025/04/09/202515Moominsmain-135x180.jpg 135w, https://dl6pgk4f88hky.cloudfront.net/2025/04/09/202515Moominsmain-464x618.jpg 464w, https://dl6pgk4f88hky.cloudfront.net/2025/04/09/202515Moominsmain-225x300.jpg 225w" sizes="(max-width: 1407px) 1407px, (max-width: 335px) 335px, (max-width: 705px) 705px, (max-width: 335px) 335px, (max-width: 689px) 689px, (max-width: 336px) 336px, (max-width: 210px) 210px, (max-width: 101px) 101px, (max-width: 1024px) 1024px, (max-width: 101px) 101px, (max-width: 397px) 397px, (max-width: 464px) 464px, (max-width: 797px) 797px, (max-width: 960px) 960px, (max-width: 314px) 314px, (max-width: 464px) 464px, (max-width: 735px) 735px, (max-width: 1038px) 1038px">
                <figcaption>Illustration by Moomin Characters‚Ñ¢</figcaption>
            </figure>
</div></header><!-- .entry-header-outer /-->
    
        <div id="figarocontent">
                

                <p>‚ÄúI could vomit over Moomintroll,‚Äù Tove Jansson confided in her notebook in the late 1950s. A decade after the hippo-like creature with low self-esteem made his debut appearance in 1945, Scandinavian homes had become versions of Moominvalley, with Moomin-themed aprons, curtains, wallpaper and crockery, while department stores stocked Moomins modelled in marzipan, ceramic and white leather (Jansson drew the line at Moomin sanitary towels). This world of whimsy bore little relation to the Finnish artist‚Äôs initial conception of the Moomintrolls.</p>



<p><em>The Moomins and the Great Flood</em>, the 60-page picture book not translated into English until 2005 and now celebrating its 80th anniversary, was written during the Winter War in 1939, when Russia‚Äôs invasion of Finland left 300,000 Finns homeless. (The Moomin estate is marking the anniversary by partnering with Counterpoints Arts and Refugee Week to commission artists to create public artworks inspired by the book.) A tale of displaced people and dangerous predators and living on borders, the first of the nine Moomin books begins with Moomintroll and Moominmamma arriving, ‚Äúlate in the afternoon one day at the end of August‚Äù, in ‚Äúthe deepest part of the great forest‚Äù. August, Jansson believed, was ‚Äúthe border between summer and winter‚Äù and twilight ‚Äúthe border between day and night‚Äù.</p>



<p>Half-Swedish and half-Finnish, half-storyteller and half-illustrator, a lover of both men and women, and an artist appealing equally to adults and children, Jansson was a border-dweller herself. A scratchy ink illustration on page one shows two tiny dark shapes, which might be roots or rocks, suspended beneath trees the size of Giant redwoods. Mother and son are in search of somewhere ‚Äúsnug‚Äù in which to hibernate, but they are also in search of Moominpappa, who long ago disappeared with the ‚Äúmostly invisible‚Äù Hattifatteners: it is striking how many of the characters in Jansson‚Äôs stories are searching for something, waiting for something, and in need of a home. The Moomins find another lost creature who will, in the later books, become Moomintroll‚Äôs best friend and foster-brother, Sniff. There was a time, Moominmamma tells the small boys, when Moomins made their homes behind the stoves in other peoples‚Äô houses and did not need to ‚Äútravel through fearsome forests and swamps in order to find somewhere to live‚Äù.</p>



<p>The Moomin stories were born, Jansson wrote to her friend Eva, ‚Äúwhen I was feeling sad and scared of bombs and wanted to get away from gloomy thoughts‚Ä¶ I would creep into an unbelievable world where everything was natural and friendly ‚Äì and possible.‚Äù The first book ‚Äúhad to be a fairy tale‚Äù with a ‚Äúhappy ending‚Äù, and so when the Moomins find Moominpappa they move into his stove-shaped house, which a flood has transplanted, Ark-like, to the valley where they will live, we are told, for ‚Äúthe whole of their lives‚Äù. There were no illustrations in Jansson‚Äôs first draft of <em>The Moomins and the Great Flood</em>. She had trained as a painter but during the war she ‚Äústood still‚Äù as an artist and was no longer able to think in colour, so ‚Äúit felt completely pointless to try to create pictures‚Äù. Putting the pages in a drawer, she forgot about them for the next six years until a friend suggested that they could, with pictures, be turned into a children‚Äôs book. <em>The Moomins and the Great Flood</em>, illustrated in sepia and black ink, was published only in Sweden, selling 219 copies in the first year.</p>



<p>The Moomins, at this point in their gestation, were broad-backed with trunk-like noses, horn-like ears, and flattish stomachs. Their waistlines increased with fame, but their characteristics remained the same: anxious, romantic Moomintroll, dependable Moominmamma, and Moominpappa, the reckless, self-absorbed melancholic whose longing for adventure threatens to destroy them all. Jansson had found her cast, her perfect length ‚Äì short to medium ‚Äì and the balance between words and pictures that would prove her genius. The writing is spare, weighed down with silences, the images saying what the words elide. <em>The Moomins and the Great Flood</em> ends with the creation of Moominvalley, the kind of place that the psychotherapist Donald Winnicott ‚Äì in whom Jansson had a strong interest ‚Äì would call a ‚Äúholding environment‚Äù where we can be determinedly ourselves. United in solipsism and contained by the love of Moominmamma, the Moomins and their eccentric friends live out their philosophies, compulsions, obsessions, paranoias, and various neuroses.</p>



<p>Five further Moomin books followed in quick succession:<em> Comet in Moominland</em> (1946), in which a fireball is seen ‚Äúdiving headlong‚Äù towards Moominvalley and the Moomins wait in a cave for extinction (a response to the Soviet bombing of Helsinki and the American bombings of Nagasaki and Hiroshima); <em>Finn Family Moomintroll </em>(1948), a celebration of Jansson‚Äôs first affair with a woman, the theatre director Vivica Bandler (‚ÄúO, to be a newly awakened Moomin dancing in the glass-green waves while the sun is rising‚Äù); <em>The Memoirs of Moominpappa</em>, a parody of the life of the 16th-century Italian sculptor Benvenuto Cellini and of male pomposity (‚ÄúWhen people read this book,‚Äù Moomintroll tells his father, ‚Äúthey are going to believe you are famous‚Äù); and<em> Moominsummer Madness</em> (1954), when another flood renders the creatures once again homeless.</p>



<p>The sixth novel, <em>Moominland Midwinter </em>(1958), written when Jansson was ready to ‚Äúvomit‚Äù over her creation, contains the most devastating account of depression in 20th-century literature. Waking up early during the annual hibernation, Moomintroll finds himself snowed in and utterly alone in an alien world whose pleasure principle has disappeared. From now on in the books, things get darker. Family relations break down completely in <em>Moominpappa at Sea</em> (1965) when Moominpappa, realising that he is a failed artist, drags his family away from Moominvalley to an uninhabited rock in the middle of the sea that is ‚Äúcompletely silent and terribly, terribly cold‚Äù. Here, in his attempt to control the waves, he loses his mind, while a desolate Moominmamma hides inside the mural of Moominvalley that she‚Äôs painted on the wall and Moomintroll, in love with a seahorse and profoundly depressed, finds a patch of earth on which to sleep. The island, meanwhile, shrinks with unhappiness.</p><section>
                        <p><a href="https://www.newstatesman.com/culture/books/2025/04/javascript(void);"><img decoding="async" src="https://dl6pgk4f88hky.cloudfront.net/2021/09/TNS_master_logo.svg"></a>
                        </p>
                            <p>Subscribe to The New Statesman today from only ¬£8.99 per month</p>
                            
                        </section>



<p>The final book, <em>Moominvalley in November</em> (1970), a spin on <em>Waiting for Godot</em>, takes place during the family‚Äôs absence. Their friends, not knowing where they have gone or why they left without saying goodbye, wait in the Moomins‚Äô abandoned house&nbsp; (the one in which they would live for ‚Äúthe whole of their lives‚Äù) for their return. There is no happy ending, and the readers who drank out of their Moomin mugs and slept beneath their Moomin duvet covers felt angry and cheated. But Jansson, aged 56, was at last free of her Frankenstein‚Äôs monster. A book in which nothing happens save the passing of time, <em>Moominvalley in November</em> is an absurdist masterpiece. There is an aesthetic satisfaction to the series, which begins and ends with disappearance. It is Moominpappa who vanishes in the first book, and the entire family in the last. One of the oddest aspects of the Moomin phenomenon is how these complex tales of apocalypse, breakdown and disfunction have been consistently misread as cutesy celebrations of domestic life.</p>



<figure><img decoding="async" width="768" height="1024" src="https://dl6pgk4f88hky.cloudfront.net/2025/04/09/202515ToveJansson-768x1024.jpg" alt="" srcset="https://dl6pgk4f88hky.cloudfront.net/2025/04/09/202515ToveJansson-768x1024.jpg 768w, https://dl6pgk4f88hky.cloudfront.net/2025/04/09/202515ToveJansson-397x529.jpg 397w, https://dl6pgk4f88hky.cloudfront.net/2025/04/09/202515ToveJansson-135x180.jpg 135w, https://dl6pgk4f88hky.cloudfront.net/2025/04/09/202515ToveJansson-464x618.jpg 464w, https://dl6pgk4f88hky.cloudfront.net/2025/04/09/202515ToveJansson-225x300.jpg 225w, https://dl6pgk4f88hky.cloudfront.net/2025/04/09/202515ToveJansson.jpg 778w" sizes="(max-width: 768px) 100vw, 768px"><figcaption>Jansson‚Äôs characters were a canvas for her own personality traits.  <em>Photo by Eva Konikoff</em></figcaption></figure>



<p>Tove Jansson was born in Helsinki in August 1914. Her father, Viktor (known as ‚ÄúFaffan‚Äù) was a sculptor from Finland‚Äôs Swedish-speaking minority and her mother, Signe Hammarsten (‚ÄúHam‚Äù) was a well-known draughtswoman, the daughter of a Swedish clergyman. Faffan‚Äôs work did not sell and so Ham was the principal breadwinner. By the time she was 14, Tove was also contributing to the family finances by drawing cartoons for the satirical magazine <em>Garm</em>. In her early twenties, her satires of Hitler and Stalin were placed on <em>Garm</em>‚Äôs cover. Faffan, who had returned from the Finnish Civil War (January-May 1918) a broken man, now fervently supported Germany and so he and his daughter were at loggerheads.</p>



<p>The Janssons saw themselves as bohemians but there is nothing relaxed about the family portrait Tove painted in 1942, which shows five stiff figures in a cramped room, each locked in their own isolation and looking in different directions. Ham and Faffan are in white overalls, one of Tove‚Äôs two brothers is in military uniform, while Tove herself, standing in the middle in a black hat, coat and gloves, looks as though her suitcase is packed and she is ready to board a train. ‚ÄúFaffan and I have said we hate each other,‚Äù she told a friend during this same year. ‚ÄúIt‚Äôs hell to be still living at home.‚Äù</p>



<p>Jansson had lived with Moomins since childhood, when her uncle told her tales about the trolls behind the kitchen stove who would, if she stole jam from the larder, rub their cold snouts against her legs until she froze. By the time she was in her teens the trolls had evolved in her imagination into frightening ‚Äúhouse ghosts‚Äù who made their presence known by breathing cold air on her neck: ‚ÄúTerrified, I turned the key in the lock and jumped into bed like a shot, and all that night I could hear the Moomintrolls pulling my slippers backwards and forwards under my bed.‚Äù Jansson‚Äôs first Moomin illustration (‚Äúthe ugliest thing I could think of‚Äù) was on the lavatory wall of the family‚Äôs island summer house, where it can still be admired by tourists.</p>



<p>The creatures had turned, by her late teens, into what Jansson‚Äôs biographer Boel Westin describes as ‚Äúominous creatures associated with dreams, confusion and emptiness‚Äù, drawn in a series of ‚Äúexpressive landscapes of boulders, seas, dark islands and deserted roads, fenced around with agitation, uncertainty and anguish‚Äù. By her early twenties Moomintroll had become Jansson‚Äôs ‚Äúangry signature character‚Äù. It is easy to overlook Moomintroll‚Äôs anger, which expresses itself largely as fear, but it comes to the surface when his <em>amour propre</em> is challenged, such as in the comic strip story <em>Moomin on the Riviera</em>, where his girlfriend, Snorkmaiden, runs off with the movie star Mr Brisk and Moomintroll challenges him to a duel.</p>



<p>The Moomintrolls were first introduced to an English audience in 1954 in the form of a comic strip in the <em>London Evening News</em> (circulation: 12 million) which by 1956 had been syndicated to 120 other papers in 20 further countries. These stories are funnier than those in the books and focus on what Jansson called ‚Äúpsychological moments‚Äù and Winnicott would call ‚Äúnameless dread‚Äù. Jansson had inadvertently become the analyst of the postwar psyche, but it was her own psyche she was exploring. The Moomin stories were, she said, ‚Äúabreactions‚Äù, a psychoanalytical term for catharsis (‚ÄúI abreacted hugely through this book,‚Äù she wrote of <em>Moominpappa at Sea</em>), and Jansson distributed herself throughout her characters: she was as dutiful and unassertive as Moomintroll, as misanthropic and frustrated as Moominpappa, as empathetic and reliable as Moominmamma, and as wild as the furious urchin Little My.</p>



<p>She hoped that the income from the comic strips would allow her to return to painting, but it became clear by 1957 that this would never happen. As well as containing the world‚Äôs fears, Jansson now singlehandedly controlled the Moomin merchandise industry, which involved answering by hand each of the 2,000 letters she received every year. ‚ÄúWe look forward to your valued reply soonest concerning Moomin motifs on toilet paper in pastel shades,‚Äù reads one letter.‚Äù ‚ÄúHi, my name is Olavi,‚Äù reads another. ‚ÄúYou write well but last time you did not make a happy ending. Why do you do this?‚Äù ‚ÄúWhat shall I do with my parents?‚Äù reads a third. ‚ÄúThey‚Äôre becoming more and more hopeless. Write!‚Äù</p>



<p>Jansson, like the Moomins, wanted only to hibernate but instead she found herself snowed in beneath ‚Äúan avalanche of things‚Äù, her world now composed, she said, of ‚Äúnewspapers, telephones, telegrams, post post post in heaps, stacks, avalanches, strangers, lectures, conversations, conversations, masses of words and myriads of children. And never alone. Never ever really alone‚Äù. One of the mysteries of Jansson‚Äôs personality is why she allowed the mass commercialisation of her delicate, subtle work; another is why, given the urgency of her creative drive, she didn‚Äôt employ a secretary to take over the administrative burden.</p>



<p>In 1969, around the same time that she completed the Moomin books with<em> Moominvalley in November</em>, Jansson drew her last comic strip and killed off her main character. Moomintroll is diagnosed by a psychiatrist, Dr Schr√ºnkel, with numerous complexes, and prescribed medication which makes him shrink until he completely disappears. The following year, Jansson‚Äôs younger brother Lasse took over the cartoons. Moomintroll was now resurrected, after which the stories continued to run until 1975.</p>



<p>Tove Jansson is not the first writer to fall out with her characters. Arthur Conan Doyle tried to kill off Sherlock Holmes by throwing him down the Reichenbach Falls, and after 30 years of living with Hercule Poirot, Agatha Christie described him as a ‚Äúdetestable, bombastic, tiresome, egocentric little creep‚Äù. What distinguishes Jansson is that she detested her readers even more than her characters. They are satirised in her first cartoon, <em>Moomin and the Brigands</em>, as the hordes of uninvited guests who exploit Moomin‚Äôs generosity and, once they have eaten him out of house and home, eat the home itself: ‚ÄúIt‚Äôs so difficult to tell your guests that you‚Äôd like your own bed sometimes,‚Äù Moomintroll confides to Sniff. ‚ÄúI must learn to say No‚Äù.</p>



<p>In 1963, Jansson and her partner, the graphic artist Tuulikki Pietil√§, built a cabin on the ‚Äúangry little skerry‚Äù of Klovharu, a rocky and isolated island which could be circumnavigated in four and a half minutes. Even here, where for the next 30 summers she did her best to disappear, she was pursued by boatloads of Moomin fans. ‚ÄúSeven strangers came‚Ä¶ to have coffee, drinks and soft drinks and talk and ‚Äòlook at me‚Äô‚Äù, Jansson wrote in her diary. ‚ÄúKiss my arse‚Ä¶ Threw stones. Angry.‚Äù</p>



<p><em>Frances Wilson‚Äôs ‚ÄúBurning Man: The Ascent of DH Lawrence‚Äù is published by Bloomsbury</em></p>



<p><em><strong>[See also: <a href="https://www.newstatesman.com/culture/art-design/2025/04/david-hockney-writ-large" target="_blank" rel="noopener">David Hockney writ large</a>]</strong></em></p>
<div>
    <h6>Content from our partners</h6>

        
            
            
        </div>

                        
                                        
        

    
<p>This article appears in the 10 Apr 2025 issue of the New Statesman, <a href="https://www.newstatesman.com/magazine/spring-special-2025"><span>Spring Special 2025</span></a></p>                
                                    <!-- <div class="dianomiMainDiv" style="min-height: 50px;position: relative!important;">
         
                        <div id='div-gpt-ad-3393934-1'>
                        <script>
                            googletag.cmd.push(function() { googletag.display('div-gpt-ad-3393934-1'); });
                        </script>
                        </div>
                    </div> -->
                    
                    
				            </div><!-- .entry-content /-->

        



    </article></div>]]></description>
        </item>
        <item>
            <title><![CDATA[A Reddit Bot Drove Me Insane (288 pts)]]></title>
            <link>https://posthuman.blog/this-reddit-post-fried-my-brain/</link>
            <guid>43672139</guid>
            <pubDate>Sun, 13 Apr 2025 12:03:05 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://posthuman.blog/this-reddit-post-fried-my-brain/">https://posthuman.blog/this-reddit-post-fried-my-brain/</a>, See on <a href="https://news.ycombinator.com/item?id=43672139">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>
    

    
        
    

    
        

        <p>
            <i>
                <time datetime="2025-04-12T11:00Z">
                    12 Apr, 2025
                </time>
            </i>
        </p>
    

    <p>I'm doomscrolling Reddit.</p>
<p>Every post is either political ragebait, recycled "funny" cat videos, "Am I the asshole for divorcing my husband after he killed our two children while drunk and high?"-type slop, or tired wojack memes.</p>
<p>Then, finally: an authentic, human-sounding title.</p>
<p>"Anyone else feel like the internet is just‚Ä¶ broken now?"</p>
<p><img src="https://bear-images.sfo2.cdn.digitaloceanspaces.com/posthuman/post-1.webp" alt="post"></p>
<p>The post has nearly 6,000 upvotes, hundreds of comments, and an unsettling sense of genuine despair:</p>
<p>"Everything online feels either like an ad, a hustle, or someone desperately trying to go viral. Nothing feels real anymore."</p>
<p>It resonates deeply. But as I read further, something nags at the back of my mind. The wording, the rhythm is too perfectly calibrated, suspiciously optimized to trigger maximum relatability. I click on the poster's username.</p>
<p><img src="https://bear-images.sfo2.cdn.digitaloceanspaces.com/posthuman/profile-1.webp" alt="profile"></p>
<p>Their profile is a barren wasteland of karma-farming garbage: viral pet clips, recycled feel-good stories, endless reposted memes. They churn out multiple threads daily yet never engage in comments. Typical bot behavior.</p>
<p>Returning to the original post, the last sentence catches my eye:</p>
<p>"This was written in 1928‚Äîit‚Äôs incredible how it predicted the moment we‚Äôre living in today and where we're heading."</p>
<p>The sentence is underlined, and colored blue: it's a hyperlink. Embedded neatly into the text, it uses a shortened domain "rddit.org". At first it seems legit. Platforms do shorten links for tracking and branding, after all. Twitter has t.co, Facebook uses fb.me. Makes sense Reddit might have something similar.</p>
<p>Yet I've never noticed Reddit using "rddit.org" before. Curiosity, perhaps paranoia, drives me to a quick WHOIS lookup.</p>
<p>Turns out "rddit.org" isn't owned by Reddit. It‚Äôs registered anonymously via a cheap freemium link shortener. It could redirect anywhere. I know better than to click shady links on Reddit...</p>
<p>I click it.</p>
<p>I'm swiftly redirected to Amazon, landing on a listing for a modern, illustrated edition of Edward L. Bernays' classic: "Propaganda." And there it is, undeniable in the URL bar: the affiliate tag, "manwithhairwe-20".</p>
<p>The book has thirteen oddly generic reviews. After clicking my way to the illustrator's Amazon profile, the truth emerges: the seller specializes in selling classic texts freshly "enhanced" with AI-generated art.</p>
<p>An AI-powered bot pretending to be a human, lamenting AI-powered bots who pretend to be human, to gain human trust, so that it can covertly market AI-illustrated books. The Trojan horse of late-stage capitalism, cyberpunk dystopia and fuckity-fuck-what-the-fuck-is-going-on.</p>
<p>I scroll back to the comments. There's hundreds of users interacting, none apparently noticing the ruse. The top comment mentions something called "Dead Internet Theory": the belief that most online interactions are automated loops of bots communicating with eachother.</p>
<p>The irony hits like a train. Did anyone commenting realize they were trying to engage with a bot designed to monetize their empathy? Maybe they were also bots, spiraling endlessly into their algorithmically optimized oblivion?</p>
<p>Sorting by controversial, I find one tiny, nearly invisible, buried comment:</p>
<p><img src="https://bear-images.sfo2.cdn.digitaloceanspaces.com/posthuman/comment-1.webp" alt="comment"></p>
<p>Is this commenter the only other surviving human? Or just another bot, designed to provoke more comments, more engagement?</p>
<p>My browser tabs multiply frantically. Reddit melts into conspiracy forums, WHOIS lookups, and archived Amazon profiles. Everything is spinning.</p>
<p>A bot selling fake empathy to promote fake products through a fake sense of community.</p>
<p>Maybe nothing is real anymore.</p>
<p>Was my spiraling paranoia exactly what they wanted? To drive me insane, so that I click more frantically, driving engagement metrics higher?</p>
<p>Are they watching, judging my reaction whilst calibrating tomorrow's psyop?</p>
<p>Quoting Orwell feels clich√©:</p>
<p>"If you want a picture of the future, <del>imagine a boot stamping on a human face</del> imagine a bot making you sad and angry in order to farm engagement and sell you AI-generated slop--forever."</p>


    

    
        

        
            


        
    


  </div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Whenever ‚Äì typed and DST-safe datetimes for Python (224 pts)]]></title>
            <link>https://github.com/ariebovenberg/whenever</link>
            <guid>43671308</guid>
            <pubDate>Sun, 13 Apr 2025 09:12:19 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://github.com/ariebovenberg/whenever">https://github.com/ariebovenberg/whenever</a>, See on <a href="https://news.ycombinator.com/item?id=43671308">Hacker News</a></p>
<div id="readability-page-1" class="page"><div data-hpc="true"><article itemprop="text"><p dir="auto"><h2 tabindex="-1" dir="auto">‚è∞ Whenever</h2><a id="user-content--whenever" aria-label="Permalink: ‚è∞ Whenever" href="#-whenever"></a></p>
<p dir="auto"><a href="https://pypi.python.org/pypi/whenever" rel="nofollow"><img src="https://camo.githubusercontent.com/4e74f63922fe9f56e3d70c0fbeed956f0a125040e18bb4ae7dc9d4d1358e9960/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f7768656e657665722e7376673f7374796c653d666c61742d73717561726526636f6c6f723d626c7565" alt="" data-canonical-src="https://img.shields.io/pypi/v/whenever.svg?style=flat-square&amp;color=blue"></a>
<a href="https://pypi.python.org/pypi/whenever" rel="nofollow"><img src="https://camo.githubusercontent.com/8ce85e0a35a60938657735fbca66544717e1e3deb6d7c507934c86a4f408ea66/68747470733a2f2f696d672e736869656c64732e696f2f707970692f707976657273696f6e732f7768656e657665722e7376673f7374796c653d666c61742d737175617265" alt="" data-canonical-src="https://img.shields.io/pypi/pyversions/whenever.svg?style=flat-square"></a>
<a href="https://pypi.python.org/pypi/whenever" rel="nofollow"><img src="https://camo.githubusercontent.com/b889c52d3c2a3b09e46dc4242bf61ee73e2b0a169701b52ffed29a661b61a7e4/68747470733a2f2f696d672e736869656c64732e696f2f707970692f6c2f7768656e657665722e7376673f7374796c653d666c61742d73717561726526636f6c6f723d626c7565" alt="" data-canonical-src="https://img.shields.io/pypi/l/whenever.svg?style=flat-square&amp;color=blue"></a>
<a href="https://mypy.readthedocs.io/en/stable/command_line.html#cmdoption-mypy-strict" rel="nofollow"><img src="https://camo.githubusercontent.com/407127697b56855b4a682102b20524f780da1e716901b9f8e5b03bdd5c148e7d/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f6d7970792d7374726963742d666f72657374677265656e3f7374796c653d666c61742d737175617265" alt="" data-canonical-src="https://img.shields.io/badge/mypy-strict-forestgreen?style=flat-square"></a>
<a href="https://github.com/ariebovenberg/whenever"><img src="https://camo.githubusercontent.com/eac205dbafd14a7c56d3470ab026a51508a217827d349ce0c5b4a9d62e3e7f41/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f636f7665726167652d3130302532352d666f72657374677265656e3f7374796c653d666c61742d737175617265" alt="" data-canonical-src="https://img.shields.io/badge/coverage-100%25-forestgreen?style=flat-square"></a>
<a href="https://github.com/ariebovenberg/whenever"><img src="https://camo.githubusercontent.com/78ca0108cd2e4c0c07e5c95aa381db672c00e2594d551defa19597fd13352ab4/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f616374696f6e732f776f726b666c6f772f7374617475732f61726965626f76656e626572672f7768656e657665722f636865636b732e796d6c3f6272616e63683d6d61696e267374796c653d666c61742d737175617265" alt="" data-canonical-src="https://img.shields.io/github/actions/workflow/status/ariebovenberg/whenever/checks.yml?branch=main&amp;style=flat-square"></a>
<a href="http://whenever.readthedocs.io/" rel="nofollow"><img src="https://camo.githubusercontent.com/523d0dfc97a5f853280a2e080e6b1efae52b385cd5449cd895656b604ff0279d/68747470733a2f2f696d672e736869656c64732e696f2f72656164746865646f63732f7768656e657665722e7376673f7374796c653d666c61742d737175617265" alt="" data-canonical-src="https://img.shields.io/readthedocs/whenever.svg?style=flat-square"></a></p>
<p dir="auto"><strong>Typed and DST-safe datetimes for Python, available in Rust or pure Python.</strong></p>
<p dir="auto">Do you cross your fingers every time you work with Python's datetime‚Äîhoping that you didn't mix naive and aware?
or that you avoided its <a href="https://dev.arie.bovenberg.net/blog/python-datetime-pitfalls/" rel="nofollow">other pitfalls</a>?
There‚Äôs no way to be sure...</p>
<p dir="auto">‚ú® Until now! ‚ú®</p>
<p dir="auto"><em>Whenever</em> helps you write <strong>correct</strong> and <strong>type checked</strong> datetime code,
using <strong>well-established concepts</strong> from <a href="#acknowledgements">modern libraries</a> in other languages.
It's also <strong>way faster</strong> than other third-party libraries‚Äîand usually the standard library as well.
If performance isn't your top priority, a <strong>pure Python</strong> version is available as well.</p>
  <p dir="auto">
    <themed-picture data-catalyst-inline="true"><picture>
        <source media="(prefers-color-scheme: dark)" srcset="https://raw.githubusercontent.com/ariebovenberg/whenever/main/benchmarks/comparison/graph-dark.svg">
        <source media="(prefers-color-scheme: light)" srcset="https://raw.githubusercontent.com/ariebovenberg/whenever/main/benchmarks/comparison/graph-light.svg">
        <img alt="Shows a bar chart with benchmark results." src="https://raw.githubusercontent.com/ariebovenberg/whenever/main/benchmarks/comparison/graph-light.svg">
    </picture></themed-picture>
  </p>
  <p dir="auto">
    <i>RFC3339-parse, normalize, compare to now, shift, and change timezone (1M times)</i>
  </p>

<blockquote>
<p dir="auto"><g-emoji alias="warning">‚ö†Ô∏è</g-emoji> <strong>Note</strong>: A 1.0 release is coming soon. Until then, the API may change
as we gather feedback and improve the library.
Leave a ‚≠êÔ∏è on GitHub if you'd like to see how this project develops!</p>
</blockquote>
<p dir="auto"><h2 tabindex="-1" dir="auto">Why not the standard library?</h2><a id="user-content-why-not-the-standard-library" aria-label="Permalink: Why not the standard library?" href="#why-not-the-standard-library"></a></p>
<p dir="auto">Over 20+ years, Python's <code>datetime</code> has grown
out of step with what you'd expect from a modern datetime library.
Two points stand out:</p>
<ol dir="auto">
<li>
<p dir="auto"><strong>It doesn't always account for Daylight Saving Time (DST)</strong>.
Here is a simple example:</p>
<div dir="auto" data-snippet-clipboard-copy-content="bedtime = datetime(2023, 3, 25, 22, tzinfo=ZoneInfo(&quot;Europe/Paris&quot;))
full_rest = bedtime + timedelta(hours=8)
# It returns 6am, but should be 7am‚Äîbecause we skipped an hour due to DST!"><pre><span>bedtime</span> <span>=</span> <span>datetime</span>(<span>2023</span>, <span>3</span>, <span>25</span>, <span>22</span>, <span>tzinfo</span><span>=</span><span>ZoneInfo</span>(<span>"Europe/Paris"</span>))
<span>full_rest</span> <span>=</span> <span>bedtime</span> <span>+</span> <span>timedelta</span>(<span>hours</span><span>=</span><span>8</span>)
<span># It returns 6am, but should be 7am‚Äîbecause we skipped an hour due to DST!</span></pre></div>
<p dir="auto">Note this isn't a bug, but a design decision that DST is only considered
when calculations involve <em>two</em> timezones.
If you think this is surprising, you
<a href="https://github.com/python/cpython/issues/91618" data-hovercard-type="issue" data-hovercard-url="/python/cpython/issues/91618/hovercard">are</a>
<a href="https://github.com/python/cpython/issues/116035" data-hovercard-type="issue" data-hovercard-url="/python/cpython/issues/116035/hovercard">not</a>
<a href="https://github.com/python/cpython/issues/112638" data-hovercard-type="issue" data-hovercard-url="/python/cpython/issues/112638/hovercard">alone</a>.</p>
</li>
<li>
<p dir="auto"><strong>Typing can't distinguish between naive and aware datetimes</strong>.
Your code probably only works with one or the other,
but there's no way to enforce this in the type system!</p>
<div dir="auto" data-snippet-clipboard-copy-content="# Does this expect naive or aware? Can't tell!
def schedule_meeting(at: datetime) -> None: ..."><pre><span># Does this expect naive or aware? Can't tell!</span>
<span>def</span> <span>schedule_meeting</span>(<span>at</span>: <span>datetime</span>) <span>-&gt;</span> <span>None</span>: ...</pre></div>
</li>
</ol>
<p dir="auto"><h2 tabindex="-1" dir="auto">Why not other libraries?</h2><a id="user-content-why-not-other-libraries" aria-label="Permalink: Why not other libraries?" href="#why-not-other-libraries"></a></p>
<p dir="auto">There are two other popular third-party libraries, but they don't (fully)
address these issues. Here's how they compare to <em>whenever</em> and the standard library:</p>
<div dir="auto">
<markdown-accessiblity-table><table>
<thead>
<tr>
<th></th>
<th>Whenever</th>
<th>datetime</th>
<th>Arrow</th>
<th>Pendulum</th>
</tr>
</thead>
<tbody>
<tr>
<td>DST-safe</td>
<td>‚úÖ</td>
<td>‚ùå</td>
<td>‚ùå</td>
<td><g-emoji alias="warning">‚ö†Ô∏è</g-emoji></td>
</tr>
<tr>
<td>Typed aware/naive</td>
<td>‚úÖ</td>
<td>‚ùå</td>
<td>‚ùå</td>
<td>‚ùå</td>
</tr>
<tr>
<td>Fast</td>
<td>‚úÖ</td>
<td>‚úÖ</td>
<td>‚ùå</td>
<td>‚ùå</td>
</tr>
</tbody>
</table></markdown-accessiblity-table>
</div>
<p dir="auto"><a href="https://pypi.org/project/arrow/" rel="nofollow"><strong>Arrow</strong></a>
is probably the most historically popular 3rd party datetime library.
It attempts to provide a more "friendly" API than the standard library,
but doesn't address the core issues:
it keeps the same footguns, and its decision to reduce the number
of types to just one (<code>arrow.Arrow</code>) means that it's even harder
for typecheckers to catch mistakes.</p>
<p dir="auto"><a href="https://pypi.org/project/pendulum/" rel="nofollow"><strong>Pendulum</strong></a>
arrived on the scene in 2016, promising better DST-handling,
as well as improved performance.
However, it only fixes <a href="https://dev.arie.bovenberg.net/blog/python-datetime-pitfalls/#datetime-library-scorecard" rel="nofollow"><em>some</em> DST-related pitfalls</a>,
and its performance has significantly <a href="https://github.com/sdispater/pendulum/issues/818" data-hovercard-type="issue" data-hovercard-url="/python-pendulum/pendulum/issues/818/hovercard">degraded over time</a>.
Additionally, it's in maintenance limbo with only one release in the last four years,
and many issues remaining unaddressed.</p>
<p dir="auto"><h2 tabindex="-1" dir="auto">Why use whenever?</h2><a id="user-content-why-use-whenever" aria-label="Permalink: Why use whenever?" href="#why-use-whenever"></a></p>
<ul dir="auto">
<li>üåê DST-safe arithmetic</li>
<li>üõ°Ô∏è Typesafe API prevents common bugs</li>
<li>‚úÖ Fixes issues <a href="https://dev.arie.bovenberg.net/blog/python-datetime-pitfalls/#datetime-library-scorecard" rel="nofollow">arrow/pendulum don't</a></li>
<li>‚öñÔ∏è  Based on proven and <a href="https://www.youtube.com/watch?v=saeKBuPewcU" rel="nofollow">familiar concepts</a></li>
<li>‚ö°Ô∏è Unmatched performance</li>
<li>üíé Thoroughly tested and documented</li>
<li>üìÜ Support for date arithmetic</li>
<li>‚è±Ô∏è Nanosecond precision</li>
<li>ü¶Ä Rust!‚Äîbut with a <a href="https://whenever.readthedocs.io/en/latest/faq.html#how-can-i-use-the-pure-python-version" rel="nofollow">pure-Python option</a></li>
<li>üöÄ Support for the latest GIL-related improvements (experimental)</li>
</ul>
<p dir="auto"><h2 tabindex="-1" dir="auto">Quickstart</h2><a id="user-content-quickstart" aria-label="Permalink: Quickstart" href="#quickstart"></a></p>
<div dir="auto" data-snippet-clipboard-copy-content=">>> from whenever import (
...    # Explicit types for different use cases
...    Instant,
...    ZonedDateTime,
...    LocalDateTime,
... )

# Identify moments in time, without timezone/calendar complexity
>>> now = Instant.now()
Instant(2024-07-04 10:36:56Z)

# Simple, explicit conversions
>>> now.to_tz(&quot;Europe/Paris&quot;)
ZonedDateTime(2024-07-04 12:36:56+02:00[Europe/Paris])

# A 'naive' local time can't accidentally mix with other types.
# You need to explicitly convert it and handle ambiguity.
>>> party_invite = LocalDateTime(2023, 10, 28, hour=22)
>>> party_invite.add(hours=6)
Traceback (most recent call last):
  ImplicitlyIgnoringDST: Adjusting a local datetime implicitly ignores DST [...]
>>> party_starts = party_invite.assume_tz(&quot;Europe/Amsterdam&quot;)
ZonedDateTime(2023-10-28 22:00:00+02:00[Europe/Amsterdam])

# DST-safe arithmetic
>>> party_starts.add(hours=6)
ZonedDateTime(2023-10-29 03:00:00+01:00[Europe/Amsterdam])

# Comparison and equality
>>> now > party_starts
True

# Rounding and truncation
>>> now.round(&quot;minute&quot;, increment=15)
Instant(2024-07-04 10:30:00Z)

# Formatting &amp; parsing common formats (ISO8601, RFC3339, RFC2822)
>>> now.format_rfc2822()
&quot;Thu, 04 Jul 2024 10:36:56 GMT&quot;

# If you must: you can convert to/from the standard lib
>>> now.py_datetime()
datetime.datetime(2024, 7, 4, 10, 36, 56, tzinfo=datetime.timezone.utc)"><pre><span>&gt;</span><span>&gt;&gt;</span> <span>from</span> <span>whenever</span> <span>import</span> (
...    <span># Explicit types for different use cases</span>
...    <span>Instant</span>,
...    <span>ZonedDateTime</span>,
...    <span>LocalDateTime</span>,
... )

<span># Identify moments in time, without timezone/calendar complexity</span>
<span>&gt;&gt;</span><span>&gt;</span> <span>now</span> <span>=</span> <span>Instant</span>.<span>now</span>()
<span>Instant</span>(<span>2024</span><span>-</span><span>07</span><span>-</span><span>04</span> <span>10</span>:<span>36</span>:<span>56</span><span>Z</span>)

<span># Simple, explicit conversions</span>
<span>&gt;</span><span>&gt;&gt;</span> <span>now</span>.<span>to_tz</span>(<span>"Europe/Paris"</span>)
<span>ZonedDateTime</span>(<span>2024</span><span>-</span><span>07</span><span>-</span><span>04</span> <span>12</span>:<span>36</span>:<span>56</span><span>+</span><span>02</span>:<span>00</span>[<span>Europe</span><span>/</span><span>Paris</span>])

<span># A 'naive' local time can't accidentally mix with other types.</span>
<span># You need to explicitly convert it and handle ambiguity.</span>
<span>&gt;</span><span>&gt;&gt;</span> <span>party_invite</span> <span>=</span> <span>LocalDateTime</span>(<span>2023</span>, <span>10</span>, <span>28</span>, <span>hour</span><span>=</span><span>22</span>)
<span>&gt;</span><span>&gt;&gt;</span> <span>party_invite</span>.<span>add</span>(<span>hours</span><span>=</span><span>6</span>)
<span>Traceback</span> (<span>most</span> <span>recent</span> <span>call</span> <span>last</span>):
  <span>ImplicitlyIgnoringDST</span>: <span>Adjusting</span> <span>a</span> <span>local</span> <span>datetime</span> <span>implicitly</span> <span>ignores</span> <span>DST</span> [...]
<span>&gt;&gt;</span><span>&gt;</span> <span>party_starts</span> <span>=</span> <span>party_invite</span>.<span>assume_tz</span>(<span>"Europe/Amsterdam"</span>)
<span>ZonedDateTime</span>(<span>2023</span><span>-</span><span>10</span><span>-</span><span>28</span> <span>22</span>:<span>00</span>:<span>00</span><span>+</span><span>02</span>:<span>00</span>[<span>Europe</span><span>/</span><span>Amsterdam</span>])

<span># DST-safe arithmetic</span>
<span>&gt;</span><span>&gt;&gt;</span> <span>party_starts</span>.<span>add</span>(<span>hours</span><span>=</span><span>6</span>)
<span>ZonedDateTime</span>(<span>2023</span><span>-</span><span>10</span><span>-</span><span>29</span> <span>03</span>:<span>00</span>:<span>00</span><span>+</span><span>01</span>:<span>00</span>[<span>Europe</span><span>/</span><span>Amsterdam</span>])

<span># Comparison and equality</span>
<span>&gt;</span><span>&gt;&gt;</span> <span>now</span> <span>&gt;</span> <span>party_starts</span>
<span>True</span>

<span># Rounding and truncation</span>
<span>&gt;</span><span>&gt;&gt;</span> <span>now</span>.<span>round</span>(<span>"minute"</span>, <span>increment</span><span>=</span><span>15</span>)
<span>Instant</span>(<span>2024</span><span>-</span><span>07</span><span>-</span><span>04</span> <span>10</span>:<span>30</span>:<span>00</span><span>Z</span>)

<span># Formatting &amp; parsing common formats (ISO8601, RFC3339, RFC2822)</span>
<span>&gt;</span><span>&gt;&gt;</span> <span>now</span>.<span>format_rfc2822</span>()
<span>"Thu, 04 Jul 2024 10:36:56 GMT"</span>

<span># If you must: you can convert to/from the standard lib</span>
<span>&gt;</span><span>&gt;&gt;</span> <span>now</span>.<span>py_datetime</span>()
<span>datetime</span>.<span>datetime</span>(<span>2024</span>, <span>7</span>, <span>4</span>, <span>10</span>, <span>36</span>, <span>56</span>, <span>tzinfo</span><span>=</span><span>datetime</span>.<span>timezone</span>.<span>utc</span>)</pre></div>
<p dir="auto">Read more in the <a href="https://whenever.readthedocs.io/en/latest/overview.html" rel="nofollow">feature overview</a>
or <a href="https://whenever.readthedocs.io/en/latest/api.html" rel="nofollow">API reference</a>.</p>
<p dir="auto"><h2 tabindex="-1" dir="auto">Roadmap</h2><a id="user-content-roadmap" aria-label="Permalink: Roadmap" href="#roadmap"></a></p>
<ul dir="auto">
<li>
<p dir="auto">üß™ <strong>0.x</strong>: get to feature-parity, process feedback, and tweak the API:</p>
<ul dir="auto">
<li>‚úÖ Datetime classes</li>
<li>‚úÖ Deltas</li>
<li>‚úÖ Date and time of day (separate from datetime)</li>
<li>‚úÖ Implement Rust extension for performance</li>
<li>üöß Tweaks to the delta API</li>
</ul>
</li>
<li>
<p dir="auto">üîí <strong>1.0</strong>: API stability and backwards compatibility</p>
<ul dir="auto">
<li>üöß Customizable parsing and formatting</li>
<li>üöß Intervals</li>
<li>üöß Ranges and recurring times</li>
<li>üöß Parsing leap seconds</li>
</ul>
</li>
</ul>
<p dir="auto"><h2 tabindex="-1" dir="auto">Limitations</h2><a id="user-content-limitations" aria-label="Permalink: Limitations" href="#limitations"></a></p>
<ul dir="auto">
<li>Supports the proleptic Gregorian calendar between 1 and 9999 AD</li>
<li>Timezone offsets are limited to whole seconds (consistent with IANA TZ DB)</li>
<li>No support for leap seconds (consistent with industry standards and other modern libraries)</li>
</ul>
<p dir="auto"><h2 tabindex="-1" dir="auto">Versioning and compatibility policy</h2><a id="user-content-versioning-and-compatibility-policy" aria-label="Permalink: Versioning and compatibility policy" href="#versioning-and-compatibility-policy"></a></p>
<p dir="auto"><strong>Whenever</strong> follows semantic versioning.
Until the 1.0 version, the API may change with minor releases.
Breaking changes will be meticulously explained in the changelog.
Since the API is fully typed, your typechecker and/or IDE
will help you adjust to any API changes.</p>
<blockquote>
<p dir="auto"><g-emoji alias="warning">‚ö†Ô∏è</g-emoji> <strong>Note</strong>: until 1.x, pickled objects may not be unpicklable across
versions. After 1.0, backwards compatibility of pickles will be maintained
as much as possible.</p>
</blockquote>
<p dir="auto"><h2 tabindex="-1" dir="auto">License</h2><a id="user-content-license" aria-label="Permalink: License" href="#license"></a></p>
<p dir="auto"><strong>Whenever</strong> is licensed under the MIT License.
The binary wheels contain Rust dependencies which are licensed under
similarly permissive licenses (MIT, Apache-2.0, and others).
For more details, see the licenses included in the distribution.</p>
<p dir="auto"><h2 tabindex="-1" dir="auto">Acknowledgements</h2><a id="user-content-acknowledgements" aria-label="Permalink: Acknowledgements" href="#acknowledgements"></a></p>
<p dir="auto">This project is inspired by‚Äîand borrows most concepts from‚Äîthe following projects. Check them out!</p>
<ul dir="auto">
<li><a href="https://tc39.es/proposal-temporal/docs/" rel="nofollow">Temporal</a></li>
<li><a href="https://nodatime.org/" rel="nofollow">Noda Time</a> and <a href="https://www.joda.org/joda-time/" rel="nofollow">Joda Time</a></li>
</ul>
<p dir="auto">The benchmark comparison graph is based on the one from the <a href="https://github.com/astral-sh/ruff">Ruff</a> project.
For timezone data, <strong>Whenever</strong> uses Python's own <code>zoneinfo</code> module.</p>
</article></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Go channels are bad (2016) (125 pts)]]></title>
            <link>https://www.jtolio.com/2016/03/go-channels-are-bad-and-you-should-feel-bad/</link>
            <guid>43670373</guid>
            <pubDate>Sun, 13 Apr 2025 05:43:15 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.jtolio.com/2016/03/go-channels-are-bad-and-you-should-feel-bad/">https://www.jtolio.com/2016/03/go-channels-are-bad-and-you-should-feel-bad/</a>, See on <a href="https://news.ycombinator.com/item?id=43670373">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>
  

<p><em>Update: If you‚Äôre coming to this blog post from a compendium titled ‚ÄúGo is
not good,‚Äù I want to make it clear that I am ashamed to be on such a list. Go
is absolutely the least worst programming language I‚Äôve ever used. At the
time I wrote this, I wanted to curb a trend I was seeing, namely, overuse of
one of the more warty parts of Go. I still think channels could be much better,
but overall, Go is wonderful. It‚Äôs like if your favorite toolbox had
<a href="https://blog.codinghorror.com/content/images/uploads/2012/06/6a0120a85dcdae970b017742d249d5970d-800wi.jpg">this</a>
in it; the tool can have uses (even if it could have had more uses), and it
can still be your favorite toolbox!</em></p>

<p><em>Update 2: I would be remiss if I didn‚Äôt point out this excellent survey of real
issues: <a href="https://songlh.github.io/paper/go-study.pdf">Understanding Real-World Concurrency Bugs In Go</a>.
A significant finding of this survey is that‚Ä¶ Go channels cause lots of bugs.</em></p>

<p>I‚Äôve been using Google‚Äôs <a href="http://golang.org/">Go programming language</a> on and
off since mid-to-late 2010, and I‚Äôve had legitimate product code written in Go
for <a href="http://www.spacemonkey.com/">Space Monkey</a> since January 2012 (before Go
1.0!). My initial experience with Go was back when I was researching Hoare‚Äôs
<a href="https://en.wikipedia.org/wiki/Communicating_sequential_processes">Communicating Sequential Processes</a>
model of concurrency and the <a href="https://en.wikipedia.org/wiki/%CE%A0-calculus">œÄ-calculus</a>
under <a href="http://matt.might.net/">Matt Might</a>‚Äôs
<a href="http://www.ucombinator.org/">UCombinator research group</a> as part of my
(<a href="https://www.jtolio.com/writing/2015/11/research-log-cell-states-and-microarrays/">now redirected</a>)
PhD work to better enable multicore development. Go was announced right then
(how serendipitous!) and I immediately started kicking tires.</p>

<p>It quickly became a core part of Space Monkey development. Our production
systems at Space Monkey currently account for over 425k lines of pure
Go (<em>not</em> counting all of our vendored libraries, which would make it just shy
of 1.5 million lines), so not the most Go you‚Äôll ever
see, but for the relatively young language we‚Äôre heavy users. We‚Äôve
<a href="https://www.jtolio.com/writing/2014/04/go-space-monkey/">written about our Go usage</a>
before. We‚Äôve open-sourced some fairly heavily used libraries; many people seem
to be fans of our
<a href="https://godoc.org/github.com/spacemonkeygo/openssl">OpenSSL bindings</a>
(which are faster than <a href="https://golang.org/pkg/crypto/tls/">crypto/tls</a>, but
please keep openssl itself up-to-date!), our
<a href="https://godoc.org/github.com/spacemonkeygo/errors">error handling library</a>,
<a href="https://godoc.org/github.com/spacemonkeygo/spacelog">logging library</a>, and
<a href="https://godoc.org/gopkg.in/spacemonkeygo/monitor.v1">metric collection library/zipkin client</a>.
We use Go, we love Go, we think it‚Äôs the least bad programming language for our
needs we‚Äôve used so far.</p>

<p>Although I don‚Äôt think I can talk myself out of mentioning my widely avoided
<a href="https://github.com/jtolds/gls">goroutine-local-storage library</a> here either
(which even though it‚Äôs a hack that you shouldn‚Äôt use, it‚Äôs a beautiful hack),
hopefully my other experience will suffice as valid credentials that I kind of
know what I‚Äôm talking about before I explain my deliberately inflamatory post
title.</p>




<div>
  <figure>
  <img src="https://www.jtolio.com/images/wat/darth-helmet.jpg" alt="Darth Helmet" onmouseover="this.src='\/images\/wat\/darth-helmet.gif';" onclick="this.src='\/images\/wat\/darth-helmet.gif'; this.onmouseout=null;" onmouseout="this.src='\/images\/wat\/darth-helmet.jpg';">

</figure>

</div>


<h2 id="wait-what:7de476e370ca6a780a51fd680c5a51dd">Wait, what?</h2>

<p>If you ask the proverbial programmer on the street what‚Äôs so special
about Go, she‚Äôll most likely tell you that Go is most known for channels and
goroutines. Go‚Äôs theoretical underpinnings are heavily based in Hoare‚Äôs CSP
model, which is itself incredibly fascinating and interesting and I firmly
believe has much more to yield than we‚Äôve appropriated so far.</p>

<p>CSP (and the œÄ-calculus) both use communication as the core synchronization
primitive, so it makes sense Go would have channels. Rob Pike has been
fascinated with CSP (with good reason) for a
<a href="https://en.wikipedia.org/wiki/Newsqueak">considerable</a>
<a href="https://en.wikipedia.org/wiki/Alef_%28programming_language%29">while</a>
<a href="https://en.wikipedia.org/wiki/Limbo_%28programming_language%29">now</a>.</p>

<p>But from a pragmatic perspective (which Go prides itself on), Go got channels
wrong. Channels as implemented are pretty much a solid anti-pattern in my book
at this point. Why? Dear reader, let me count the ways.</p>




<h3 id="you-probably-won-t-end-up-using-just-channels:7de476e370ca6a780a51fd680c5a51dd">You probably won‚Äôt end up using just channels.</h3>

<p>Hoare‚Äôs Communicating Sequential Processes is a computational model where
essentially the only synchronization primitive is sending or receiving on a
channel. As soon as you use a mutex, semaphore, or condition variable, bam,
you‚Äôre no longer in pure CSP land. Go programmers often tout this model and
philosophy through the chanting of the
<a href="http://lesswrong.com/lw/k5/cached_thoughts/">cached thought</a>
‚Äú<a href="https://blog.golang.org/share-memory-by-communicating">share memory by communicating</a>.‚Äù</p>

<p>So let‚Äôs try and write a small program using just CSP in Go! Let‚Äôs make a
high score receiver. All we will do is keep track of the largest high score
value we‚Äôve seen. That‚Äôs it.</p>

<p>First, we‚Äôll make a <code>Game</code> struct.</p>

<div><pre><span></span><span>type</span> Game <span>struct</span> {
  bestScore <span>int</span>
  scores    <span>chan</span> <span>int</span>
}
</pre></div>


<p><code>bestScore</code> isn‚Äôt going to be protected by a mutex! That‚Äôs fine, because we‚Äôll
simply have one goroutine manage its state and receive new scores over a
channel.</p>

<div><pre><span></span><span>func</span> (g *Game) run() {
  <span>for</span> score := <span>range</span> g.scores {
    <span>if</span> g.bestScore &lt; score {
      g.bestScore = score
    }
  }
}
</pre></div>


<p>Okay, now we‚Äôll make a helpful constructor to start a game.</p>

<div><pre><span></span><span>func</span> NewGame() (g *Game) {
  g = &amp;Game{
    bestScore: 0,
    scores:    make(<span>chan</span> <span>int</span>),
  }
  <span>go</span> g.run()
  <span>return</span> g
}
</pre></div>


<p>Next, let‚Äôs assume someone has given us a <code>Player</code> that can return scores.
It might also return an error, cause hey maybe the incoming TCP stream can die
or something, or the player quits.</p>

<div><pre><span></span><span>type</span> Player <span>interface</span> {
  NextScore() (score <span>int</span>, err <span>error</span>)
}
</pre></div>


<p>To handle the player, we‚Äôll assume all errors are fatal and pass received
scores down the channel.</p>

<div><pre><span></span><span>func</span> (g *Game) HandlePlayer(p Player) <span>error</span> {
  <span>for</span> {
    score, err := p.NextScore()
    <span>if</span> err != <span>nil</span> {
      <span>return</span> err
    }
    g.scores &lt;- score
  }
}
</pre></div>


<p>Yay! Okay, we have a <code>Game</code> type that can keep track of the highest score a
<code>Player</code> receives in a thread-safe way.</p>

<p>You wrap up your development and you‚Äôre on your way to having customers. You
make this game server public and you‚Äôre incredibly successful! Lots of games
are being created with your game server.</p>

<p>Soon, you discover people sometimes leave your game. Lots of games no longer
have any players playing, but nothing stopped the game loop. You are getting
overwhelmed by dead <code>(*Game).run</code> goroutines.</p>

<p><strong>Challenge:</strong> fix the goroutine leak above without mutexes or panics.
For real, scroll up to the above code and come up with a plan for fixing this
problem using just channels.</p>



<p>For what it‚Äôs worth, it totally can be done with channels only, but observe the
simplicity of the following solution which doesn‚Äôt even have this problem:</p>

<div><pre><span></span><span>type</span> Game <span>struct</span> {
  mtx sync.Mutex
  bestScore <span>int</span>
}

<span>func</span> NewGame() *Game {
  <span>return</span> &amp;Game{}
}

<span>func</span> (g *Game) HandlePlayer(p Player) <span>error</span> {
  <span>for</span> {
    score, err := p.NextScore()
    <span>if</span> err != <span>nil</span> {
      <span>return</span> err
    }
    g.mtx.Lock()
    <span>if</span> g.bestScore &lt; score {
      g.bestScore = score
    }
    g.mtx.Unlock()
  }
}
</pre></div>


<p>Which one would you rather work on? Don‚Äôt be deceived into thinking that the
channel solution somehow makes this more readable and understandable in more
complex cases. Teardown is very hard. This sort of teardown is just a piece of
cake with a mutex, but the hardest thing to work out with Go-specific channels
only. Also, if anyone replies that channels sending channels is easier to
reason about here it will cause me an immediate head-to-desk motion.</p>

<p>Importantly, this particular case might actually be <em>easily</em> solved <em>with
channels</em> with some runtime assistance Go doesn‚Äôt provide! Unfortunately, as
it stands, there are simply a surprising amount of problems that are solved
better with traditional synchronization primitives than with Go‚Äôs version of
CSP. We‚Äôll talk about what Go could have done to make this case easier later.</p>

<p><strong>Exercise:</strong> Still skeptical? Try making both solutions above (channel-only
vs. mutex-only) stop asking for scores from <code>Players</code> once <code>bestScore</code> is 100
or greater. Go ahead and open your text editor. This is a small, toy problem.</p>

<p>The summary here is that you will be using traditional synchronization
primitives in addition to channels if you want to do anything real.</p>




<h3 id="channels-are-slower-than-implementing-it-yourself:7de476e370ca6a780a51fd680c5a51dd">Channels are slower than implementing it yourself</h3>

<p>One of the things I assumed about Go being so heavily based in CSP theory is
that there should be some pretty killer scheduler optimizations the runtime
can make with channels. Perhaps channels aren‚Äôt always the most straightforward
primitive, but surely they‚Äôre efficient and fast, right?</p>

<div>
  <figure>
  <img src="https://www.jtolio.com/images/wat/jon-stewart.jpg" alt="John Stewart" onmouseover="this.src='\/images\/wat\/jon-stewart.gif';" onclick="this.src='\/images\/wat\/jon-stewart.gif'; this.onmouseout=null;" onmouseout="this.src='\/images\/wat\/jon-stewart.jpg';">

</figure>

</div>


<p>As <a href="https://twitter.com/HiattDustin">Dustin Hiatt</a> points out on
<a href="http://bravenewgeek.com/go-is-unapologetically-flawed-heres-why-we-use-it/">Tyler Treat‚Äôs post about Go</a>,</p>

<blockquote>
<p>Behind the scenes, channels are using locks to serialize access and provide
threadsafety. So by using channels to synchronize access to memory, you are,
in fact, using locks; locks wrapped in a threadsafe queue. So how do Go‚Äôs
fancy locks compare to just using mutex‚Äôs from their standard library <code>sync</code>
package? The following numbers were obtained by using Go‚Äôs builtin
benchmarking functionality to serially call Put on a single set of their
respective types.</p>

<pre><code>BenchmarkSimpleSet-8 3000000 391 ns/op
BenchmarkSimpleChannelSet-8 1000000 1699 ns/o
</code></pre>
</blockquote>

<p>It‚Äôs a similar story with unbuffered channels, or even the same test under
contention instead of run serially.</p>

<p>Perhaps the Go scheduler will improve, but in the meantime, good old mutexes
and condition variables are very good, efficient, and fast. If you want
performance, you use the tried and true methods.</p>




<h3 id="channels-don-t-compose-well-with-other-concurrency-primitives:7de476e370ca6a780a51fd680c5a51dd">Channels don‚Äôt compose well with other concurrency primitives</h3>

<p>Alright, so hopefully I have convinced you that you‚Äôll at least be interacting
with primitives besides channels sometimes. The standard library certainly
seems to prefer traditional synchronization primitives over channels.</p>

<p>Well guess what, it‚Äôs actually somewhat challenging to use channels alongside
mutexes and condition variables correctly!</p>

<p>One of the interesting things about channels that makes a lot of sense coming
from CSP is that channel sends are synchronous. A channel send and channel
receive are intended to be synchronization barriers, and the send and receive
should happen at the same virtual time. That‚Äôs wonderful if you‚Äôre in
well-executed CSP-land.</p>

<div>
  <figure>
  <img src="https://www.jtolio.com/images/wat/obama.jpg" alt="Barack Obama" onmouseover="this.src='\/images\/wat\/obama.gif';" onclick="this.src='\/images\/wat\/obama.gif'; this.onmouseout=null;" onmouseout="this.src='\/images\/wat\/obama.jpg';">

</figure>

</div>


<p>Pragmatically, Go channels also come in a buffered variety. You can allocate a
fixed amount of space to account for possible buffering so that sends and
receives are disparate events, but the buffer size is capped. Go doesn‚Äôt
provide a way to have arbitrarily sized buffers - you have to allocate the
buffer size in advance. <em>This is fine</em>, I‚Äôve seen people argue on the mailing
list, <em>because memory is bounded anyway.</em></p>

<p>Wat.</p>

<p>This is a bad answer. There‚Äôs all sorts of reasons to use an arbitrarily
buffered channel. If we knew everything up front, why even have <code>malloc</code>?</p>




<p>Not having arbitrarily buffered channels means that a naive send on <em>any</em>
channel could block at any time. You want to send on a channel and update some
other bookkeeping under a mutex? Careful! Your channel send might block!</p>

<div><pre><span></span>  <span>// ...</span>
  s.mtx.Lock()
  <span>// ...</span>
  s.ch &lt;- val <span>// might block!</span>
  s.mtx.Unlock()
  <span>// ...</span>
</pre></div>


<p>This is a recipe for dining philosopher dinner fights. If you take a lock, you
should quickly update state and release it and not do anything blocking under
the lock if possible.</p>

<p>There is a way to do a non-blocking send on a channel in Go, but it‚Äôs not the
default behavior. Assume we have a channel <code>ch := make(chan int)</code> and we want
to send the value <code>1</code> on it without blocking. Here is the minimum amount of
typing you have to do to send without blocking:</p>

<div><pre><span></span>  <span>select</span> {
  <span>case</span> ch &lt;- 1: <span>// it sent</span>
  <span>default</span>: <span>// it didn't</span>
  }
</pre></div>


<p>This isn‚Äôt what naturally leaps to mind for beginning Go programmers.</p>

<p>The summary is that because many operations on channels block, it takes careful
reasoning about philosophers and their dining to successfully use channel
operations alongside and under mutex protection, without causing deadlocks.</p>




<h3 id="callbacks-are-strictly-more-powerful-and-don-t-require-unnecessary-goroutines:7de476e370ca6a780a51fd680c5a51dd">Callbacks are strictly more powerful and don‚Äôt require unnecessary goroutines.</h3>

<div>
  <figure>
  <img src="https://www.jtolio.com/images/wat/yael-grobglas.jpg" alt="Yael Grobglas" onmouseover="this.src='\/images\/wat\/yael-grobglas.gif';" onclick="this.src='\/images\/wat\/yael-grobglas.gif'; this.onmouseout=null;" onmouseout="this.src='\/images\/wat\/yael-grobglas.jpg';">

</figure>

</div>


<p>Whenever an API uses a channel, or whenever I point out that a channel makes
something hard, someone invariably points out that I should just spin up
a goroutine to read off the channel and make whatever translation or fix I need
as it reads of the channel.</p>

<p>Um, no. What if my code is in a hotpath? There‚Äôs very few instances that
require a channel, and if your API could have been designed with mutexes,
semaphores, and callbacks and no additional goroutines (because all event edges
are triggered by API events), then using a channel forces me to add another
stack of memory allocation to my resource usage. Goroutines are much lighter
weight than threads, yes, but lighter weight doesn‚Äôt mean the lightest weight
possible.</p>

<p>As I‚Äôve formerly <a href="http://www.informit.com/articles/article.aspx?p=2359758#comment-2061767464">argued in the comments on an article about using channels</a> (lol the internet),
your API can <em>always</em> be more general, <em>always</em> more flexible, and take
drastically less resources if you use callbacks instead of channels.
‚ÄúAlways‚Äù is a scary word, but I mean it here. There‚Äôs proof-level stuff going
on.</p>

<p>If someone provides a callback-based API to you and you need a channel, you can
provide a callback that sends on a channel with little overhead and full
flexibility.</p>

<p>If, on the other hand, someone provides a channel-based API to you and you need
a callback, you have to spin up a goroutine to read off the channel <em>and</em> you
have to hope that no one tries to send more on the channel when you‚Äôre done
reading so you cause blocked goroutine leaks.</p>

<p>For a super simple real-world example, check out the
<a href="https://godoc.org/golang.org/x/net/context">context interface</a> (which
incidentally is an incredibly useful package and what you should be using
instead of <a href="https://github.com/jtolds/gls">goroutine-local storage</a>):</p>

<div><pre><span></span><span>type</span> Context <span>interface</span> {
  ...
  <span>// Done returns a channel that closes when this work unit should be canceled.</span>
  Done() &lt;-<span>chan</span> <span>struct</span>{}

  <span>// Err returns a non-nil error when the Done channel is closed</span>
  Err() <span>error</span>
  ...
}
</pre></div>


<p>Imagine all you want to do is log the corresponding error when the <code>Done()</code>
channel fires. What do you have to do? If you don‚Äôt have a good place you‚Äôre
already selecting on a channel, you have to spin up a goroutine to deal with
it:</p>

<div><pre><span></span>  <span>go</span> <span>func</span>() {
    &lt;-ctx.Done()
    logger.Errorf(<span>"canceled: %v"</span>, ctx.Err())
  }()
</pre></div>


<p>What if <code>ctx</code> gets garbage collected without closing the channel <code>Done()</code>
returned? Whoops! Just leaked a goroutine!</p>

<p>Now imagine we changed <code>Done</code>‚Äôs signature:</p>

<div><pre><span></span>  <span>// Done calls cb when this work unit should be canceled.</span>
  Done(cb <span>func</span>())
</pre></div>


<p>First off, logging is so easy now. Check it out:
<code>ctx.Done(func() { log.Errorf("canceled: %v", ctx.Err()) })</code>.
But lets say you really do need some select behavior. You can just call it like
this:</p>

<div><pre><span></span>  ch := make(<span>chan</span> <span>struct</span>{})
  ctx.Done(<span>func</span>() { close(ch) })
</pre></div>


<p>Voila! No expressiveness lost by using a callback instead. <code>ch</code> works like
the channel <code>Done()</code> used to return, and in the logging case we didn‚Äôt need to
spin up a whole new stack. I got to keep my stack traces (if our log package
is inclined to use them); I got to avoid another stack allocation and another
goroutine to give to the scheduler.</p>

<p>Next time you use a channel, ask yourself if there‚Äôs some goroutines you could
eliminate if you used mutexes and condition variables instead. If the answer is
yes, your code will be more efficient if you change it. And if you‚Äôre trying to
use channels just to be able to use the <code>range</code> keyword over a collection, I‚Äôm
going to have to ask you to put your keyboard away or just go back to writing
Python books.</p>

<div>
  <figure>
  <img src="https://www.jtolio.com/images/wat/zooey-deschanel.jpg" alt="Zooey Deschanel" onmouseover="this.src='\/images\/wat\/zooey-deschanel.gif';" onclick="this.src='\/images\/wat\/zooey-deschanel.gif'; this.onmouseout=null;" onmouseout="this.src='\/images\/wat\/zooey-deschanel.jpg';">

<figcaption>
      <p>more like Zooey De-channel, amirite</p>
  </figcaption>

</figure>

</div>





<h3 id="the-channel-api-is-inconsistent-and-just-cray-cray:7de476e370ca6a780a51fd680c5a51dd">The channel API is inconsistent and just cray-cray</h3>

<p>Closing or sending on a closed channel panics! Why? If you want to close a
channel, you need to either synchronize its closed state externally (with
mutexes and so forth that don‚Äôt compose well!) so that other writers don‚Äôt
write to or close a closed channel, or just charge forward and close or write
to closed channels and expect you‚Äôll have to recover any raised panics.</p>

<p>This is such bizarre behavior. Almost every other operation in Go has a way to
avoid a panic (type assertions have the <code>, ok =</code> pattern, for example), but
with channels you just get to deal with it.</p>

<p>Okay, so when a send will fail, channels panic. I guess that makes some kind
of sense. But unlike almost everything else with nil values, sending to a nil
channel won‚Äôt panic. Instead, it will block forever! That‚Äôs pretty
counter-intuitive. That might be useful behavior, just like having a can-opener
attached to your weed-whacker might be useful (and found in Skymall), but it‚Äôs
certainly unexpected. Unlike interacting with nil maps (which do implicit
pointer dereferences), nil interfaces (implicit pointer dereferences),
unchecked type assertions, and all sorts of other things, nil channels exhibit
actual channel behavior, as if a brand new channel was just instantiated for
this operation.</p>

<p>Receives are slightly nicer. What happens when you receive on a closed channel?
Well, that works - you get a zero value. Okay that makes sense I guess. Bonus!
Receives allow you to do a <code>, ok =</code>-style check if the channel was open when
you received your value. Thank heavens we get <code>, ok =</code> here.</p>

<p>But what happens if you receive from a nil channel? <em>Also blocks forever!</em> Yay!
Don‚Äôt try and use the fact that your channel is nil to keep track of if you
closed it!</p>




<h2 id="what-are-channels-good-for:7de476e370ca6a780a51fd680c5a51dd">What are channels good for?</h2>

<p>Of course channels are good for some things (they are a generic container
after all), and there are certain things you can only do with them (<code>select</code>).</p>




<h3 id="they-are-another-special-cased-generic-datastructure:7de476e370ca6a780a51fd680c5a51dd">They are another special-cased generic datastructure</h3>

<p>Go programmers are so used to arguments about generics that I can feel the PTSD
coming on just by bringing up the word. I‚Äôm not here to talk about it so wipe
the sweat off your brow and let‚Äôs keep moving.</p>

<p>Whatever your opinion of generics is, Go‚Äôs maps, slices, and channels are data
structures that support generic element types, because they‚Äôve been
special-cased into the language.</p>

<p>In a language that doesn‚Äôt allow you to write your own generic containers,
<em>anything</em> that allows you to better manage collections of things is valuable.
Here, channels are a thread-safe datastructure that supports arbitrary value
types.</p>

<p>So that‚Äôs useful! That can save some boilerplate I suppose.</p>

<p>I‚Äôm having trouble counting this as a win for channels.</p>




<h3 id="select:7de476e370ca6a780a51fd680c5a51dd">Select</h3>

<p>The main thing you can do with channels is the <code>select</code> statement. Here you
can wait on a fixed number of inputs for events. It‚Äôs kind of like epoll, but
you have to know upfront how many sockets you‚Äôre going to be waiting on.</p>

<p>This is truly a useful language feature. Channels would be a complete wash if
not for <code>select</code>. But holy smokes, let me tell you about the first time you
decide you might need to select on multiple things but you don‚Äôt know how many
and you have to use <code>reflect.Select</code>.</p>




<h2 id="how-could-channels-be-better:7de476e370ca6a780a51fd680c5a51dd">How could channels be better?</h2>

<p>It‚Äôs really tough to say what the most tactical thing the Go language team
could do for Go 2.0 is (the Go 1.0 compatibility guarantee is good but
hand-tying), but that won‚Äôt stop me from making some suggestions.</p>




<h3 id="select-on-condition-variables:7de476e370ca6a780a51fd680c5a51dd">Select on condition variables!</h3>

<p>We could just obviate the need for channels! This is where I propose we get
rid of some sacred cows, but let me ask you this, how great would it be if you
could select on any custom synchronization primitive? (A: So great.) If we had
that, we wouldn‚Äôt need channels at all.</p>




<h3 id="gc-could-help-us:7de476e370ca6a780a51fd680c5a51dd">GC could help us?</h3>

<p>In the very first example, we could easily solve the high score server cleanup
with channels if we were able to use directionally-typed channel garbage
collection to help us clean up.</p>

<div>
  <figure>
  <img src="https://www.jtolio.com/images/wat/joel-mchale.jpg" alt="Joel McHale" onmouseover="this.src='\/images\/wat\/joel-mchale.gif';" onclick="this.src='\/images\/wat\/joel-mchale.gif'; this.onmouseout=null;" onmouseout="this.src='\/images\/wat\/joel-mchale.jpg';">

</figure>

</div>


<p>As you know, Go has directionally-typed channels. You can have a channel type
that only supports reading (<code>&lt;-chan</code>) and a channel type that only supports
writing (<code>chan&lt;-</code>). Great!</p>

<p>Go also has garbage collection. It‚Äôs clear that certain kinds of book keeping
are just too onerous and we shouldn‚Äôt make the programmer deal with
them. We clean up unused memory! Garbage collection is useful and neat.</p>

<p>So why not help clean up unused or deadlocked channel reads? Instead of having
<code>make(chan Whatever)</code> return one bidirectional channel, have it return two
single-direction channels (<code>chanReader, chanWriter := make(chan Type)</code>).</p>




<p>Let‚Äôs reconsider the original example:</p>

<div><pre><span></span><span>type</span> Game <span>struct</span> {
  bestScore <span>int</span>
  scores    <span>chan</span>&lt;- <span>int</span>
}

<span>func</span> run(bestScore *<span>int</span>, scores &lt;-<span>chan</span> <span>int</span>) {
  <span>// we don't keep a reference to a *Game directly because then we'd be holding</span>
  <span>// onto the send side of the channel.</span>
  <span>for</span> score := <span>range</span> scores {
    <span>if</span> *bestScore &lt; score {
      *bestScore = score
    }
  }
}

<span>func</span> NewGame() (g *Game) {
  <span>// this make(chan) return style is a proposal!</span>
  scoreReader, scoreWriter := make(<span>chan</span> <span>int</span>)
  g = &amp;Game{
    bestScore: 0,
    scores:    scoreWriter,
  }
  <span>go</span> run(&amp;g.bestScore, scoreReader)
  <span>return</span> g
}

<span>func</span> (g *Game) HandlePlayer(p Player) <span>error</span> {
  <span>for</span> {
    score, err := p.NextScore()
    <span>if</span> err != <span>nil</span> {
      <span>return</span> err
    }
    g.scores &lt;- score
  }
}
</pre></div>


<p>If garbage collection closed a channel when we could prove no more values are
ever coming down it, this solution is completely fixed. Yes yes, the comment
in <code>run</code> is indicative of the existence of a rather large gun aimed at your
foot, but at least the problem is easily solveable now, whereas it really
wasn‚Äôt before. Furthermore, a smart compiler could probably make appropriate
proofs to reduce the damage from said foot-gun.</p>




<h3 id="other-smaller-issues:7de476e370ca6a780a51fd680c5a51dd">Other smaller issues</h3>

<ul>
<li><strong>Dup channels?</strong> - If we could use an equivalent of the <code>dup</code> syscall on
channels, then we could also solve the multiple producer problem quite
easily. Each producer could close their own <code>dup</code>-ed channel without ruining
the other producers.</li>
<li><strong>Fix the channel API!</strong> - Close isn‚Äôt idempotent? Send on closed
channel panics with no way to avoid it? Ugh!</li>
<li><strong>Arbitrarily buffered channels</strong> - If we could make buffered channels with
no fixed buffer size limit, then we could make channels that don‚Äôt block.</li>
</ul>




<h2 id="what-do-we-tell-people-about-go-then:7de476e370ca6a780a51fd680c5a51dd">What do we tell people about Go then?</h2>

<p>If you haven‚Äôt yet, please go take a look at my current favorite programming
post: <a href="http://journal.stuffwithstuff.com/2015/02/01/what-color-is-your-function/">What Color is Your Function</a>. Without being about Go specifically, this blog post much more
eloquently than I could lays out exactly why goroutines are Go‚Äôs best feature
(and incidentally one of the ways Go is better than Rust for some
applications).</p>

<p>If you‚Äôre still writing code in a programming language that forces keywords
like <code>yield</code> on you to get high performance, concurrency, or an event-driven
model, you are living in the past, whether or not you or anyone else knows it.
Go is so far one of the best entrants I‚Äôve seen of languages that implement an
M:N threading model that‚Äôs not 1:1, and dang that‚Äôs powerful.</p>

<p>So, tell folks about goroutines.</p>

<p>If I had to pick one other leading feature of Go, it‚Äôs interfaces.
Statically-typed <a href="https://en.wikipedia.org/wiki/Duck_typing">duck typing</a> makes
extending and working with your own or someone else‚Äôs project so fun and
amazing it‚Äôs probably worth me writing an entirely different set of words about
it some other time.</p>




<h2 id="so:7de476e370ca6a780a51fd680c5a51dd">So‚Ä¶</h2>

<p>I keep seeing people charge in to Go, eager to use channels to their full
potential. Here‚Äôs my advice to you.</p>

<p><strong>JUST STAHP IT</strong></p>

<p>When you‚Äôre writing APIs and interfaces, as bad as the advice ‚Äúnever‚Äù can be,
I‚Äôm pretty sure there‚Äôs never a time where channels are better, and every Go
API I‚Äôve used that used channels I‚Äôve ended up having to fight. I‚Äôve never
thought ‚Äúoh good, there‚Äôs a channel here;‚Äù it‚Äôs always instead been some
variant of <em><strong>WHAT FRESH HELL IS THIS?</strong></em></p>

<p>So, <em>please, please use channels where appropriate and only
where appropriate.</em></p>

<p>In all of my Go code I work with, I can count on one hand the number of times
channels were really the best choice. Sometimes they are. That‚Äôs great! Use
them then. But otherwise just stop.</p>

<div>
 <figure>
  <img src="https://www.jtolio.com/images/wat/michael-cera.jpg" alt="Michael Cera" onmouseover="this.src='\/images\/wat\/michael-cera.gif';" onclick="this.src='\/images\/wat\/michael-cera.gif'; this.onmouseout=null;" onmouseout="this.src='\/images\/wat\/michael-cera.jpg';">

</figure>

</div>


<p><em>Special thanks for the valuable feedback provided by my proof readers
Jeff Wendling, <a href="https://github.com/azdagron">Andrew Harding</a>,
<a href="https://twitter.com/taterbase">George Shank</a>, and
<a href="http://bravenewgeek.com/">Tyler Treat</a>.</em></p>

<p>If you want to work on Go with us at Space Monkey, please
<a href="https://www.jtolio.com/contact/">hit me up</a>!</p>

</div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[How to not build a two stage model rocket (116 pts)]]></title>
            <link>https://knowone08.gitbook.io/vgecrocketry</link>
            <guid>43669981</guid>
            <pubDate>Sun, 13 Apr 2025 04:00:28 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://knowone08.gitbook.io/vgecrocketry">https://knowone08.gitbook.io/vgecrocketry</a>, See on <a href="https://news.ycombinator.com/item?id=43669981">Hacker News</a></p>
<div id="readability-page-1" class="page"><header id="site-header"></header><!--$--><!--/$--><div hidden="" id="S:0"><main><header><h2>How to NOT build a two stage model rocket</h2><p>When engineering meets ambition‚Ä¶ and occasionally, the ground</p></header><!--$--><div><p>So‚Ä¶ I don‚Äôt usually write blogs  mostly because I thought I wasn‚Äôt the ‚Äúblogging type‚Äù (whatever that means). Actually, this is my first one. But after what happened during our first two-stage rocket attempt, I figured ‚Äî yeah, it‚Äôs probably worth writing about. If nothing else, maybe someone else can laugh, learn, and avoid making the same mistakes we did.</p><p>It started off like any good launch day. The rocket was prepped, the team was hyped, someone shouted ‚Äústart!‚Äù (it was me) even though the rocket was somewhere in the shot ‚Äî if you squint and use your imagination.</p><p>We began the countdown with full confidence.</p><p>3‚Ä¶ 2‚Ä¶ 1‚Ä¶ LAUNCH!</p><p>What followed was‚Ä¶ not flight. The rocket lifted maybe a few meters off the pad, sighed like it had second thoughts, and flopped over like a fainting goat. The motor technically fired ‚Äî just not enough to impress anyone, including the rocket itself.</p><p>We stood there in silence. Someone clapped. We all laughed.</p><p>This blog is a mix of that story ‚Äî and all the other things that went slightly or wildly wrong ‚Äî wrapped up with actual lessons about what not to do when building a two-stage model rocket. If you're a fellow enthusiast, a curious beginner, or just here for the explosions, welcome aboard.</p><h2 id="the-dream"></h2><p>Before we talk about Venessa‚Äôs (yes, it was a concious decision to name the rocket Venessa) design, problems, and the oh-my-god-what-just-happened moments, let‚Äôs take a step back.</p><p><strong>Why even build a two-stage rocket in the first place?</strong></p><p>It‚Äôs simple‚Äîbecause it‚Äôs cool. But also because it‚Äôs hard. And that‚Äôs exactly what makes it worth doing. Two-stage rockets introduce a whole new layer of complexity compared to single-stage flights. You‚Äôre not just launching a rocket anymore‚Äîyou‚Äôre launching a rocket that splits into two mid-air, and both halves need to do what they‚Äôre supposed to.</p><p>This complexity is exactly why we decided to build Venessa, our first two-stage rocket.</p><p>We weren‚Äôt chasing records or altitude this time. The goal was simple:
Design, build, and successfully execute a stage separation event‚Äîthe part where the upper stage cleanly detaches and continues its journey after the first stage burns out.</p><p>That‚Äôs it.</p><p>This small but critical demonstration was meant to pave the way for <i>Asthsiddhi</i>, our larger and more capable two-stage rocket that‚Äôs currently in development. Venessa was a stepping stone‚Äî an experiment, and more importantly, a learning experience.</p><p>Our guiding principle from day one was:
‚ÄúDo it in the simplest way that still teaches you the hard stuff.‚Äù</p><!--$--><p>This philosophy shaped everything‚Äîhow we built our motors, chose our materials, designed our avionics, and even decided which parts were worth overengineering (and which ones we could just glue together and pray for the best).</p><!--/$--><!--$--><p>What followed was months of design, iteration, fabrication, failed tests, and re-dos.</p><!--/$--><!--$--><p>But it all started with a single goal:</p><!--/$--><!--$--><p>Can we design a rocket that breaks apart mid-flight‚Äîintentionally‚Äîand not get absolutely roasted by gravity?</p><!--/$--><!--$--><p>Let‚Äôs see how that went.</p><!--/$--><!--$--><p>Vanessa wasn‚Äôt about going higher or faster. It was about going smarter.</p><!--/$--><!--$--><p>From the very beginning, the design philosophy was simple:
Focus on mastering stage separation, not perfection.</p><!--/$--><!--$--><p>So instead of chasing every performance metric, we kept our sights on the core challenge‚Äîmaking a two-stage rocket separate mid-flight in a controlled and reliable way. Everything else‚Äîstructure, propulsion, avionics‚Äîwas built around that singular goal.</p><!--/$--><!--$--><p>We knew there would be compromises. And we were okay with that. Not everything needed to be aerospace-grade. We didn‚Äôt need fiberglass or carbon fiber. What we needed was something that worked just well enough to get us to the learning moment.</p><!--/$--><!--$--><p>At every step, we asked ourselves:</p><!--/$--><!--$--><p>‚ÄúWhat‚Äôs the easiest way we can build this and still learn the hard lesson?‚Äù</p><!--/$--><!--$--><p>Sometimes that meant using a cardboard cut out part that could‚Äôve been 3D printed. Sometimes it meant using a paper tube instead of an expensive composite body. Sometimes it meant letting a stage fall ballistically with no recovery system (RIP first stage, you did your job).</p><!--/$--><!--$--><p>But that‚Äôs the beauty of a learning prototype‚Äîfreedom to make mistakes on purpose.</p><!--/$--><!--$--><p>Vanessa wasn't a rocket built for glory‚Äîit was a rocket built to teach us.</p><!--/$--><!--$--><h3 id="propulsion"></h3><!--/$--><!--$--><p>When it came to propulsion, we decided to graduate from our unreliable PVC days and finally enter the metal age.</p><!--/$--><!--$--><p>We designed solid rocket motors with a stainless steel casing, aluminum end cap, and a mild steel nozzle. Fancy, right? Turns out, PVC was never the move. It‚Äôs lightweight, yes, but also has the structural integrity of a soggy biscuit under pressure. Metal, while harder to work with, gave us something far more valuable‚Äîconsistency and peace of mind (plus fewer heart attacks during static tests).</p><!--/$--><!--$?--><template id="B:1"></template><!--/$--><!--$--><!--/$--><!--$--><p>For the fuel, we used good ol‚Äô KNDX‚Äîa mixture of Potassium Nitrate (oxidizer) and Dextrose (fuel). Why? Because we‚Äôve been cooking this sugary goodness for over a year now. At this point, our mixers could probably run a bakery. Or so we thought (This isn‚Äôt foreshadowing I promise)</p><!--/$--><!--$--><p>The process involves mixing the components in their stoichiometric ratio, then carefully melting, casting, and curing them into grains‚Äîthose little cylindrical packets of thrust that determine your burn profile. Honestly, this whole thing deserves its own blog. Maybe one day.</p><!--/$--><!--$?--><template id="B:2"></template><!--/$--><!--$--><!--/$--><!--$?--><template id="B:3"></template><!--/$--><!--$--><ul><!--$--><li><div><!--$--><p>Thrust (how fast we want to go)</p><!--/$--></div></li><!--/$--><!--$--><li><div><!--$--><p>Impulse (how far we want to go)</p><!--/$--></div></li><!--/$--></ul><!--/$--><!--$?--><template id="B:4"></template><!--/$--><!--$--><p>Once we have those locked in, it‚Äôs a game of tweaking until the graph looks like something you‚Äôd proudly frame on your lab wall.</p><!--/$--><!--$--><p>We ended up with two motors:</p><!--/$--><!--$--><ul><!--$--><li></li><!--/$--><!--$--><li></li><!--/$--></ul><!--/$--><!--$?--><template id="B:5"></template><!--/$--><!--$--><p>Each stage had its own motor. G136 powered the first stage, and G96 took over once separation happened. No fancy ignition system‚Äîjust the pure hope that our avionics systems and calculations were right.</p><!--/$--><!--$--><p>So, propulsion was equal parts physics, math, and crossing fingers. And somehow, that combination didn‚Äôt blow up in our faces.</p><!--/$--><!--$--><p>Not too badly, anyway.</p><!--/$--><!--$--><h3 id="structure"></h3><!--/$--><!--$--><p>If propulsion is the fire, structure is the skeleton that holds it all together‚Äîand for us, that skeleton was made of‚Ä¶ paper. Yep, you read that right.</p><!--/$--><!--$--><h4 id="body"></h4><!--/$--><!--$--><p>The main body tube of our rocket was handcrafted using strips of paper‚Äîspecifically, old Engineering Drawing sheets left abandoned by students. Instead of buying off-the-shelf cardboard tubes, we repurposed these thick, high-quality sheets. Not only did it make the build more fun and hands-on, but it also saved us a bit of cost (though that wasn‚Äôt the primary reason).</p><!--/$--><!--$--><p><strong>The construction method was pretty neat</strong></p><!--/$--><!--$--><p>We built the body tube layer by layer by spirally winding strips of paper over a PVC pipe. Each layer used about 5‚Äì6 strips, and every new layer was wound in the opposite direction of the previous one. This alternating spiral created a crosshatched pattern that added impressive strength and rigidity. In total, we applied around 5‚Äì6 such layers, all bonded with our trusty Fevicol-and-water mix‚Äîlike a well-crafted paper-m√¢ch√© shell, but engineered for flight.</p><!--/$--><!--$?--><template id="B:6"></template><!--/$--><!--$--><h4 id="nose-cone"></h4><!--/$--><!--$--><p>Our nose cone followed a clean ogive profile and was 3D printed using PLA filament. 
While we‚Äôve experimented with paper-crafted nose cones in the past, 3D printing offers consistency, precision, and speed. If you‚Äôve got a printer‚Äîit‚Äôs a no-brainer.</p><!--/$--><!--$?--><template id="B:7"></template><!--/$--><!--$--><h4 id="fincan-and-fins"></h4><!--/$--><!--$--><p>The fincan and fins were also 3D printed. Sure, we traded off some strength compared to fiberglass or carbon fiber, but for this flight, structural integrity wasn‚Äôt the primary concern‚Äîstage separation testing was.
3D printing allowed us to prototype fast and focus on what really mattered: functionality over overengineering.</p><!--/$--><!--$?--><template id="B:8"></template><!--/$--><!--$--><h4 id="first-stage"></h4><!--/$--><!--$--><p>The first stage was as simple as it gets:</p><!--/$--><!--$--><ul><!--$--><li></li><!--/$--><!--$--><li></li><!--/$--><!--$--><li></li><!--/$--></ul><!--/$--><!--$--><p>We didn‚Äôt use any mechanical separation system. It was ‚Äúloosely‚Äù attached, so after burnout, it would just fall away‚Äîor get hot staged after the second stage lit up. (Honestly, part of us kinda wanted to see that hot staging happen.)</p><!--/$--><!--$?--><template id="B:9"></template><!--/$--><!--$--><h4 id="avionics-bay"></h4><!--/$--><!--$--><p>This was where the brains of the rocket lived.
We 3D printed a mounting plate with a slot for the power switch, and two discs with holes to mount it inside the body using screws. It held two flight computers, one on each side of the plate.</p><!--/$--><!--$--><p>Right above it, we mounted a spring-loaded ejection system‚Äîsecured with screws.
(More on that later in the Recovery section.)</p><!--/$--><!--$?--><template id="B:a"></template><!--/$--><!--$--><h4 id="engine-block"></h4><!--/$--><!--$--><p>To keep the motor from sliding up the rocket, we added a wooden engine block‚Äîjust a disc cut from plywood and epoxied into place. Simple, strong, and effective at transferring thrust directly to the airframe.</p><!--/$--><!--$--><p>We used OpenRocket, an awesome open-source simulator, to model our full design. It let us estimate stability, CG/CP, and flight performance. OpenRocket is to structure what OpenMotor is to propulsion‚Äîsuper helpful and beginner-friendly.</p><!--/$--><!--$--><h3 id="avionics"></h3><!--/$--><!--$--><p>This was the most important subsystem of the mission‚Äîour primary challenge was to design an avionics system capable of active stage separation.</p><!--/$--><!--$--><p>In most traditional 2-stage model rockets, stage separation is passive. These rockets often use COTS (Commercial Off-The-Shelf) motors with well-known thrust curves. That makes it easy to design a system that simply triggers stage separation after a fixed time delay or at a certain altitude, based on predictable motor behavior.</p><!--/$--><!--$--><p>But our case was different‚Äîwe were flying in-house manufactured motors, so we didn‚Äôt have the luxury of precise thrust profiles. That meant we had to trigger the separation actively and intelligently, based on real-time sensor data.</p><!--/$--><!--$--><h4 id="burnout-detection-logic"></h4><!--/$--><!--$--><p>We decided to rely on acceleration values to detect motor burnout. During thrust, acceleration is significantly positive. The moment the motor burns out, acceleration drops‚Äî going negative due to drag and loss of thrust. We used this sudden drop as the primary indicator for burnout.</p><!--/$--><!--$--><p>To make it more robust, we also checked how long the negative acceleration persisted‚Äîadding a layer of redundant logic to avoid false triggers.</p><!--/$--><!--$?--><template id="B:b"></template><!--/$--><!--$--><!--/$--><!--$--><h4 id="hardware-overview"></h4><!--/$--><!--$--><p>Redundancy in avionics is critical‚Äîand dissimilar redundancy (using different hardware architectures) is even better. While we did that well in some areas, we also had room for improvement.</p><!--/$--><!--$--><p>We flew two independent flight computers:</p><!--/$--><!--$--><ul><!--$--><li><div><!--$--><p>Grace ‚Äì Based on an Arduino Nano</p><!--/$--></div></li><!--/$--><!--$--><li><div><!--$--><p>RocketNerve ‚Äì Based on a NodeMCU with 4MB of internal flash (used for logging)</p><!--/$--></div></li><!--/$--></ul><!--/$--><!--$?--><template id="B:c"></template><!--/$--><!--$--><p>Both systems followed the same basic architecture:</p><!--/$--><!--$--><ul><!--$--><li><div><!--$--><p>1 main microcontroller to process sensor data and trigger events</p><!--/$--></div></li><!--/$--><!--$--><li><div><!--$--><p>BMP280 for barometric pressure and altitude</p><!--/$--></div></li><!--/$--><!--$--><li><div><!--$--><p>MPU6050 for 6-axis inertial sensing (acceleration + angular velocity)</p><!--/$--></div></li><!--/$--><!--$--><li><div><!--$--><p>Two pyro/ejection channels controlled via transistors acting as switches</p><!--/$--></div></li><!--/$--><!--$--><li><div><!--$--><p>Powered by a 1S LiPo battery</p><!--/$--></div></li><!--/$--></ul><!--/$--><!--$--><p>This modular setup allowed us to process real-time flight data and trigger both stage separation and parachute ejection reliably.</p><!--/$--><!--$?--><template id="B:d"></template><!--/$--><!--$--><h4 id="firmware-and-control-logic"></h4><!--/$--><!--$--><p>Both flight computers ran custom firmware, designed to:</p><!--/$--><!--$--><ol><!--$--><li><div><!--$--><p>Continuously monitor acceleration and altitude</p><!--/$--></div></li><!--/$--><!--$--><li><div><!--$--><p>Detect burnout based on the acceleration drop</p><!--/$--></div></li><!--/$--><!--$--><li></li><!--/$--><!--$--><li><div><!--$--><p>Monitor altitude for apogee detection</p><!--/$--></div></li><!--/$--><!--$--><li><div><!--$--><p>Trigger parachute ejection</p><!--/$--></div></li><!--/$--></ol><!--/$--><!--$--><p>We'll cover the detailed firmware and flowcharts for this logic in an upcoming blog post, but the key point is: everything was real-time and event-driven, not time-based.</p><!--/$--><!--$?--><template id="B:e"></template><!--/$--><!--$--><h3 id="recovery"></h3><!--/$--><!--$--><p>For this flight, we decided to recover only the second stage. Technically, we did recover the first stage as well‚Äîbut not through any dedicated system. It simply fell ballistically. Since the rocket wasn‚Äôt going to reach extreme altitudes, we figured that was acceptable.</p><!--/$--><!--$--><h4 id="second-stage-recovery"></h4><!--/$--><!--$--><p>The upper stage (second stage) had a spring-loaded parachute ejection system paired with a spherical ripstop nylon parachute. The parachute was connected to both the ejection mechanism and the nosecone, allowing for a safe recovery of both components after apogee.</p><!--/$--><!--$?--><template id="B:f"></template><!--/$--><!--$--><h4 id="how-the-ejection-system-worked"><div>How the Ejection System Worked</div></h4><!--/$--><!--$--><ul><!--$--><li><div><!--$--><p>A spring was mounted on top of the avionics bay, with help of a simple bottom mount structure, made with wood and PVC. </p><!--/$--></div></li><!--/$--><!--$--><li><div><!--$--><p>The spring was compressed and held in place by a thread tied between two screws‚Äîone at the bottom and one at the top of the ejection assembly.</p><!--/$--></div></li><!--/$--><!--$--><li><div><!--$--><p>A disc-like platform sat on top of the spring, serving as a base for the neatly folded parachute.</p><!--/$--></div></li><!--/$--><!--$--><li><div><!--$--><p>The thread holding the spring was rigged with an e-match (electronic match), surrounded by a small amount of gunpowder and secured with paper tape.</p><!--/$--></div></li><!--/$--><!--$--><li><div><!--$--><p>This e-match was wired to both flight computers, giving either of them the ability to trigger deployment.</p><!--/$--></div></li><!--/$--></ul><!--/$--><!--$--><h4 id="deployment-logic"></h4><!--/$--><!--$--><p>Once apogee was detected, either of the flight computers could trigger the e-match. When fired:</p><!--/$--><!--$--><ol><!--$--><li><div><!--$--><p>The e-match burns the thread.</p><!--/$--></div></li><!--/$--><!--$--><li><div><!--$--><p>The spring is released, pushing the parachute and nosecone outward.</p><!--/$--></div></li><!--/$--><!--$--><li><div><!--$--><p>The parachute unfurls mid-air, safely recovering the second stage.</p><!--/$--></div></li><!--/$--></ol><!--/$--><!--$--><p>It was a simple, robust, and lightweight recovery system that worked just as planned‚Äîno pistons, no CO‚ÇÇ canisters, just good old mechanical ingenuity and a bit of gunpowder magic.</p><!--/$--><!--$?--><template id="B:10"></template><!--/$--></div><!--/$--></main></div><div hidden="" id="S:3"><p>To simulate and design the motor, we used<template id="P:13"></template>, an open-source software where you throw in your grain geometry, number of grains and nozzle dimensions etc ‚Äîand it spits out performance predictions. Two things we always fix first in our motor design:</p></div><div hidden="" id="S:5"><p>The naming isn‚Äôt random; check out<template id="P:16"></template> if you want to get nerdy about it.
TL;DR: The number after the letter tells you average thrust (in Newtons). So yeah, G136 hits harder than G96.</p></div><div hidden="" id="S:1"><picture><figcaption>Cross Section of a Solid Rocket Motor</figcaption></picture></div><div hidden="" id="S:b"><img data-testid="zoom-image" alt="Drawing" src="https://755459895-files.gitbook.io/~/files/v0/b/gitbook-x-prod.appspot.com/o/spaces%2FRA4M4jXg9Me4sjVHIEMe%2Fuploads%2FkGy4G1S7wG3BCZOJxKsI%2Ffile.excalidraw.svg?alt=media&amp;token=da7f5755-3d1d-499e-998e-7ac617a97bac" width="1416" height="1207"></div><div hidden="" id="S:d"><picture><figcaption>Flight Computer Hardware Architecture</figcaption></picture></div><div hidden="" id="S:e"><picture><figcaption>Avionics Firmware Architecture</figcaption></picture></div><div hidden="" id="S:17"><picture><figcaption>Our New Recurits learning how to make paper body</figcaption></picture></div><div hidden="" id="S:19"><picture><figcaption>Ejecjected Nosecone after Flight</figcaption></picture></div><div hidden="" id="S:1a"><picture><figcaption>First and Second stage Fincans</figcaption></picture></div><div hidden="" id="S:1c"><picture><figcaption>First stage Inspection After Lauch</figcaption></picture></div><div hidden="" id="S:1d"><picture><figcaption>First stage meeting the ground after it's ballistic descent</figcaption></picture></div><div hidden="" id="S:1e"><picture><figcaption>Avionics Bay (3D Printed)</figcaption></picture></div><div hidden="" id="S:1f"><picture><figcaption>Ejection System mounted on Avionics Bay (wooden)</figcaption></picture></div><div hidden="" id="S:24"><picture><figcaption>Tesing the ejection system</figcaption></picture></div><div hidden="" id="S:25"><picture><figcaption>Damaged Ejection system after launch</figcaption></picture></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[BPS is a GPS alternative that nobody's heard of (383 pts)]]></title>
            <link>https://www.jeffgeerling.com/blog/2025/bps-gps-alternative-nobodys-heard</link>
            <guid>43669308</guid>
            <pubDate>Sun, 13 Apr 2025 01:31:38 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.jeffgeerling.com/blog/2025/bps-gps-alternative-nobodys-heard">https://www.jeffgeerling.com/blog/2025/bps-gps-alternative-nobodys-heard</a>, See on <a href="https://news.ycombinator.com/item?id=43669308">Hacker News</a></p>
<div id="readability-page-1" class="page"><div><p>I came to the NAB (National Association of Broadcasters) show this year with my Dad to learn more about time in broadcast and live production.</p>

<p>I was expecting to learn more about grandmaster clocks, AV sync, timing in protocols like Dante, Livewire, AES67, and more‚Äîand I <em>have</em>. But then on the first day here I found this odd little corner of the building with a completely empty booth:</p>

<p><img src="https://www.jeffgeerling.com/sites/default/files/images/bps-demo-booth-empty.jpeg" width="700" height="467" data-insert-type="image" data-entity-type="file" data-entity-uuid="insert-image-c92190f2-fa60-4fb5-b03f-45b20588b7c4" data-insert-attach="{&quot;id&quot;:&quot;c92190f2-fa60-4fb5-b03f-45b20588b7c4&quot;,&quot;attributes&quot;:{&quot;alt&quot;:[&quot;alt&quot;,&quot;description&quot;],&quot;title&quot;:[&quot;title&quot;]}}" alt="BPS Demo Booth - it is empty"></p>

<p>When you see an oscilloscope that costs 3x the value of your car on a trade show floor... well, let's just say my interest was piqued.</p>

<p>I looked at it, and found something interesting‚Äîthe trigger was on a GPS PPS timing signal output from a u-blox GPS receiver. But the 2nd channel was monitoring <a href="https://news3lv.com/">KSNV-TV</a>, a US television station broadcasting an <em>ATSC 3.0</em> signal.</p>

<p><img src="https://www.jeffgeerling.com/sites/default/files/images/bps-gps-vs-ksnv-timing-signal.jpg" width="700" height="394" data-insert-type="image" data-entity-type="file" data-entity-uuid="insert-image-72f669c9-563f-466c-9c5b-a5d3b0634e6e" data-insert-attach="{&quot;id&quot;:&quot;72f669c9-563f-466c-9c5b-a5d3b0634e6e&quot;,&quot;attributes&quot;:{&quot;alt&quot;:[&quot;alt&quot;,&quot;description&quot;],&quot;title&quot;:[&quot;title&quot;]}}" alt="BPS KSNV-TV vs GPS pps"></p>

<p>The scope showed a PPS output (Pulse Per Second) demonstrating a pulse sync of +/- 10 ns between GPS and the TV signal output‚Äîwhich so happens to be <em>BPS</em>, an experimental timing standard that may be incorporated into the ATSC 3.0 rollout in the US (there are currently about 1,700 TV stations that could be upgraded).</p>

<p><img src="https://www.jeffgeerling.com/sites/default/files/images/bps-scope-10-ns-sync-gps.jpg" width="700" height="394" data-insert-type="image" data-entity-type="file" data-entity-uuid="insert-image-8926d48d-f994-4820-838c-2b2b8beed4bd" data-insert-attach="{&quot;id&quot;:&quot;8926d48d-f994-4820-838c-2b2b8beed4bd&quot;,&quot;attributes&quot;:{&quot;alt&quot;:[&quot;alt&quot;,&quot;description&quot;],&quot;title&quot;:[&quot;title&quot;]}}" alt="BPS showing 10ns sync"></p>

<p>After seeing the demo, I found out there <em>are</em> a few people who've heard of BPS... and many of them were presenting on it, as they were also the ones who were doing the initial rollout and experimentation.</p>

<p>ATSC 3.0 is a newer IP broadcast standard being rolled out in some countries‚Äîmy own home city has two TV stations broadcasting it right now, under the 'NEXTGEN TV' moniker. But so far only a few TV stations are participating in the BPS testing.</p>

<p>Because accurate timing is critical in many areas, from media, to the power grid, to 5G and communications, having a reliable terrestrial backup to GPS‚Äîespecially one that can be hardened against different types of jamming attempts‚Äîmay be important to our economy, communications and power grid... or people like who just want to have a good time!</p>

<p>And speaking of time stuff at the NAB Show... can you guess what I'm pointing to in this photo, from the ASUS booth?</p>

<p><img src="https://www.jeffgeerling.com/sites/default/files/images/jeff-geerling-nab-2025-asus-proart-motherboard-pps-tgpio.jpeg" width="700" height="394" data-insert-type="image" data-entity-type="file" data-entity-uuid="insert-image-8a6e7c70-c424-44e5-b834-fc4b80117316" data-insert-attach="{&quot;id&quot;:&quot;8a6e7c70-c424-44e5-b834-fc4b80117316&quot;,&quot;attributes&quot;:{&quot;alt&quot;:[&quot;alt&quot;,&quot;description&quot;],&quot;title&quot;:[&quot;title&quot;]}}" alt="Jeff Geerling pointing to PPS in out on ASUS ProArt motherboard"></p>

<p>If you guessed built-in PPS in/out connectors on a consumer Intel motherboard that syncs to <a href="https://eci.intel.com/docs/3.0/development/tcc-tools.html">TGPIO</a> (Time-Aware GPIO) on an Intel CPU... you'd be right! And if you have no clue what that means, well, I'll cover it more in depth later this year :)</p>

<p>Anyway, I am still learning about BPS, so I'll probably go deeper into it later in my timing series on my YouTube channel, but for now, I'll leave with with a quick video showing the demo (below), and a couple links for those who want to learn more:</p>

<div>
<p><iframe src="https://www.youtube.com/embed/cPCzNdUz5z0" frameborder="0" allowfullscreen=""></iframe></p>
</div>

<p>More resources:</p>

<ul>
<li><a href="https://www.nab.org/bps/ITM25-0009.pdf">BPS / NIST time experiment results</a></li>
<li><a href="https://nabpilot.org/broadcast-positioning-system-bps/">NAB PILOT - BPS Info</a></li>
<li><a href="https://www.ursanav.com/wp-content/uploads/UrsaNav-PTTI-Conference-Presentation.pdf">UrsaNav's eLoran timing</a></li>
</ul></div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[Experimental release of GrapheneOS for Pixel 9a (341 pts)]]></title>
            <link>https://grapheneos.social/@GrapheneOS/114327666433966529</link>
            <guid>43669185</guid>
            <pubDate>Sun, 13 Apr 2025 01:05:31 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://grapheneos.social/@GrapheneOS/114327666433966529">https://grapheneos.social/@GrapheneOS/114327666433966529</a>, See on <a href="https://news.ycombinator.com/item?id=43669185">Hacker News</a></p>
&lt;Unparsable&gt;]]></description>
        </item>
        <item>
            <title><![CDATA[Anubis Works (265 pts)]]></title>
            <link>https://xeiaso.net/notes/2025/anubis-works/</link>
            <guid>43668433</guid>
            <pubDate>Sat, 12 Apr 2025 22:32:19 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://xeiaso.net/notes/2025/anubis-works/">https://xeiaso.net/notes/2025/anubis-works/</a>, See on <a href="https://news.ycombinator.com/item?id=43668433">Hacker News</a></p>
<div id="readability-page-1" class="page"><div>
            <article>
    
    
    <p>
        Published on <time datetime="2025-04-12">04/12/2025</time>, 441 words, 2 minutes to read
    </p>

    

    
        
            
    

    

        
    

    
        <center>
            <figure><picture><source type="image/avif" srcset="https://cdn.xeiaso.net/file/christine-static/hero/dominos-un.avif"><source type="image/webp" srcset="https://cdn.xeiaso.net/file/christine-static/hero/dominos-un.webp"><img alt="An image of A 'domino effect' meme starting with 'Amazon takes out my Git server' and ending with 'Software deployed by the United Nations'." loading="lazy" src="https://cdn.xeiaso.net/file/christine-static/hero/dominos-un.jpg"></picture></figure>
        </center>
        <small>A 'domino effect' meme starting with 'Amazon takes out my Git server' and ending with 'Software deployed by the United Nations'. - Meme generated on imgflip.com</small>
    

    <p>That meme is not an understatement, <a href="https://anubis.techaro.lol/">Anubis</a> has been deployed by the United Nations.</p>
<p>For your amusement, here is how the inner monologue of me finding out about this went:</p>
<div><div><p><img alt="Aoi is wut" loading="lazy" src="https://stickers.xeiaso.net/sticker/aoi/wut"></p><div><p><span><a href="https://xeiaso.net/characters#aoi">Aoi</a></span><span></span></p><p>What. You can't be serious, can you?</p></div></div><div><p><img alt="Cadey is coffee" loading="lazy" src="https://stickers.xeiaso.net/sticker/cadey/coffee"></p></div><div><p><img alt="Aoi is wut" loading="lazy" src="https://stickers.xeiaso.net/sticker/aoi/wut"></p><div><p><span><a href="https://xeiaso.net/characters#aoi">Aoi</a></span><span></span></p><p>No, that can't be a real domain of the United Nations, can it?</p></div></div><div><p><img alt="Cadey is coffee" loading="lazy" src="https://stickers.xeiaso.net/sticker/cadey/coffee"></p></div><div><p><img alt="Aoi is sus" loading="lazy" src="https://stickers.xeiaso.net/sticker/aoi/sus"></p><div><p><span><a href="https://xeiaso.net/characters#aoi">Aoi</a></span><span></span></p><p>No way. No fucking way. What the heck, how is this real. What is YOUR
LIFE??? God I got the worst 2025 bingo card this year.</p></div></div></div>
<p>I hate to shake my can and ask for donations, but if you are using Anubis and it helps, please <a href="https://patreon.com/cadey">donate on Patreon</a>. I would really love to not have to work in generative AI anymore because the doublethink is starting to wear at my soul.</p>
<p>Also, do I happen to know anyone at UNESCO? I would love to get in touch with their systems administrator team and see if they had any trouble with setting it up. I'm very interested in making it easier to install.</p>
<p>This makes the big deployments that I know about include:</p>
<ul>
<li>The Linux Kernel Mailing List archives</li>
<li>FreeBSD's SVN (and soon git)</li>
<li>SourceHut</li>
<li>FFmpeg</li>
<li>Wine</li>
<li>UNESCO</li>
<li>The Science Olympiad Student Center</li>
<li>Enlightenment (the desktop environment)</li>
</ul>
<p>The conversation I'm about to have with my accountant is going to be one of the most surreal conversations of all time.</p>
<p>The part that's the most wild to me is when I stop and consider the scale of these organizations. I think that this means that the problem is <em>much worse</em> than I had previously anticipated. I know that at some point YouTube was about to hit "the inversion" where they get more bot traffic than they get human traffic. I wonder how much this is true across most of, if not all of the Internet right now.</p>
<p>I guess this means that I really need to start putting serious amounts of effort into Anubis and the stack around it. The best way that can be ensured is if I can get enough money to survive so I can put my full time effort into it. I may end up hiring people.</p>
<p>This is my life now. Follow me <a href="https://bsky.app/profile/xeiaso.net">on Bluesky</a> if you want to know when the domino meme gets more ridiculous!</p>

    <hr>

    

    

    <p>Facts and circumstances may have changed since publication. Please contact me before jumping to conclusions if something seems wrong or unclear.</p>

    <p>Tags: </p>
</article>
        </div><div>
            <p>Copyright 2012-2025 Xe Iaso. Any and all opinions listed here are my own and
                not representative of any of my employers, past, future, and/or present.</p>
            
            <p>Served by xesite v4 (/app/xesite) with site version 
                        <a href="https://github.com/Xe/site/commit/39be1916f1f429bbae7da0b45534d72ceb01d8f0">39be1916</a>
                    , source code available <a href="https://github.com/Xe/site">here</a>.</p>
        </div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[YAML: The Norway Problem (2022) (203 pts)]]></title>
            <link>https://www.bram.us/2022/01/11/yaml-the-norway-problem/</link>
            <guid>43668290</guid>
            <pubDate>Sat, 12 Apr 2025 22:10:35 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.bram.us/2022/01/11/yaml-the-norway-problem/">https://www.bram.us/2022/01/11/yaml-the-norway-problem/</a>, See on <a href="https://news.ycombinator.com/item?id=43668290">Hacker News</a></p>
<div id="readability-page-1" class="page"><div id="page">
	<p><a href="#content">
		Skip to content	</a></p><!-- #masthead -->

	<div id="content">
		<main id="main">

			
<article id="post-31489">
		
	
	<div>
		<p><a href="https://www.bram.us/wordpress/wp-content/uploads/2022/01/yaml-e1641935644383.webp" data-slb-active="1" data-slb-asset="1019124662" data-slb-internal="0" data-slb-group="31489"><img fetchpriority="high" decoding="async" src="https://www.bram.us/wordpress/wp-content/uploads/2022/01/yaml-e1641935644383-560x194.webp" alt="" width="560" height="194" srcset="https://www.bram.us/wordpress/wp-content/uploads/2022/01/yaml-e1641935644383-560x194.webp 560w, https://www.bram.us/wordpress/wp-content/uploads/2022/01/yaml-e1641935644383-768x266.webp 768w, https://www.bram.us/wordpress/wp-content/uploads/2022/01/yaml-e1641935644383.webp 1110w" sizes="(max-width: 560px) 100vw, 560px"></a></p>
<p>Earlier this week, <a href="https://twitter.com/haroenv/">Haroen Viaene</a> posted this tweet about YAML:</p>
<blockquote>
<p lang="en" dir="ltr">worst part of yaml: <a href="https://t.co/iiK37EpChV">https://yaml.org/type/bool.html</a></p>
<p>‚Äî Haroen Viaene (@haroenv) <a href="https://twitter.com/haroenv/status/1480520812063080456?ref_src=twsrc%5Etfw">January 10, 2022</a></p></blockquote>

<p>The linked-to page contains the documentation on what defines a boolean in YAML, and details that it can be parsed using this <abbr title="Regular Expression">regex</abbr>:</p>
<pre><code>y|Y|yes|Yes|YES|n|N|no|No|NO
|true|True|TRUE|false|False|FALSE
|on|On|ON|off|Off|OFF</code></pre>
<p>~</p>
<p>The reason to why this is problematic in some cases, is ‚ÄúThe Norway Problem‚Äù YAML has: when you abbreviate Norway to its ISO 3166-1 ALPHA-2 form <code>NO</code>, YAML will return <code>false</code> when parsing it:</p>
<pre><code>countries:
- GB
- IE
- FR
- DE
- NO</code></pre>
<pre><code>&gt;&gt;&gt; from pyyaml import load
&gt;&gt;&gt; load(the_configuration)
{'countries': ['GB', 'IE', 'FR', 'DE', False]}</code></pre>
<p>üëâ The solution is to either escape these values in double quotes, or to use a library ‚Äî such as StrictYAML for Python ‚Äî that won‚Äôt convert <code>NO</code> to <code>False</code>.</p>
<p>~</p>
<p>Other problematic values in YAML are version numbers that end in <code>.0</code> and a lastname such as <code>Null</code>. By default these get converted to numbers or <code>NULL</code> respectively.</p>
<p><a href="https://hitchdev.com/strictyaml/why/implicit-typing-removed/">The Norway Problem ‚Üí</a><br><a href="https://hitchdev.com/strictyaml/">StrictYAML ‚Üí</a></p>
	</div><!-- .entry-content -->

	<!-- .entry-footer -->

			<div>
	
	<p>
		Bramus is a frontend web developer from Belgium, working as a Chrome Developer Relations Engineer at Google. From the moment he discovered view-source at the age of 14 <em>(way back in 1997)</em>, he fell in love with the web and has been tinkering with it ever since <i><a href="https://www.bram.us/about">(more ‚Ä¶)</a></i>		<a href="https://www.bram.us/author/bramus/" rel="author">
			View more posts		</a>
	</p><!-- .author-description -->
</div><!-- .author-bio -->
				
</article><!-- #post-31489 -->

	<nav aria-label="Posts">
		<h2>Post navigation</h2>
		
	</nav>
<!-- #comments -->

		</main><!-- #main -->
	</div><!-- #content -->

	<!-- #colophon -->

</div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[WebTUI ‚Äì A CSS Library That Brings the Beauty of Terminal UIs to the Browser (290 pts)]]></title>
            <link>https://webtui.ironclad.sh</link>
            <guid>43668250</guid>
            <pubDate>Sat, 12 Apr 2025 22:02:58 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://webtui.ironclad.sh">https://webtui.ironclad.sh</a>, See on <a href="https://news.ycombinator.com/item?id=43668250">Hacker News</a></p>
<div id="readability-page-1" class="page"><div flex-="col gap:1" space-="px:1" data-astro-cid-j7pv25f6="">  <p tabindex="0" data-astro-cid-j7pv25f6="">
WebTUI is a modular CSS library that brings the beauty of Terminal
              UIs to the browser
</p> </div></div>]]></description>
        </item>
        <item>
            <title><![CDATA[I ditched my laptop for a pocketable mini PC and a pair of AR glasses (313 pts)]]></title>
            <link>https://www.tomsguide.com/computing/i-ditched-my-laptop-for-a-pocketable-mini-pc-and-a-pair-of-ar-glasses-heres-what-happened</link>
            <guid>43668192</guid>
            <pubDate>Sat, 12 Apr 2025 21:50:39 GMT</pubDate>
            <description><![CDATA[<p>URL: <a href="https://www.tomsguide.com/computing/i-ditched-my-laptop-for-a-pocketable-mini-pc-and-a-pair-of-ar-glasses-heres-what-happened">https://www.tomsguide.com/computing/i-ditched-my-laptop-for-a-pocketable-mini-pc-and-a-pair-of-ar-glasses-heres-what-happened</a>, See on <a href="https://news.ycombinator.com/item?id=43668192">Hacker News</a></p>
<div id="readability-page-1" class="page"><div data-widget-type="contentparsed" id="content">

<section>
<div>
<div>
<picture data-new-v2-image="true">
<source type="image/webp" srcset="https://cdn.mos.cms.futurecdn.net/qVmUFc6ZJmJSsd7tozf8UC-1920-80.jpg.webp 1920w, https://cdn.mos.cms.futurecdn.net/qVmUFc6ZJmJSsd7tozf8UC-1200-80.jpg.webp 1200w, https://cdn.mos.cms.futurecdn.net/qVmUFc6ZJmJSsd7tozf8UC-1024-80.jpg.webp 1024w, https://cdn.mos.cms.futurecdn.net/qVmUFc6ZJmJSsd7tozf8UC-970-80.jpg.webp 970w, https://cdn.mos.cms.futurecdn.net/qVmUFc6ZJmJSsd7tozf8UC-650-80.jpg.webp 650w, https://cdn.mos.cms.futurecdn.net/qVmUFc6ZJmJSsd7tozf8UC-480-80.jpg.webp 480w, https://cdn.mos.cms.futurecdn.net/qVmUFc6ZJmJSsd7tozf8UC-320-80.jpg.webp 320w" sizes="(min-width: 1000px) 600px, calc(100vw - 40px)">
<img src="https://cdn.mos.cms.futurecdn.net/qVmUFc6ZJmJSsd7tozf8UC.jpg" alt="A person using Xreal One AR glasses with the Khadas Mind 2S mini PC at a coffee shop" srcset="https://cdn.mos.cms.futurecdn.net/qVmUFc6ZJmJSsd7tozf8UC-1920-80.jpg 1920w, https://cdn.mos.cms.futurecdn.net/qVmUFc6ZJmJSsd7tozf8UC-1200-80.jpg 1200w, https://cdn.mos.cms.futurecdn.net/qVmUFc6ZJmJSsd7tozf8UC-1024-80.jpg 1024w, https://cdn.mos.cms.futurecdn.net/qVmUFc6ZJmJSsd7tozf8UC-970-80.jpg 970w, https://cdn.mos.cms.futurecdn.net/qVmUFc6ZJmJSsd7tozf8UC-650-80.jpg 650w, https://cdn.mos.cms.futurecdn.net/qVmUFc6ZJmJSsd7tozf8UC-480-80.jpg 480w, https://cdn.mos.cms.futurecdn.net/qVmUFc6ZJmJSsd7tozf8UC-320-80.jpg 320w" sizes="(min-width: 1000px) 600px, calc(100vw - 40px)" data-original-mos="https://cdn.mos.cms.futurecdn.net/qVmUFc6ZJmJSsd7tozf8UC.jpg" data-pin-media="https://cdn.mos.cms.futurecdn.net/qVmUFc6ZJmJSsd7tozf8UC.jpg" data-pin-nopin="true" fetchpriority="high">
</picture>
</div>
<figcaption>
<span>(Image credit: Tom's Guide)</span>
</figcaption>
</div>

<div id="article-body">
<p>I work best seated at my <a data-analytics-id="inline-link" href="https://www.tomsguide.com/computing/i-revamped-my-desk-setup-using-the-worlds-most-expensive-cable-management-accessory-this-changes-everything" data-before-rewrite-localise="https://www.tomsguide.com/computing/i-revamped-my-desk-setup-using-the-worlds-most-expensive-cable-management-accessory-this-changes-everything">desk setup</a> with multiple screens in front of me However, when I travel or just need to get out of the house for a bit, I can‚Äôt bring my setup with me‚Äîor at least I thought I couldn‚Äôt.</p><p>Now I know what you‚Äôre thinking. Why don‚Äôt I just go with one of the <a data-analytics-id="inline-link" href="https://www.tomsguide.com/best-picks/best-laptops" data-before-rewrite-localise="https://www.tomsguide.com/best-picks/best-laptops">best laptops</a> instead? Well, I‚Äôve tried and while my <a data-analytics-id="inline-link" href="https://www.tomsguide.com/opinion/i-love-my-desktop-but-this-thinkpad-convinced-me-to-give-laptops-a-second-chance" data-before-rewrite-localise="https://www.tomsguide.com/opinion/i-love-my-desktop-but-this-thinkpad-convinced-me-to-give-laptops-a-second-chance">trusty ThinkPad</a> hasn‚Äôt let me down yet, I still end up using it with extra peripherals and oftentimes, a <a data-analytics-id="inline-link" href="https://www.tomsguide.com/computing/monitors/this-dual-screen-portable-monitor-changed-how-i-use-my-laptop-and-now-i-cant-imagine-traveling-without-it" data-before-rewrite-localise="https://www.tomsguide.com/computing/monitors/this-dual-screen-portable-monitor-changed-how-i-use-my-laptop-and-now-i-cant-imagine-traveling-without-it">portable monitor</a> too, which kind of defeats the purpose of using a laptop in the first place.</p><p>Over the past few years, I‚Äôve also downsized from a full desktop and I now do the majority of my work from one of the <a data-analytics-id="inline-link" href="https://www.tomsguide.com/us/best-mini-pc.html" data-before-rewrite-localise="https://www.tomsguide.com/us/best-mini-pc.html">best mini PCs</a>. I like the experience of using a mini PC over a desktop or a laptop so much that I even <a data-analytics-id="inline-link" href="https://www.tomsguide.com/computing/i-brought-a-mini-pc-with-me-on-my-last-trip-and-id-do-it-again-in-a-heartbeat" data-before-rewrite-localise="https://www.tomsguide.com/computing/i-brought-a-mini-pc-with-me-on-my-last-trip-and-id-do-it-again-in-a-heartbeat">took a mini PC with me to Taiwan</a> last summer.</p><p>Of all the mini PCs I‚Äôve tested and reviewed, one in particular has stuck with me and that‚Äôs due to how portable it is and the fact that it uses a USB-C port for power instead of a barrel port connector. After trying out a pair of AR glasses for the first time when I <a data-analytics-id="inline-link" href="https://www.tomsguide.com/tablets/i-spent-two-weeks-with-the-ipad-mini-7-and-it-reignited-my-love-for-smaller-tablets" data-before-rewrite-localise="https://www.tomsguide.com/tablets/i-spent-two-weeks-with-the-ipad-mini-7-and-it-reignited-my-love-for-smaller-tablets">spent two weeks with the iPad mini</a>, I decided why not combine the two together and throw one of the <a data-analytics-id="inline-link" href="https://www.tomsguide.com/best-picks/best-portable-chargers" data-before-rewrite-localise="https://www.tomsguide.com/best-picks/best-portable-chargers">best power banks</a> into the mix for good measure. Then, I could truly work from anywhere just like I do from the comfort of my home office.</p><p>I‚Äôve been using a pocketable mini PC, a pair of AR glasses and a massive 25,000 mAh power bank together for the past two weeks and it‚Äôs completely transformed the way I work. Here‚Äôs how I came up with this novel approach to on-the-go computing to better fit my unique workflow.</p><h2 id="pocketable-meets-private-3">Pocketable meets private</h2><figure data-bordeaux-image-check=""><div><p><picture><source type="image/webp" srcset="https://cdn.mos.cms.futurecdn.net/vwHRxJSD9c6Er7HsCyhMrP-320-80.jpg.webp 320w, https://cdn.mos.cms.futurecdn.net/vwHRxJSD9c6Er7HsCyhMrP-480-80.jpg.webp 480w, https://cdn.mos.cms.futurecdn.net/vwHRxJSD9c6Er7HsCyhMrP-650-80.jpg.webp 650w, https://cdn.mos.cms.futurecdn.net/vwHRxJSD9c6Er7HsCyhMrP-970-80.jpg.webp 970w, https://cdn.mos.cms.futurecdn.net/vwHRxJSD9c6Er7HsCyhMrP-1024-80.jpg.webp 1024w, https://cdn.mos.cms.futurecdn.net/vwHRxJSD9c6Er7HsCyhMrP-1200-80.jpg.webp 1200w" sizes="(min-width: 1000px) 970px, calc(100vw - 40px)"><img src="https://cdn.mos.cms.futurecdn.net/vwHRxJSD9c6Er7HsCyhMrP.jpg" alt="Slipping the Khadas Mind mini PC into a pocket" srcset="https://cdn.mos.cms.futurecdn.net/vwHRxJSD9c6Er7HsCyhMrP-320-80.jpg 320w, https://cdn.mos.cms.futurecdn.net/vwHRxJSD9c6Er7HsCyhMrP-480-80.jpg 480w, https://cdn.mos.cms.futurecdn.net/vwHRxJSD9c6Er7HsCyhMrP-650-80.jpg 650w, https://cdn.mos.cms.futurecdn.net/vwHRxJSD9c6Er7HsCyhMrP-970-80.jpg 970w, https://cdn.mos.cms.futurecdn.net/vwHRxJSD9c6Er7HsCyhMrP-1024-80.jpg 1024w, https://cdn.mos.cms.futurecdn.net/vwHRxJSD9c6Er7HsCyhMrP-1200-80.jpg 1200w" sizes="(min-width: 1000px) 970px, calc(100vw - 40px)" loading="lazy" data-original-mos="https://cdn.mos.cms.futurecdn.net/vwHRxJSD9c6Er7HsCyhMrP.jpg" data-pin-media="https://cdn.mos.cms.futurecdn.net/vwHRxJSD9c6Er7HsCyhMrP.jpg"></picture></p></div><figcaption itemprop="caption description"><span itemprop="copyrightHolder">(Image credit: Tom's Guide)</span></figcaption></figure><p>Last year, I got to try out the <a data-analytics-id="inline-link" href="https://www.tomsguide.com/computing/desktop-computers/khadas-mind-review" data-before-rewrite-localise="https://www.tomsguide.com/computing/desktop-computers/khadas-mind-review">Khadas Mind</a> and even now, there‚Äôs no mini PC quite like it. Instead of being rectangular or having a cube-like shape, the Mind looks a lot more like one of the <a data-analytics-id="inline-link" href="https://www.tomsguide.com/best-picks/best-external-hard-drives" data-before-rewrite-localise="https://www.tomsguide.com/best-picks/best-external-hard-drives">best external hard drives</a>. Not only is it powerful, it‚Äôs also pocketable thanks to its tiny 5.75 x 4.13 x 0.79-inch frame.</p><p>Another thing that sets the Khadas Mind apart from other mini PCs is that Khadas has created a whole ecosystem of accessories around it. There‚Äôs the standard Mind Dock which adds more ports, dual-monitor support, a fingerprint reader and even a volume knob on the side, as well as the premium Mind Graphics dock which adds even more ports as well as a full-size Nvidia RTX 4060 Ti desktop graphics card.</p><p>Khadas is also working on a portable display with a keyboard that magnetically attaches to this mini PC like both of these docks do if you prefer a more laptop-like experience.</p><figure data-bordeaux-image-check=""><div><p><picture><source type="image/webp" srcset="https://cdn.mos.cms.futurecdn.net/gAUfncbeueujmPmdm9rCNk-320-80.jpg.webp 320w, https://cdn.mos.cms.futurecdn.net/gAUfncbeueujmPmdm9rCNk-480-80.jpg.webp 480w, https://cdn.mos.cms.futurecdn.net/gAUfncbeueujmPmdm9rCNk-650-80.jpg.webp 650w, https://cdn.mos.cms.futurecdn.net/gAUfncbeueujmPmdm9rCNk-970-80.jpg.webp 970w, https://cdn.mos.cms.futurecdn.net/gAUfncbeueujmPmdm9rCNk-1024-80.jpg.webp 1024w, https://cdn.mos.cms.futurecdn.net/gAUfncbeueujmPmdm9rCNk-1200-80.jpg.webp 1200w" sizes="(min-width: 1000px) 970px, calc(100vw - 40px)"><img src="https://cdn.mos.cms.futurecdn.net/gAUfncbeueujmPmdm9rCNk.jpg" alt="The rear ports on the Khadas Mind mini PC" srcset="https://cdn.mos.cms.futurecdn.net/gAUfncbeueujmPmdm9rCNk-320-80.jpg 320w, https://cdn.mos.cms.futurecdn.net/gAUfncbeueujmPmdm9rCNk-480-80.jpg 480w, https://cdn.mos.cms.futurecdn.net/gAUfncbeueujmPmdm9rCNk-650-80.jpg 650w, https://cdn.mos.cms.futurecdn.net/gAUfncbeueujmPmdm9rCNk-970-80.jpg 970w, https://cdn.mos.cms.futurecdn.net/gAUfncbeueujmPmdm9rCNk-1024-80.jpg 1024w, https://cdn.mos.cms.futurecdn.net/gAUfncbeueujmPmdm9rCNk-1200-80.jpg 1200w" sizes="(min-width: 1000px) 970px, calc(100vw - 40px)" loading="lazy" data-original-mos="https://cdn.mos.cms.futurecdn.net/gAUfncbeueujmPmdm9rCNk.jpg" data-pin-media="https://cdn.mos.cms.futurecdn.net/gAUfncbeueujmPmdm9rCNk.jpg"></picture></p></div><figcaption itemprop="caption description"><span itemprop="copyrightHolder">(Image credit: Tom's Guide)</span></figcaption></figure><p>The main reason I chose the Khadas Mind for this project is because of its ports and portability though. Like I said before, it uses a USB-C port for power (on the far left) but it also has a second, full-featured USB-C port for video out in addition to two USB-A ports and an HDMI port. With one USB-C port for power and another for video, the Khadas Mind turned out to be the perfect fit for this one-of-a-kind mobile setup.</p><p>After I reviewed the original Mind last year, Khadas unveiled the Mind 2S at <a data-analytics-id="inline-link" href="https://www.tomsguide.com/tech-events/10-weirdest-gadgets-of-ces-2025" data-before-rewrite-localise="https://www.tomsguide.com/tech-events/10-weirdest-gadgets-of-ces-2025">CES</a> back in January as a more powerful followup to the Mind 2. I had already sent the Mind 1 back, so I reached out to Khadas directly and they sent over this new more powerful mini PC for this project, though I am working on a review of it too.</p><p>While the Mind 1 handled everything I threw at quite well, the Mind 2S is an absolute powerhouse with an Intel Core Ultra 7 255H processor, 64GB of LPDDR5X RAM and a 2TB SSD. Khadas also upgraded its two USB-C ports to Thunderbolt 4 ones for faster data transfer speeds and enhanced display capabilities.</p><figure data-bordeaux-image-check=""><div><p><picture><source type="image/webp" srcset="https://cdn.mos.cms.futurecdn.net/63giAhZydnXZuCnUvfD4We-320-80.jpg.webp 320w, https://cdn.mos.cms.futurecdn.net/63giAhZydnXZuCnUvfD4We-480-80.jpg.webp 480w, https://cdn.mos.cms.futurecdn.net/63giAhZydnXZuCnUvfD4We-650-80.jpg.webp 650w, https://cdn.mos.cms.futurecdn.net/63giAhZydnXZuCnUvfD4We-970-80.jpg.webp 970w, https://cdn.mos.cms.futurecdn.net/63giAhZydnXZuCnUvfD4We-1024-80.jpg.webp 1024w, https://cdn.mos.cms.futurecdn.net/63giAhZydnXZuCnUvfD4We-1200-80.jpg.webp 1200w" sizes="(min-width: 1000px) 970px, calc(100vw - 40px)"><img src="https://cdn.mos.cms.futurecdn.net/63giAhZydnXZuCnUvfD4We.jpg" alt="Xreal One" srcset="https://cdn.mos.cms.futurecdn.net/63giAhZydnXZuCnUvfD4We-320-80.jpg 320w, https://cdn.mos.cms.futurecdn.net/63giAhZydnXZuCnUvfD4We-480-80.jpg 480w, https://cdn.mos.cms.futurecdn.net/63giAhZydnXZuCnUvfD4We-650-80.jpg 650w, https://cdn.mos.cms.futurecdn.net/63giAhZydnXZuCnUvfD4We-970-80.jpg 970w, https://cdn.mos.cms.futurecdn.net/63giAhZydnXZuCnUvfD4We-1024-80.jpg 1024w, https://cdn.mos.cms.futurecdn.net/63giAhZydnXZuCnUvfD4We-1200-80.jpg 1200w" sizes="(min-width: 1000px) 970px, calc(100vw - 40px)" loading="lazy" data-original-mos="https://cdn.mos.cms.futurecdn.net/63giAhZydnXZuCnUvfD4We.jpg" data-pin-media="https://cdn.mos.cms.futurecdn.net/63giAhZydnXZuCnUvfD4We.jpg"></picture></p></div><figcaption itemprop="caption description"><span itemprop="copyrightHolder">(Image credit: Future)</span></figcaption></figure><p>As I haven‚Äôt had a chance to try out a pair of the <a data-analytics-id="inline-link" href="https://www.tomsguide.com/computing/vr-ar/best-smart-glasses" data-before-rewrite-localise="https://www.tomsguide.com/computing/vr-ar/best-smart-glasses">best smart glasses yet</a>, I had my colleague Jason England recommend a pair for this project. He suggested the <a data-analytics-id="inline-link" href="https://www.tomsguide.com/computing/vr-ar/xreal-one-ar-glasses-review" data-before-rewrite-localise="https://www.tomsguide.com/computing/vr-ar/xreal-one-ar-glasses-review">Xreal One AR glasses</a> as they have Xreal‚Äôs X1 spatial computing chip built-in. This chip gives you full control over the glasses‚Äô 3 Degrees of Freedom tracking and also lets you go from a standard 16:9 display to an ultrawide one at the push of a button.</p><p>Another thing that I really like about the Xreal One glasses is that unlike the Meta Quest 3 or even the Apple Vision Pro, they don‚Äôt have a built-in battery. Not only does this make them lighter and more comfortable to wear, you don‚Äôt have to worry about charging which would make my mini PC/AR glasses setup more difficult to use at a moment‚Äôs notice. Instead, they draw their power from the device they‚Äôre connected to.</p><figure data-bordeaux-image-check=""><div><p><picture><source type="image/webp" srcset="https://cdn.mos.cms.futurecdn.net/qp2B2qpcgELcT9eoCKWHdA-320-80.jpg.webp 320w, https://cdn.mos.cms.futurecdn.net/qp2B2qpcgELcT9eoCKWHdA-480-80.jpg.webp 480w, https://cdn.mos.cms.futurecdn.net/qp2B2qpcgELcT9eoCKWHdA-650-80.jpg.webp 650w, https://cdn.mos.cms.futurecdn.net/qp2B2qpcgELcT9eoCKWHdA-970-80.jpg.webp 970w, https://cdn.mos.cms.futurecdn.net/qp2B2qpcgELcT9eoCKWHdA-1024-80.jpg.webp 1024w, https://cdn.mos.cms.futurecdn.net/qp2B2qpcgELcT9eoCKWHdA-1200-80.jpg.webp 1200w" sizes="(min-width: 1000px) 970px, calc(100vw - 40px)"><img src="https://cdn.mos.cms.futurecdn.net/qp2B2qpcgELcT9eoCKWHdA.jpg" alt="A person sitting on a chair watching videos on an iPad mini 7 using the XReal One AR glasses" srcset="https://cdn.mos.cms.futurecdn.net/qp2B2qpcgELcT9eoCKWHdA-320-80.jpg 320w, https://cdn.mos.cms.futurecdn.net/qp2B2qpcgELcT9eoCKWHdA-480-80.jpg 480w, https://cdn.mos.cms.futurecdn.net/qp2B2qpcgELcT9eoCKWHdA-650-80.jpg 650w, https://cdn.mos.cms.futurecdn.net/qp2B2qpcgELcT9eoCKWHdA-970-80.jpg 970w, https://cdn.mos.cms.futurecdn.net/qp2B2qpcgELcT9eoCKWHdA-1024-80.jpg 1024w, https://cdn.mos.cms.futurecdn.net/qp2B2qpcgELcT9eoCKWHdA-1200-80.jpg 1200w" sizes="(min-width: 1000px) 970px, calc(100vw - 40px)" loading="lazy" data-original-mos="https://cdn.mos.cms.futurecdn.net/qp2B2qpcgELcT9eoCKWHdA.jpg" data-pin-media="https://cdn.mos.cms.futurecdn.net/qp2B2qpcgELcT9eoCKWHdA.jpg"></picture></p></div><figcaption itemprop="caption description"><span itemprop="copyrightHolder">(Image credit: Tom's Guide)</span></figcaption></figure><p>After unboxing the Xreal Ones that Xreal sent over to help me turn this dream into reality, I was very impressed by how they worked immediately when plugged into the <a data-analytics-id="inline-link" href="https://www.tomsguide.com/tablets/ipads/ipad-mini-7-review" data-before-rewrite-localise="https://www.tomsguide.com/tablets/ipads/ipad-mini-7-review">iPad mini</a>. I didn‚Äôt have to configure anything and they were truly plug and play.</p><p>If you‚Äôre thinking about trying out a pair of AR glasses yourself, just make sure that your smartphone, tablet or whatever device you want to use them with comes equipped with DisplayPort Alt Mode over USB-C. Otherwise, you‚Äôre going to need an adapter, which adds a bit of bulk and makes using them slightly more complicated.</p><h2 id="powered-and-portable-3">Powered and portable</h2><figure data-bordeaux-image-check=""><div><p><picture><source type="image/webp" srcset="https://cdn.mos.cms.futurecdn.net/kgfdp8RLpzMr8seu87XWiK-320-80.jpg.webp 320w, https://cdn.mos.cms.futurecdn.net/kgfdp8RLpzMr8seu87XWiK-480-80.jpg.webp 480w, https://cdn.mos.cms.futurecdn.net/kgfdp8RLpzMr8seu87XWiK-650-80.jpg.webp 650w, https://cdn.mos.cms.futurecdn.net/kgfdp8RLpzMr8seu87XWiK-970-80.jpg.webp 970w, https://cdn.mos.cms.futurecdn.net/kgfdp8RLpzMr8seu87XWiK-1024-80.jpg.webp 1024w, https://cdn.mos.cms.futurecdn.net/kgfdp8RLpzMr8seu87XWiK-1200-80.jpg.webp 1200w" sizes="(min-width: 1000px) 970px, calc(100vw - 40px)"><img src="https://cdn.mos.cms.futurecdn.net/kgfdp8RLpzMr8seu87XWiK.jpg" alt="The Xreal One AR glasses next to the Ugreen Nexode Power Bank and the Khadas Mind 2S on a desk" srcset="https://cdn.mos.cms.futurecdn.net/kgfdp8RLpzMr8seu87XWiK-320-80.jpg 320w, https://cdn.mos.cms.futurecdn.net/kgfdp8RLpzMr8seu87XWiK-480-80.jpg 480w, https://cdn.mos.cms.futurecdn.net/kgfdp8RLpzMr8seu87XWiK-650-80.jpg 650w, https://cdn.mos.cms.futurecdn.net/kgfdp8RLpzMr8seu87XWiK-970-80.jpg 970w, https://cdn.mos.cms.futurecdn.net/kgfdp8RLpzMr8seu87XWiK-1024-80.jpg 1024w, https://cdn.mos.cms.futurecdn.net/kgfdp8RLpzMr8seu87XWiK-1200-80.jpg 1200w" sizes="(min-width: 1000px) 970px, calc(100vw - 40px)" loading="lazy" data-original-mos="https://cdn.mos.cms.futurecdn.net/kgfdp8RLpzMr8seu87XWiK.jpg" data-pin-media="https://cdn.mos.cms.futurecdn.net/kgfdp8RLpzMr8seu87XWiK.jpg"></picture></p></div><figcaption itemprop="caption description"><span itemprop="copyrightHolder">(Image credit: Tom's Guide)</span></figcaption></figure><p>With the Khadas Mind 2S and the Xreal One AR glasses in hand, I just needed one more thing: a way to power them. At home or at a hotel, I was able to power this whole setup using a GaN charger but I wanted a way to use it during those times when there wasn‚Äôt an outlet nearby.</p><p>To that end, I decided to pick up the 25,000 mAh version of the Ugreen Nexode Power Bank. I‚Äôve always had a great experience with Ugreen‚Äôs chargers, cables and other products in the past, so I wanted to see how well its largest power bank performed. Another reason that I picked this particular power bank is that it‚Äôs flight approved but more on that later.</p><figure data-bordeaux-image-check=""><div><p><picture><source type="image/webp" srcset="https://cdn.mos.cms.futurecdn.net/HPRS3nbdAiHeBL5pUF85sU-320-80.jpg.webp 320w, https://cdn.mos.cms.futurecdn.net/HPRS3nbdAiHeBL5pUF85sU-480-80.jpg.webp 480w, https://cdn.mos.cms.futurecdn.net/HPRS3nbdAiHeBL5pUF85sU-650-80.jpg.webp 650w, https://cdn.mos.cms.futurecdn.net/HPRS3nbdAiHeBL5pUF85sU-970-80.jpg.webp 970w, https://cdn.mos.cms.futurecdn.net/HPRS3nbdAiHeBL5pUF85sU-1024-80.jpg.webp 1024w, https://cdn.mos.cms.futurecdn.net/HPRS3nbdAiHeBL5pUF85sU-1200-80.jpg.webp 1200w" sizes="(min-width: 1000px) 970px, calc(100vw - 40px)"><img src="https://cdn.mos.cms.futurecdn.net/HPRS3nbdAiHeBL5pUF85sU.jpg" alt="Holding up the Xreal One AR glasses in front of the Khadas Mind 2S, a mechanical keyboard, a trackball mouse and a Ugreen power bank on a desk" srcset="https://cdn.mos.cms.futurecdn.net/HPRS3nbdAiHeBL5pUF85sU-320-80.jpg 320w, https://cdn.mos.cms.futurecdn.net/HPRS3nbdAiHeBL5pUF85sU-480-80.jpg 480w, https://cdn.mos.cms.futurecdn.net/HPRS3nbdAiHeBL5pUF85sU-650-80.jpg 650w, https://cdn.mos.cms.futurecdn.net/HPRS3nbdAiHeBL5pUF85sU-970-80.jpg 970w, https://cdn.mos.cms.futurecdn.net/HPRS3nbdAiHeBL5pUF85sU-1024-80.jpg 1024w, https://cdn.mos.cms.futurecdn.net/HPRS3nbdAiHeBL5pUF85sU-1200-80.jpg 1200w" sizes="(min-width: 1000px) 970px, calc(100vw - 40px)" loading="lazy" data-original-mos="https://cdn.mos.cms.futurecdn.net/HPRS3nbdAiHeBL5pUF85sU.jpg" data-pin-media="https://cdn.mos.cms.futurecdn.net/HPRS3nbdAiHeBL5pUF85sU.jpg"></picture></p></div><figcaption itemprop="caption description"><span itemprop="copyrightHolder">(Image credit: Tom's Guide)</span></figcaption></figure><p>With two USB-C ports at the top with one capable of putting out 100 watts and the other able to deliver 140 watts of power, I had more than enough power on hand for both the Khadas Mind 2S and the Xreal One AR glasses. I paired the two devices with my favorite budget mechanical keyboard (<a data-analytics-id="inline-link" href="https://target.georiot.com/Proxy.ashx?tsid=45724&amp;GR_URL=https%3A%2F%2Famazon.com%2FUKVEY-Low-Profile-Mechanical-Compatible-Rechargeable%2Fdp%2FB0CXLVPN98%3Fth%3D1%26tag%3Dhawk-future-20%26ascsubtag%3Dtomsguide-us-8673277385632634263-20" target="_blank" rel="sponsored noopener" data-url="https://www.amazon.com/UKVEY-Low-Profile-Mechanical-Compatible-Rechargeable/dp/B0CXLVPN98?th=1" referrerpolicy="no-referrer-when-downgrade" data-hl-processed="hawklinks" data-placeholder-url="https://target.georiot.com/Proxy.ashx?tsid=45724&amp;GR_URL=https%3A%2F%2Famazon.com%2FUKVEY-Low-Profile-Mechanical-Compatible-Rechargeable%2Fdp%2FB0CXLVPN98%3Fth%3D1%26tag%3Dhawk-future-20%26ascsubtag%3Dhawk-custom-tracking-20" data-google-interstitial="false" data-merchant-name="Amazon US" data-merchant-id="1471" data-merchant-network="Amazon" data-merchant-url="amazon.com">$40, Amazon</a>) and a <a data-analytics-id="inline-link" href="https://www.tomsguide.com/reference/what-is-a-trackball-mouse" data-before-rewrite-localise="https://www.tomsguide.com/reference/what-is-a-trackball-mouse">mini trackball mouse</a> from <a data-analytics-id="inline-link" href="https://www.tomsguide.com/opinion/forget-logitech-im-obsessed-with-this-obscure-japanese-mouse-maker" data-before-rewrite-localise="https://www.tomsguide.com/opinion/forget-logitech-im-obsessed-with-this-obscure-japanese-mouse-maker">Elecom</a>.</p><figure data-bordeaux-image-check=""><div><p><picture><source type="image/webp" srcset="https://cdn.mos.cms.futurecdn.net/MpLjvnvu9f6U4DrMDxuxZc-320-80.jpg.webp 320w, https://cdn.mos.cms.futurecdn.net/MpLjvnvu9f6U4DrMDxuxZc-480-80.jpg.webp 480w, https://cdn.mos.cms.futurecdn.net/MpLjvnvu9f6U4DrMDxuxZc-650-80.jpg.webp 650w, https://cdn.mos.cms.futurecdn.net/MpLjvnvu9f6U4DrMDxuxZc-970-80.jpg.webp 970w, https://cdn.mos.cms.futurecdn.net/MpLjvnvu9f6U4DrMDxuxZc-1024-80.jpg.webp 1024w, https://cdn.mos.cms.futurecdn.net/MpLjvnvu9f6U4DrMDxuxZc-1200-80.jpg.webp 1200w" sizes="(min-width: 1000px) 970px, calc(100vw - 40px)"><img src="https://cdn.mos.cms.futurecdn.net/MpLjvnvu9f6U4DrMDxuxZc.jpg" alt="A person sitting in an office chair working at a desk with AR glasses on powered by a mini PC" srcset="https://cdn.mos.cms.futurecdn.net/MpLjvnvu9f6U4DrMDxuxZc-320-80.jpg 320w, https://cdn.mos.cms.futurecdn.net/MpLjvnvu9f6U4DrMDxuxZc-480-80.jpg 480w, https://cdn.mos.cms.futurecdn.net/MpLjvnvu9f6U4DrMDxuxZc-650-80.jpg 650w, https://cdn.mos.cms.futurecdn.net/MpLjvnvu9f6U4DrMDxuxZc-970-80.jpg 970w, https://cdn.mos.cms.futurecdn.net/MpLjvnvu9f6U4DrMDxuxZc-1024-80.jpg 1024w, https://cdn.mos.cms.futurecdn.net/MpLjvnvu9f6U4DrMDxuxZc-1200-80.jpg 1200w" sizes="(min-width: 1000px) 970px, calc(100vw - 40px)" loading="lazy" data-original-mos="https://cdn.mos.cms.futurecdn.net/MpLjvnvu9f6U4DrMDxuxZc.jpg" data-pin-media="https://cdn.mos.cms.futurecdn.net/MpLjvnvu9f6U4DrMDxuxZc.jpg"></picture></p></div><figcaption itemprop="caption description"><span itemprop="copyrightHolder">(Image credit: Tom's Guide)</span></figcaption></figure><p>Much to my surprise, it didn‚Äôt take long at all to get used to working while wearing AR glasses. Maybe it was because this was the same mechanical keyboard/trackball mouse combo I always bring with me while traveling but I settled in to using this setup in no time at all.</p><p>Now though, it was time to take it out into the world and see whether it was really better for me than using a laptop.</p><h2 id="a-whole-new-way-to-work-3">A whole new way to work</h2><figure data-bordeaux-image-check=""><div><p><picture><source type="image/webp" srcset="https://cdn.mos.cms.futurecdn.net/qVmUFc6ZJmJSsd7tozf8UC-320-80.jpg.webp 320w, https://cdn.mos.cms.futurecdn.net/qVmUFc6ZJmJSsd7tozf8UC-480-80.jpg.webp 480w, https://cdn.mos.cms.futurecdn.net/qVmUFc6ZJmJSsd7tozf8UC-650-80.jpg.webp 650w, https://cdn.mos.cms.futurecdn.net/qVmUFc6ZJmJSsd7tozf8UC-970-80.jpg.webp 970w, https://cdn.mos.cms.futurecdn.net/qVmUFc6ZJmJSsd7tozf8UC-1024-80.jpg.webp 1024w, https://cdn.mos.cms.futurecdn.net/qVmUFc6ZJmJSsd7tozf8UC-1200-80.jpg.webp 1200w" sizes="(min-width: 1000px) 970px, calc(100vw - 40px)"><img src="https://cdn.mos.cms.futurecdn.net/qVmUFc6ZJmJSsd7tozf8UC.jpg" alt="A person using Xreal One AR glasses with the Khadas Mind 2S mini PC at a coffee shop" srcset="https://cdn.mos.cms.futurecdn.net/qVmUFc6ZJmJSsd7tozf8UC-320-80.jpg 320w, https://cdn.mos.cms.futurecdn.net/qVmUFc6ZJmJSsd7tozf8UC-480-80.jpg 480w, https://cdn.mos.cms.futurecdn.net/qVmUFc6ZJmJSsd7tozf8UC-650-80.jpg 650w, https://cdn.mos.cms.futurecdn.net/qVmUFc6ZJmJSsd7tozf8UC-970-80.jpg 970w, https://cdn.mos.cms.futurecdn.net/qVmUFc6ZJmJSsd7tozf8UC-1024-80.jpg 1024w, https://cdn.mos.cms.futurecdn.net/qVmUFc6ZJmJSsd7tozf8UC-1200-80.jpg 1200w" sizes="(min-width: 1000px) 970px, calc(100vw - 40px)" loading="lazy" data-original-mos="https://cdn.mos.cms.futurecdn.net/qVmUFc6ZJmJSsd7tozf8UC.jpg" data-pin-media="https://cdn.mos.cms.futurecdn.net/qVmUFc6ZJmJSsd7tozf8UC.jpg"></picture></p></div><figcaption itemprop="caption description"><span itemprop="copyrightHolder">(Image credit: Tom's Guide)</span></figcaption></figure><p>As silly as I felt taking this picture at my local coffee shop, I actually didn‚Äôt get any odd looks from the other patrons there. After connecting to the Wi-Fi, I got to work editing reviews and writing stories just like if I was back home.</p><p>One thing that I really liked about wearing the Xreal One glasses is that you can change their transparency. For instance, at home, I really enjoyed using the completely black theater mode while watching content online. However, while at the coffee shop, I switched them to clear mode so I was still aware of my surroundings.</p><figure data-bordeaux-image-check=""><div><p><picture><source type="image/webp" srcset="https://cdn.mos.cms.futurecdn.net/AXhJSiVH5NMPAEBnwsCKPm-320-80.jpg.webp 320w, https://cdn.mos.cms.futurecdn.net/AXhJSiVH5NMPAEBnwsCKPm-480-80.jpg.webp 480w, https://cdn.mos.cms.futurecdn.net/AXhJSiVH5NMPAEBnwsCKPm-650-80.jpg.webp 650w, https://cdn.mos.cms.futurecdn.net/AXhJSiVH5NMPAEBnwsCKPm-970-80.jpg.webp 970w, https://cdn.mos.cms.futurecdn.net/AXhJSiVH5NMPAEBnwsCKPm-1024-80.jpg.webp 1024w, https://cdn.mos.cms.futurecdn.net/AXhJSiVH5NMPAEBnwsCKPm-1200-80.jpg.webp 1200w" sizes="(min-width: 1000px) 970px, calc(100vw - 40px)"><img src="https://cdn.mos.cms.futurecdn.net/AXhJSiVH5NMPAEBnwsCKPm.jpg" alt="The Xreal One AR glasses, the Khadas Mind 2S mini PC, a mechanical keyboard, a trackball mouse and a Ugreen power bank set up on a counter at a coffee shop" srcset="https://cdn.mos.cms.futurecdn.net/AXhJSiVH5NMPAEBnwsCKPm-320-80.jpg 320w, https://cdn.mos.cms.futurecdn.net/AXhJSiVH5NMPAEBnwsCKPm-480-80.jpg 480w, https://cdn.mos.cms.futurecdn.net/AXhJSiVH5NMPAEBnwsCKPm-650-80.jpg 650w, https://cdn.mos.cms.futurecdn.net/AXhJSiVH5NMPAEBnwsCKPm-970-80.jpg 970w, https://cdn.mos.cms.futurecdn.net/AXhJSiVH5NMPAEBnwsCKPm-1024-80.jpg 1024w, https://cdn.mos.cms.futurecdn.net/AXhJSiVH5NMPAEBnwsCKPm-1200-80.jpg 1200w" sizes="(min-width: 1000px) 970px, calc(100vw - 40px)" loading="lazy" data-original-mos="https://cdn.mos.cms.futurecdn.net/AXhJSiVH5NMPAEBnwsCKPm.jpg" data-pin-media="https://cdn.mos.cms.futurecdn.net/AXhJSiVH5NMPAEBnwsCKPm.jpg"></picture></p></div><figcaption itemprop="caption description"><span itemprop="copyrightHolder">(Image credit: Tom's Guide)</span></figcaption></figure><p>You can‚Äôt take native screenshots directly from within the Xreal One glasses but what you see inside them is a sight to behold. With ultrawide mode enabled, I was able to have two full-size Chrome windows side by side just like on the <a data-analytics-id="inline-link" href="https://www.tomsguide.com/computing/i-ditched-my-ultrawide-display-for-this-dual-monitor-setup-heres-what-happened" data-before-rewrite-localise="https://www.tomsguide.com/computing/i-ditched-my-ultrawide-display-for-this-dual-monitor-setup-heres-what-happened">dual-monitor setup</a> I put together last month. However, clear mode took the whole experience up a notch as it made it feel like I was using a transparent monitor straight out of <a data-analytics-id="inline-link" href="https://www.tomsguide.com/news/i-just-saw-the-future-of-oleds-at-ces-2024-this-feels-like-the-next-big-thing" data-before-rewrite-localise="https://www.tomsguide.com/news/i-just-saw-the-future-of-oleds-at-ces-2024-this-feels-like-the-next-big-thing">Minority Report</a>.</p><p>Sitting at the window, I was able to watch the cars go by while I worked as if my desk was right up next to a window with a great view. I used to work in coffee shops a whole lot more back before I set up a home office in my house. With this setup though, I could easily see myself getting back out of the house and doing so again.</p><figure data-bordeaux-image-check=""><div><p><picture><source type="image/webp" srcset="https://cdn.mos.cms.futurecdn.net/RjPKxKiyB2WaLFxksUcg65-320-80.jpg.webp 320w, https://cdn.mos.cms.futurecdn.net/RjPKxKiyB2WaLFxksUcg65-480-80.jpg.webp 480w, https://cdn.mos.cms.futurecdn.net/RjPKxKiyB2WaLFxksUcg65-650-80.jpg.webp 650w, https://cdn.mos.cms.futurecdn.net/RjPKxKiyB2WaLFxksUcg65-970-80.jpg.webp 970w, https://cdn.mos.cms.futurecdn.net/RjPKxKiyB2WaLFxksUcg65-1024-80.jpg.webp 1024w, https://cdn.mos.cms.futurecdn.net/RjPKxKiyB2WaLFxksUcg65-1200-80.jpg.webp 1200w" sizes="(min-width: 1000px) 970px, calc(100vw - 40px)"><img src="https://cdn.mos.cms.futurecdn.net/RjPKxKiyB2WaLFxksUcg65.jpg" alt="Packing a mini PC/AR glasses work from anywhere setup into a backpack" srcset="https://cdn.mos.cms.futurecdn.net/RjPKxKiyB2WaLFxksUcg65-320-80.jpg 320w, https://cdn.mos.cms.futurecdn.net/RjPKxKiyB2WaLFxksUcg65-480-80.jpg 480w, https://cdn.mos.cms.futurecdn.net/RjPKxKiyB2WaLFxksUcg65-650-80.jpg 650w, https://cdn.mos.cms.futurecdn.net/RjPKxKiyB2WaLFxksUcg65-970-80.jpg 970w, https://cdn.mos.cms.futurecdn.net/RjPKxKiyB2WaLFxksUcg65-1024-80.jpg 1024w, https://cdn.mos.cms.futurecdn.net/RjPKxKiyB2WaLFxksUcg65-1200-80.jpg 1200w" sizes="(min-width: 1000px) 970px, calc(100vw - 40px)" loading="lazy" data-original-mos="https://cdn.mos.cms.futurecdn.net/RjPKxKiyB2WaLFxksUcg65.jpg" data-pin-media="https://cdn.mos.cms.futurecdn.net/RjPKxKiyB2WaLFxksUcg65.jpg"></picture></p></div><figcaption itemprop="caption description"><span itemprop="copyrightHolder">(Image credit: Tom's Guide)</span></figcaption></figure><p>When it was time to head out, packing everything up into my bag was a cinch and only took me a minute or so. Surprisingly, the Ugreen Nexode Power Bank is the heaviest item in this setup at just over 500 grams while the Khadas Mind 2S weighs 435 grams and the Xreal One glasses weigh 84 grams.</p><h2 id="not-just-for-coffee-shops-3">Not just for coffee shops</h2><figure data-bordeaux-image-check=""><div><p><picture><source type="image/webp" srcset="https://cdn.mos.cms.futurecdn.net/3oFg4yjHhGhwCpoPmX3CX9-320-80.jpg.webp 320w, https://cdn.mos.cms.futurecdn.net/3oFg4yjHhGhwCpoPmX3CX9-480-80.jpg.webp 480w, https://cdn.mos.cms.futurecdn.net/3oFg4yjHhGhwCpoPmX3CX9-650-80.jpg.webp 650w, https://cdn.mos.cms.futurecdn.net/3oFg4yjHhGhwCpoPmX3CX9-970-80.jpg.webp 970w, https://cdn.mos.cms.futurecdn.net/3oFg4yjHhGhwCpoPmX3CX9-1024-80.jpg.webp 1024w, https://cdn.mos.cms.futurecdn.net/3oFg4yjHhGhwCpoPmX3CX9-1200-80.jpg.webp 1200w" sizes="(min-width: 1000px) 970px, calc(100vw - 40px)"><img src="https://cdn.mos.cms.futurecdn.net/3oFg4yjHhGhwCpoPmX3CX9.jpg" alt="Using the Khadas Mind 2S and the Xreal One AR glasses on a tray table on an airplane" srcset="https://cdn.mos.cms.futurecdn.net/3oFg4yjHhGhwCpoPmX3CX9-320-80.jpg 320w, https://cdn.mos.cms.futurecdn.net/3oFg4yjHhGhwCpoPmX3CX9-480-80.jpg 480w, https://cdn.mos.cms.futurecdn.net/3oFg4yjHhGhwCpoPmX3CX9-650-80.jpg 650w, https://cdn.mos.cms.futurecdn.net/3oFg4yjHhGhwCpoPmX3CX9-970-80.jpg 970w, https://cdn.mos.cms.futurecdn.net/3oFg4yjHhGhwCpoPmX3CX9-1024-80.jpg 1024w, https://cdn.mos.cms.futurecdn.net/3oFg4yjHhGhwCpoPmX3CX9-1200-80.jpg 1200w" sizes="(min-width: 1000px) 970px, calc(100vw - 40px)" loading="lazy" data-original-mos="https://cdn.mos.cms.futurecdn.net/3oFg4yjHhGhwCpoPmX3CX9.jpg" data-pin-media="https://cdn.mos.cms.futurecdn.net/3oFg4yjHhGhwCpoPmX3CX9.jpg"></picture></p></div><figcaption itemprop="caption description"><span itemprop="copyrightHolder">(Image credit: Tom's Guide)</span></figcaption></figure><p>Now for the kicker. I actually brought this mini PC/AR glasses setup with me to New York last week when I went to try out the <a data-analytics-id="inline-link" href="https://www.tomsguide.com/news/nintendo-switch-2" data-before-rewrite-localise="https://www.tomsguide.com/news/nintendo-switch-2">Nintendo Switch 2</a>.</p><p>As the tray table on an airplane is known for being notoriously small, I decided to break out all my gear and try to set it up there too. It was cramped getting everything out of my bag but once I had it all set up, I was able to get the full desktop experience while cruising at over 30,000 feet up in the air.</p><p>After checking into my hotel, I broke out everything again and got to work. In fact, I wrote my entire <a data-analytics-id="inline-link" href="https://www.tomsguide.com/gaming/nintendo/nintendo-switch-2-review" data-before-rewrite-localise="https://www.tomsguide.com/gaming/nintendo/nintendo-switch-2-review">hands-on review of the Switch 2</a> using this setup over the course of a few hours. Even though I was far from my desk, I felt right at home typing away with a pair of AR specs on my head. I even gave my guide on the <a data-analytics-id="inline-link" href="https://www.tomsguide.com/best-picks/best-office-chairs" data-before-rewrite-localise="https://www.tomsguide.com/best-picks/best-office-chairs">best office chairs</a> a big update while using this mobile setup and that too went surprisingly well.</p><p>I know that even if you made it this far, you still might be wondering why I don‚Äôt just work from a laptop instead. The big reason for me is that I love the feel of one of the <a data-analytics-id="inline-link" href="https://www.tomsguide.com/best-picks/best-mechanical-keyboards" data-before-rewrite-localise="https://www.tomsguide.com/best-picks/best-mechanical-keyboards">best mechanical keyboards</a> under my fingertips while typing along with the level of control and customizable buttons that I get with a trackball mouse. Another thing that has always turned me off from laptops is that you can‚Äôt easily swap out a broken keyboard or upgrade their components, that is unless you get one from <a data-analytics-id="inline-link" href="https://www.tomsguide.com/computing/laptops/framework-announces-two-upgradeable-laptops-and-a-brand-new-modular-mini-pc" data-before-rewrite-localise="https://www.tomsguide.com/computing/laptops/framework-announces-two-upgradeable-laptops-and-a-brand-new-modular-mini-pc">Framework</a>. Likewise, I‚Äôve yet to see a laptop with an ultrawide display and I doubt I will anytime soon.</p><p>This setup has been kicking around in my head for months now but thanks to Khadas and Xreal‚Äôs help, I got to make it a reality. And after using it for the past two weeks, I can honestly say it‚Äôs even better than I expected it would be.</p><p>So what about you? Could you see yourself spending a full day working with smart glasses instead of using a monitor? Likewise, would you try this setup out if you had the chance? Let me know in the comments!</p><h3 id="section-more-from-tom-s-guide"><span>More from Tom's Guide</span></h3><ul><li><a href="https://www.tomsguide.com/computing/monitors/i-spent-a-week-trying-3-different-stacked-monitor-setups-and-this-is-my-favorite" data-before-rewrite-localise="https://www.tomsguide.com/computing/monitors/i-spent-a-week-trying-3-different-stacked-monitor-setups-and-this-is-my-favorite">I put 3 stacked monitor setups to the test and this is the one I‚Äôm sticking with</a></li><li><a href="https://www.tomsguide.com/computing/smart-glasses/xreal-one-vs-viture-pro-ar-glasses" data-before-rewrite-localise="https://www.tomsguide.com/computing/smart-glasses/xreal-one-vs-viture-pro-ar-glasses">Xreal One vs Viture Pro: Which AR glasses should you buy?</a></li><li><a href="https://www.tomsguide.com/computing/peripherals/i-spent-just-dollar30-on-a-mechanical-keyboard-to-prove-you-dont-need-to-waste-your-money" data-before-rewrite-localise="https://www.tomsguide.com/computing/peripherals/i-spent-just-dollar30-on-a-mechanical-keyboard-to-prove-you-dont-need-to-waste-your-money">I spent just $30 on a mechanical keyboard to prove you don‚Äôt need to waste your money</a></li></ul>
</div>
<div data-hydrate="true" id="slice-container-newsletterForm-articleInbodyContent-X9dpnXp5M4v9MZotSkGWCc"><section><p>Get instant access to breaking news, the hottest reviews, great deals and helpful tips.</p></section></div>



<!-- Drop in a standard article here maybe? -->

<div id="slice-container-authorBio-X9dpnXp5M4v9MZotSkGWCc"><p>Anthony Spadafora is the managing editor for security and home office furniture at Tom‚Äôs Guide where he covers everything from data breaches to password managers and the best way to cover your whole home or business with Wi-Fi. He also reviews standing desks, office chairs and other home office accessories with a penchant for building desk setups. Before joining the team, Anthony wrote for ITProPortal while living in Korea and later for TechRadar Pro after moving back to the US. Based in Houston, Texas, when he‚Äôs not writing Anthony can be found tinkering with PCs and game consoles, managing cables and upgrading his smart home.&nbsp;</p></div>
</section>






</div></div>]]></description>
        </item>
    </channel>
</rss>